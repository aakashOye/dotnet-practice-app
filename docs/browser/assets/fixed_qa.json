[
  {
    "type": "mcq",
    "level": "beginner",
    "topic": "C# Fundamentals",
    "question": "Which of the following is a value type in C#?",
    "options": [
      "string",
      "class",
      "int",
      "object"
    ],
    "correct_answer": "int",
    "answer": "Value types directly hold their value in memory. `int` is a primitive value type in C#."
  },
  {
    "type": "descriptive",
    "level": "beginner",
    "topic": "C# Fundamentals",
    "question": "Explain the difference between `int` and `string` data types in C#.",
    "answer": "`int` is a value type representing a 32-bit signed integer. `string` is a reference type representing an immutable sequence of Unicode characters."
  },
  {
    "type": "mcq",
    "level": "beginner",
    "topic": "C# Fundamentals",
    "question": "What is the purpose of the `using` keyword in C#?",
    "options": [
      "To import a namespace",
      "To define a new class",
      "To declare a variable",
      "To create a loop"
    ],
    "correct_answer": "To import a namespace",
    "answer": "The `using` keyword is primarily used to import namespaces, allowing you to use types within that namespace without fully qualifying their names. It's also used for resource management in `using` statements."
  },
  {
    "type": "descriptive",
    "level": "beginner",
    "topic": "C# Fundamentals",
    "question": "What is a namespace in C# and why is it used?",
    "answer": "A namespace is a logical grouping of related types. It helps to organize code and prevent naming collisions between different parts of an application or different libraries."
  },
  {
    "type": "mcq",
    "level": "beginner",
    "topic": "C# Fundamentals",
    "question": "Which operator is used for assignment in C#?",
    "options": [
      "==",
      "=",
      "+=",
      "==="
    ],
    "correct_answer": "=",
    "answer": "The `=` operator is the assignment operator in C#."
  },
  {
    "type": "descriptive",
    "level": "beginner",
    "topic": "C# Fundamentals",
    "question": "What are the common arithmetic operators in C#?",
    "answer": "Common arithmetic operators in C# include `+` (addition), `-` (subtraction), `*` (multiplication), `/` (division), and `%` (modulus)."
  },
  {
    "type": "mcq",
    "level": "beginner",
    "topic": "C# Fundamentals",
    "question": "Which of the following is a reference type in C#?",
    "options": [
      "struct",
      "enum",
      "bool",
      "string"
    ],
    "correct_answer": "string",
    "answer": "Reference types store a reference to the memory location where the actual data is stored. `string` is a reference type in C#."
  },
  {
    "type": "descriptive",
    "level": "beginner",
    "topic": "C# Fundamentals",
    "question": "Explain the difference between value types and reference types in C#.",
    "answer": "Value types hold the actual data within their own memory allocation, while reference types hold a reference (memory address) to the actual data, which is stored elsewhere in memory (usually on the heap). Assignment of value types copies the value, while assignment of reference types copies the reference."
  },
  {
    "type": "mcq",
    "level": "beginner",
    "topic": "C# Fundamentals",
    "question": "What is the purpose of the `new` keyword in C#?",
    "options": [
      "To declare a variable",
      "To create a new instance of a class",
      "To define a new namespace",
      "To write output to the console"
    ],
    "correct_answer": "To create a new instance of a class",
    "answer": "The `new` keyword is used to create a new instance (object) of a class or a value type."
  },
  {
    "type": "descriptive",
    "level": "beginner",
    "topic": "C# Fundamentals",
    "question": "What is a constructor in C#?",
    "answer": "A constructor is a special method of a class that is automatically called when an object of that class is created. It is used to initialize the object's state."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "C# Fundamentals",
    "question": "What is method overloading in C#?",
    "options": [
      "Defining a method with the same name but different return type",
      "Defining a method with the same name and the same parameters",
      "Defining multiple methods in the same class with the same name but different parameter lists",
      "Defining a method that calls another method"
    ],
    "correct_answer": "Defining multiple methods in the same class with the same name but different parameter lists",
    "answer": "Method overloading allows you to define multiple methods in the same class with the same name but different parameter lists (number, types, or order of parameters)."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "C# Fundamentals",
    "question": "Explain the concept of inheritance in C#.",
    "answer": "Inheritance is a mechanism in which a new class (derived class or child class) inherits properties and methods from an existing class (base class or parent class). It promotes code reusability and establishes an \"is-a\" relationship between classes."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "C# Fundamentals",
    "question": "Which keyword is used to implement inheritance in C#?",
    "options": [
      "implements",
      "extends",
      "inherits",
      ":"
    ],
    "correct_answer": ":",
    "answer": "The colon (`:`) is used to specify the base class when defining a derived class in C#."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "C# Fundamentals",
    "question": "What is the difference between a class and a struct in C#?",
    "answer": "Classes are reference types and reside on the heap, while structs are value types and reside on the stack. Classes support inheritance, while structs do not. Structs are generally used for small, data-centric types to improve performance."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "C# Fundamentals",
    "question": "What is the purpose of the `virtual` keyword in C#?",
    "options": [
      "To prevent a method from being overridden",
      "To indicate that a method must be overridden in derived classes",
      "To allow a method to be overridden in derived classes",
      "To define a static method"
    ],
    "correct_answer": "To allow a method to be overridden in derived classes",
    "answer": "The `virtual` keyword is used to declare a method that can be overridden in a derived class using the `override` keyword."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "C# Fundamentals",
    "question": "Explain the concept of polymorphism in C#.",
    "answer": "Polymorphism means \"many forms.\" In C#, it allows objects of different classes to be treated as objects of a common base class. This enables writing more flexible and extensible code through method overriding and interfaces."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "C# Fundamentals",
    "question": "What is an interface in C#?",
    "options": [
      "A class that cannot be instantiated",
      "A blueprint of a class that contains only abstract members",
      "A class with only static members",
      "A collection of related classes"
    ],
    "correct_answer": "A blueprint of a class that contains only abstract members",
    "answer": "An interface defines a contract that classes can implement. It contains only declarations of methods, properties, events, or indexers, without providing any implementation."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "C# Fundamentals",
    "question": "How does C# support multiple inheritance?",
    "answer": "C# does not directly support multiple inheritance of classes. However, a class can implement multiple interfaces, which provides a form of multiple inheritance of behavior."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "C# Fundamentals",
    "question": "What is the purpose of the `abstract` keyword in C#?",
    "options": [
      "To create a class that cannot be instantiated",
      "To create a method that must be implemented in derived classes",
      "Both of the above",
      "None of the above"
    ],
    "correct_answer": "Both of the above",
    "answer": "The `abstract` keyword can be used to declare an abstract class (which cannot be instantiated) or an abstract member (which must be implemented in derived non-abstract classes)."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "C# Fundamentals",
    "question": "Explain the difference between an abstract class and an interface in C#.",
    "answer": "An abstract class can have both abstract and non-abstract members (with implementation), and a class can inherit from only one abstract class. An interface can only contain abstract members (implicitly), and a class can implement multiple interfaces."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "C# Fundamentals",
    "question": "What is a property in C#?",
    "options": [
      "A variable declared within a class",
      "A method used to access private fields of a class",
      "A member that provides controlled access to the fields of an object",
      "A type of event in C#"
    ],
    "correct_answer": "A member that provides controlled access to the fields of an object",
    "answer": "A property in C# is a member of a class that provides a flexible mechanism to read, write, or compute the value of a private field while allowing controlled access through get and set accessors."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "C# Fundamentals",
    "question": "What are access modifiers in C#? List the common ones.",
    "answer": "Access modifiers control the visibility and accessibility of class members. Common access modifiers include: `public`, `private`, `protected`, `internal`, and `protected internal`."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "C# Fundamentals",
    "question": "What is the default access modifier for a class member in C#?",
    "options": [
      "public",
      "private",
      "protected",
      "internal"
    ],
    "correct_answer": "private",
    "answer": "The default access modifier for a class member in C# is `private`."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "C# Fundamentals",
    "question": "Explain the difference between `public` and `private` access modifiers.",
    "answer": "`public` members are accessible from anywhere, both within and outside the class. `private` members are only accessible within the class in which they are declared."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "C# Fundamentals",
    "question": "What is the purpose of the `static` keyword in C#?",
    "options": [
      "To create an instance of a class",
      "To define a constant value",
      "To make a member belong to the class itself rather than to any specific object of that class",
      "To prevent a class from being inherited"
    ],
    "correct_answer": "To make a member belong to the class itself rather than to any specific object of that class",
    "answer": "The `static` keyword is used to declare members that belong to the class itself rather than to a specific instance of the class. Static members are shared among all instances of the class."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "C# Fundamentals",
    "question": "What is a static constructor in C#?",
    "answer": "A static constructor is a special method that is called automatically only once when the class is first loaded into memory or when the first instance of the class is created. It is used to initialize static members of the class."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "C# Fundamentals",
    "question": "What is the difference between a constant (`const`) and a read-only (`readonly`) field in C#?",
    "options": [
      "Constants can be initialized at runtime, while read-only fields must be initialized at compile time.",
      "Constants can be changed after initialization, while read-only fields cannot.",
      "Constants are implicitly static, while read-only fields can be instance or static.",
      "There is no difference between them."
    ],
    "correct_answer": "Constants are implicitly static, while read-only fields can be instance or static.",
    "answer": "Constants (`const`) must be initialized at compile time and their value cannot be changed. They are also implicitly static. Read-only (`readonly`) fields can be initialized at compile time or in the constructor and their value cannot be changed after initialization. They can be instance or static."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "C# Fundamentals",
    "question": "Explain the concept of encapsulation in C#.",
    "answer": "Encapsulation is the mechanism of hiding the implementation details of an object and exposing only a controlled interface to the outside world. It is achieved through access modifiers and properties, protecting the internal state of an object from direct external manipulation."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "C# Fundamentals",
    "question": "What is boxing and unboxing in C#?",
    "options": [
      "Converting a value type to a reference type and vice versa",
      "Converting an integer to a string and vice versa",
      "Converting a class to an interface and vice versa",
      "There is no such concept in C#"
    ],
    "correct_answer": "Converting a value type to a reference type and vice versa",
    "answer": "Boxing is the process of converting a value type to a reference type (object). Unboxing is the process of extracting the value type back from the boxed object."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "C# Fundamentals",
    "question": "What are nullable value types in C# and why are they used?",
    "answer": "Nullable value types allow value types to represent the value of null. They are created using the `?` syntax (e.g., `int?`). They are useful when dealing with data from sources like databases where a value type field might have a missing or null value."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "C# Fundamentals",
    "question": "What is the purpose of the `as` operator in C#?",
    "options": [
      "To explicitly convert one type to another",
      "To perform a type check and return null if the conversion fails",
      "To create an alias for a namespace",
      "To define an asynchronous method"
    ],
    "correct_answer": "To perform a type check and return null if the conversion fails",
    "answer": "The `as` operator is used to perform a type conversion between compatible reference types or nullable types. If the conversion is not possible, it returns `null` instead of throwing an exception."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "C# Fundamentals",
    "question": "What is the purpose of the `is` operator in C#?",
    "answer": "The `is` operator is used to check if an object is compatible with a given type or can be converted to that type."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "C# Fundamentals",
    "question": "What is an event in C#?",
    "options": [
      "A special type of method",
      "A mechanism for communication between objects",
      "A way to handle exceptions",
      "A type of loop"
    ],
    "correct_answer": "A mechanism for communication between objects",
    "answer": "An event in C# is a mechanism that allows one object (publisher) to notify other objects (subscribers) that something has happened."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "C# Fundamentals",
    "question": "Explain the concept of delegates in C#.",
    "answer": "A delegate in C# is a type that represents references to methods with a particular parameter list and return type. It allows you to treat methods as variables and pass them as parameters to other methods."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "C# Fundamentals",
    "question": "What is the difference between `Action` and `Func` delegates in C#?",
    "options": [
      "`Action` delegates return a value, while `Func` delegates do not.",
      "`Func` delegates can take parameters, while `Action` delegates cannot.",
      "`Action` delegates represent methods that take zero or more input parameters and do not return a value, while `Func` delegates represent methods that take zero or more input parameters and return a value.",
      "There is no difference between them."
    ],
    "correct_answer": "`Action` delegates represent methods that take zero or more input parameters and do not return a value, while `Func` delegates represent methods that take zero or more input parameters and return a value.",
    "answer": "`Action` delegates are used for methods that perform an action and do not return a value. `Func` delegates are used for methods that perform a calculation and return a value."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "C# Fundamentals",
    "question": "What is an exception in C#?",
    "answer": "An exception is an error that occurs during the execution of a program, disrupting the normal flow of instructions."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "C# Fundamentals",
    "question": "Which block is used to handle exceptions in C#?",
    "options": [
      "try...catch",
      "if...else",
      "for...loop",
      "while...loop"
    ],
    "correct_answer": "try...catch",
    "answer": "The `try...catch` block is used to handle exceptions in C#. Code that might throw an exception is placed within the `try` block, and the code to handle the exception is placed within the `catch` block."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "C# Fundamentals",
    "question": "What is the purpose of the `finally` block in a `try...catch` statement?",
    "answer": "The `finally` block contains code that is always executed, regardless of whether an exception was thrown in the `try` block or not. It is typically used for cleanup operations like releasing resources."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "C# Fundamentals",
    "question": "What is the base class for all exceptions in C#?",
    "options": [
      "System.Exception",
      "System.Object",
      "System.Error",
      "System.Throwable"
    ],
    "correct_answer": "System.Exception",
    "answer": "The `System.Exception` class is the base class for all exceptions in C#."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "C# Fundamentals",
    "question": "What is the difference between checked and unchecked exceptions in C#?",
    "answer": "C# primarily deals with unchecked exceptions (derived from `System.Exception`), which are not required to be explicitly caught or declared. Checked exceptions, common in languages like Java, are not a core feature of C#."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "C# Fundamentals",
    "question": "What is the purpose of the `throw` keyword in C#?",
    "options": [
      "To declare a new exception type",
      "To handle an exception",
      "To explicitly raise an exception",
      "To define a custom error message"
    ],
    "correct_answer": "To explicitly raise an exception",
    "answer": "The `throw` keyword is used to explicitly raise an exception in C#."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "C# Fundamentals",
    "question": "Explain the concept of garbage collection in C#.",
    "answer": "Garbage collection is an automatic memory management process in C# that reclaims memory occupied by objects that are no longer in use by the application. The .NET runtime's garbage collector periodically identifies and releases this unused memory, preventing memory leaks."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "C# Fundamentals",
    "question": "Which keyword is used to ensure that unmanaged resources are properly disposed of in C#?",
    "options": [
      "dispose",
      "release",
      "using",
      "garbageCollect"
    ],
    "correct_answer": "using",
    "answer": "The `using` statement in C# provides a convenient way to ensure that objects that implement the `IDisposable` interface have their `Dispose()` method called, which is typically used to release unmanaged resources."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "C# Fundamentals",
    "question": "What is the `IDisposable` interface in C#?",
    "answer": "The `IDisposable` interface is implemented by classes that hold unmanaged resources (like file handles, database connections, etc.). It defines a single method, `Dispose()`, which should be implemented to release these resources when the object is no longer needed."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "C# Fundamentals",
    "question": "What is the purpose of the `yield` keyword in C#?",
    "options": [
      "To create an asynchronous method",
      "To return a single value from a method",
      "To produce a sequence of values one at a time",
      "To define a static method"
    ],
    "correct_answer": "To produce a sequence of values one at a time",
    "answer": "The `yield` keyword is used to implement custom iterators for collections. It allows you to produce a sequence of values one at a time without having to create a temporary collection."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "C# Fundamentals",
    "question": "What are extension methods in C#?",
    "answer": "Extension methods allow you to add new methods to existing types without modifying the original type. They are static methods that are called as if they were instance methods of the extended type."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "C# Fundamentals",
    "question": "What is the purpose of the `params` keyword in C#?",
    "options": [
      "To define a parameter that is passed by reference",
      "To allow a method to accept a variable number of arguments of a specified type",
      "To define an optional parameter",
      "To specify a default value for a parameter"
    ],
    "correct_answer": "To allow a method to accept a variable number of arguments of a specified type",
    "answer": "The `params` keyword allows you to define a method parameter that can accept a variable number of arguments of the same type. These arguments are passed as an array."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "C# Fundamentals",
    "question": "Explain the concept of anonymous types in C#.",
    "answer": "Anonymous types provide a way to create simple classes on the fly without explicitly defining their names and properties. They are often used with LINQ to project data into a new shape."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "C# Fundamentals",
    "question": "What is the null-coalescing operator (`??`) in C#?",
    "options": [
      "It returns the left-hand operand if it is null; otherwise, it returns the right-hand operand.",
      "It returns the left-hand operand if it is not null; otherwise, it returns the right-hand operand.",
      "It throws an exception if the left-hand operand is null.",
      "It assigns the right-hand operand to the left-hand operand only if the left-hand operand is null."
    ],
    "correct_answer": "It returns the left-hand operand if it is not null; otherwise, it returns the right-hand operand.",
    "answer": "The null-coalescing operator (`??`) returns the value of its left-hand operand if it's not null; otherwise, it evaluates and returns the value of its right-hand operand."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "C# Fundamentals",
    "question": "What is the null-conditional operator (`?.`) in C#?",
    "answer": "The null-conditional operator (`?.`) allows you to access members of an object only if the object is not null. If the object is null, it returns null without throwing a `NullReferenceException`."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "C# Fundamentals",
    "question": "What is string interpolation in C#?",
    "options": [
      "A way to concatenate strings using the `+` operator",
      "A feature that allows you to embed expressions directly within string literals",
      "A method for comparing two strings",
      "A technique for formatting strings"
    ],
    "correct_answer": "A feature that allows you to embed expressions directly within string literals",
    "answer": "String interpolation in C# allows you to embed expressions directly within string literals using the `$` symbol before the string and curly braces `{}` around the expressions."
  },
  {
    "type": "descriptive",
    "level": "beginner",
    "topic": ".NET Framework vs .NET Core",
    "question": "What is the primary difference between .NET Framework and .NET Core?",
    "answer": "The primary difference is that .NET Framework is a Windows-only framework, while .NET Core is cross-platform, capable of running on Windows, macOS, and Linux."
  },
  {
    "type": "mcq",
    "level": "beginner",
    "topic": ".NET Framework vs .NET Core",
    "question": "Which of the following platforms can run .NET Core applications?",
    "options": [
      "Windows only",
      "macOS only",
      "Linux only",
      "Windows, macOS, and Linux"
    ],
    "correct_answer": "Windows, macOS, and Linux",
    "answer": ".NET Core is designed to be cross-platform, supporting various operating systems."
  },
  {
    "type": "descriptive",
    "level": "beginner",
    "topic": ".NET Framework vs .NET Core",
    "question": "What are the key advantages of .NET Core over .NET Framework?",
    "answer": "Key advantages include cross-platform compatibility, improved performance, smaller deployment size, modular design, and active open-source community."
  },
  {
    "type": "mcq",
    "level": "beginner",
    "topic": ".NET Framework vs .NET Core",
    "question": "Which version of .NET introduced the cross-platform capabilities?",
    "options": [
      ".NET Framework 4.8",
      ".NET Framework 3.5",
      ".NET Core 1.0",
      ".NET Standard 2.0"
    ],
    "correct_answer": ".NET Core 1.0",
    "answer": ".NET Core 1.0 was the first version to introduce cross-platform support."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": ".NET Framework vs .NET Core",
    "question": "Explain the concept of .NET Standard and its relationship with .NET Framework and .NET Core.",
    "answer": ".NET Standard is a formal specification of APIs that are intended to be available on all .NET implementations. It allows developers to write code in a single library that can be easily shared across different .NET platforms like .NET Framework, .NET Core, and Xamarin."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": ".NET Framework vs .NET Core",
    "question": "Which of the following is NOT a characteristic of .NET Core?",
    "options": [
      "Cross-platform",
      "Open-source",
      "Modular",
      "Large initial installation size"
    ],
    "correct_answer": "Large initial installation size",
    "answer": ".NET Core is designed to be lightweight and has a smaller initial installation size compared to .NET Framework."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": ".NET Framework vs .NET Core",
    "question": "What are the primary use cases for choosing .NET Framework over .NET Core?",
    "answer": "Primary use cases for choosing .NET Framework might include applications that heavily rely on older Windows-specific technologies like WPF (Windows Presentation Foundation) or Windows Forms, or when there are strong dependencies on third-party libraries that are not yet fully compatible with .NET Core."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": ".NET Framework vs .NET Core",
    "question": "Which of the following application models is primarily associated with .NET Framework but has limited support in early versions of .NET Core?",
    "options": [
      "ASP.NET Core MVC",
      "Web API",
      "Windows Forms",
      "Console Applications"
    ],
    "correct_answer": "Windows Forms",
    "answer": "Windows Forms is a UI framework that is part of the .NET Framework and has been added to .NET Core in later versions but might still have some limitations compared to the .NET Framework."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": ".NET Framework vs .NET Core",
    "question": "How does the deployment model differ between .NET Framework and .NET Core applications?",
    "answer": ".NET Framework applications typically rely on the .NET Framework being installed on the target machine. .NET Core offers more flexible deployment options, including framework-dependent deployment (relying on a shared .NET Core runtime) and self-contained deployment (including the necessary .NET Core runtime with the application)."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": ".NET Framework vs .NET Core",
    "question": "What is the role of NuGet in both .NET Framework and .NET Core?",
    "options": [
      "It is a code editor for .NET development",
      "It is a package manager used to install and manage libraries and dependencies",
      "It is a tool for compiling .NET code",
      "It is a testing framework for .NET applications"
    ],
    "correct_answer": "It is a package manager used to install and manage libraries and dependencies",
    "answer": "NuGet is the package manager for .NET, used in both .NET Framework and .NET Core projects to easily add, update, and remove libraries and dependencies."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": ".NET Framework vs .NET Core",
    "question": "Explain the concept of Side-by-Side execution in the context of .NET Framework and .NET Core.",
    "answer": "Side-by-side execution allows multiple versions of the .NET Framework or .NET Core runtime to exist on the same machine. This enables different applications to run with the specific runtime version they were built against, avoiding compatibility issues."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": ".NET Framework vs .NET Core",
    "question": "Which command-line interface (CLI) is primarily used for .NET Core development?",
    "options": [
      "msbuild",
      "csc.exe",
      "dotnet",
      "powershell"
    ],
    "correct_answer": "dotnet",
    "answer": "The `dotnet` CLI is the primary command-line tool for creating, building, running, and publishing .NET Core applications."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": ".NET Framework vs .NET Core",
    "question": "How does configuration management differ between traditional ASP.NET (on .NET Framework) and ASP.NET Core?",
    "answer": "Traditional ASP.NET often uses `web.config` for configuration. ASP.NET Core introduces a more flexible and modern configuration system that can read from various sources like JSON files (`appsettings.json`), environment variables, command-line arguments, and more, with built-in support for hierarchical configuration and environment-specific settings."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": ".NET Framework vs .NET Core",
    "question": "Which of the following is a key feature introduced in .NET Core that improves performance?",
    "options": [
      "Garbage Collection (Gen 0, Gen 1, Gen 2)",
      "Just-In-Time (JIT) compilation",
      "Optimized runtime and libraries",
      "Code Access Security (CAS)"
    ],
    "correct_answer": "Optimized runtime and libraries",
    "answer": ".NET Core has been designed with performance in mind, featuring an optimized runtime and libraries that often outperform the .NET Framework in various scenarios."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": ".NET Framework vs .NET Core",
    "question": "Explain the modularity aspect of .NET Core.",
    "answer": ".NET Core follows a modular design where you only include the necessary NuGet packages for your application. This results in smaller application sizes, faster deployment times, and reduced attack surface compared to the monolithic .NET Framework."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": ".NET Framework vs .NET Core",
    "question": "Which of the following is a web application framework built on top of .NET Core?",
    "options": [
      "ASP.NET Web Forms",
      "ASP.NET MVC 5",
      "ASP.NET Core",
      "WCF (Windows Communication Foundation)"
    ],
    "correct_answer": "ASP.NET Core",
    "answer": "ASP.NET Core is a modern, cross-platform, high-performance web application framework built on top of .NET Core."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": ".NET Framework vs .NET Core",
    "question": "What is the future direction of .NET development according to Microsoft?",
    "answer": "Microsoft's future direction for .NET development is focused on .NET (formerly known as .NET Core), which is the unified, cross-platform framework. .NET Framework 4.8 is the last major version of the .NET Framework."
  },
  {
    "type": "mcq",
    "level": "advanced",
    "topic": ".NET Framework vs .NET Core",
    "question": "How does the garbage collection implementation differ between .NET Framework and .NET Core?",
    "options": [
      ".NET Framework uses a workgroup garbage collector, while .NET Core uses a server garbage collector.",
      ".NET Framework uses a concurrent garbage collector, while .NET Core uses a non-concurrent one.",
      "Both use the same garbage collection implementation.",
      ".NET Core offers more configurable garbage collection options compared to .NET Framework."
    ],
    "correct_answer": ".NET Core offers more configurable garbage collection options compared to .NET Framework.",
    "answer": ".NET Core provides more flexibility in configuring the garbage collector, including options for server vs. workstation GC and different concurrency modes, allowing for better tuning based on the application's needs."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": ".NET Framework vs .NET Core",
    "question": "Discuss the impact of the open-source nature of .NET Core on its development and community support.",
    "answer": "The open-source nature of .NET Core has fostered a vibrant and active community. It allows for greater transparency, faster issue resolution through community contributions, and a wider range of developers participating in the framework's evolution. This collaborative approach often leads to more rapid innovation and broader platform support."
  },
  {
    "type": "mcq",
    "level": "advanced",
    "topic": ".NET Framework vs .NET Core",
    "question": "Which of the following is a key difference in the runtime environment between .NET Framework and .NET Core?",
    "options": [
      ".NET Framework runs on the Common Language Runtime (CLR), while .NET Core uses a different runtime.",
      ".NET Core uses a modular runtime where components can be included as needed, while .NET Framework has a larger, more monolithic CLR.",
      "Both use the same version of the CLR.",
      ".NET Framework runtime is cross-platform, while .NET Core's is not."
    ],
    "correct_answer": ".NET Core uses a modular runtime where components can be included as needed, while .NET Framework has a larger, more monolithic CLR.",
    "answer": ".NET Core's runtime is more modular, allowing applications to include only the necessary components, leading to smaller deployment footprints and potentially better performance."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": ".NET Framework vs .NET Core",
    "question": "Compare and contrast the support for different application models (e.g., Web Forms, WPF, ASP.NET MVC) in .NET Framework and .NET Core.",
    "answer": ".NET Framework has full support for older application models like Web Forms and WPF, while these were initially not available or had limited support in early .NET Core versions. ASP.NET MVC has evolved into ASP.NET Core MVC, which is a significant rewrite with architectural improvements. While WPF and Windows Forms have been added to later versions of .NET Core, they remain primarily Windows-centric."
  },
  {
    "type": "mcq",
    "level": "advanced",
    "topic": ".NET Framework vs .NET Core",
    "question": "How does dependency injection support differ between traditional ASP.NET (on .NET Framework) and ASP.NET Core?",
    "options": [
      "Traditional ASP.NET had built-in dependency injection, while ASP.NET Core relies on third-party libraries.",
      "ASP.NET Core has built-in, first-class support for dependency injection, while traditional ASP.NET required more manual configuration or the use of external frameworks.",
      "Both had the same level of built-in dependency injection support.",
      "Neither framework has built-in dependency injection."
    ],
    "correct_answer": "ASP.NET Core has built-in, first-class support for dependency injection, while traditional ASP.NET required more manual configuration or the use of external frameworks.",
    "answer": "ASP.NET Core has a robust and integrated dependency injection container, making it easier to build loosely coupled and testable applications. Traditional ASP.NET lacked this built-in support."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": ".NET Framework vs .NET Core",
    "question": "Discuss the implications of migrating a large .NET Framework application to .NET Core.",
    "answer": "Migrating a large .NET Framework application to .NET Core can offer benefits like cross-platform compatibility and performance improvements but can also be a complex undertaking. It might involve code changes due to API differences, updating dependencies, and potentially rewriting parts of the application, especially those relying on Windows-specific technologies. Thorough planning, testing, and a phased approach are usually recommended."
  },
  {
    "type": "mcq",
    "level": "advanced",
    "topic": ".NET Framework vs .NET Core",
    "question": "What is the role of `project.json` in the context of .NET Core development (historical context)?",
    "options": [
      "It is the main configuration file for .NET Framework projects.",
      "It was an early project configuration file format used in older versions of .NET Core.",
      "It is still the primary project file format for the latest .NET Core versions.",
      "It is used for defining NuGet package sources."
    ],
    "correct_answer": "It was an early project configuration file format used in older versions of .NET Core.",
    "answer": "`project.json` was used in earlier versions of .NET Core for project configuration, but it has been replaced by the `.csproj` file format, which is based on MSBuild."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": ".NET Framework vs .NET Core",
    "question": "How does the logging framework differ between traditional ASP.NET and ASP.NET Core?",
    "answer": "ASP.NET Core has a built-in, extensible logging framework that supports structured logging and integration with various logging providers. Traditional ASP.NET often relied on `System.Diagnostics.Trace` or external logging libraries."
  },
  {
    "type": "mcq",
    "level": "advanced",
    "topic": ".NET Framework vs .NET Core",
    "question": "What is the significance of the unification of .NET Framework and .NET Core into .NET 5 (and later)?",
    "options": [
      "It means that .NET Framework is no longer supported.",
      "It aimed to create a single, unified platform for all .NET development, eliminating the distinction between .NET Framework and .NET Core.",
      "It only affected the version numbering and did not involve any significant changes.",
      "It primarily focused on improving the performance of .NET Framework."
    ],
    "correct_answer": "It aimed to create a single, unified platform for all .NET development, eliminating the distinction between .NET Framework and .NET Core.",
    "answer": "The unification into .NET 5 (and subsequent versions like .NET 6, 7, etc.) aimed to consolidate the best features of both .NET Framework and .NET Core into a single, cross-platform framework for all types of .NET applications."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": ".NET Framework vs .NET Core",
    "question": "Discuss the implications of the .NET Framework being a Windows-only framework in today's diverse technology landscape.",
    "answer": "Being Windows-only limits the deployment options for applications built on .NET Framework, preventing them from running natively on macOS and Linux. This can be a significant disadvantage in today's cloud-centric and multi-platform environments where organizations often require applications to run on various operating systems."
  },
  {
    "type": "mcq",
    "level": "advanced",
    "topic": ".NET Framework vs .NET Core",
    "question": "Which of the following is a primary reason why Microsoft decided to create .NET Core?",
    "options": [
      "To replace the .NET Framework entirely due to performance issues.",
      "To enable .NET development on non-Windows platforms and to create a more modern, modular framework.",
      "To simplify the development process for Windows-only applications.",
      "To compete with Java in the enterprise market."
    ],
    "correct_answer": "To enable .NET development on non-Windows platforms and to create a more modern, modular framework.",
    "answer": "The creation of .NET Core was driven by the need for cross-platform support, improved performance, and a more modular architecture compared to the .NET Framework."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": ".NET Framework vs .NET Core",
    "question": "Explain the evolution from .NET Framework and .NET Core to the current .NET platform.",
    "answer": "The evolution started with the .NET Framework as the primary platform for Windows development. Then, .NET Core was introduced as a cross-platform alternative with a focus on performance and modularity. Eventually, Microsoft unified these platforms into .NET 5, which aimed to bring the best of both worlds together. This evolution continued with subsequent versions like .NET 6, .NET 7, and so on, with a focus on continuous improvement and a single, consistent development experience across all supported platforms."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": ".NET Framework vs .NET Core",
    "question": "Which project file format is used in modern .NET Core (and later .NET) projects?",
    "options": [
      ".sln",
      ".csproj",
      "project.json",
      "packages.config"
    ],
    "correct_answer": ".csproj",
    "answer": "Modern .NET Core and later .NET versions use the `.csproj` file format, which is based on MSBuild."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": ".NET Framework vs .NET Core",
    "question": "What is the purpose of the `global.json` file in .NET Core projects?",
    "answer": "The `global.json` file is used to define the SDK version to be used for a .NET Core project and can also be used to specify the location of source code directories."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": ".NET Framework vs .NET Core",
    "question": "Which of the following is a key benefit of the smaller deployment size in .NET Core?",
    "options": [
      "Faster compilation times",
      "Reduced disk space usage on the server",
      "Improved code readability",
      "Enhanced security features"
    ],
    "correct_answer": "Reduced disk space usage on the server",
    "answer": "The smaller deployment size in .NET Core leads to reduced disk space usage, faster deployment times, and potentially lower hosting costs."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": ".NET Framework vs .NET Core",
    "question": "Explain the concept of framework-dependent deployment in .NET Core.",
    "answer": "In framework-dependent deployment, the application relies on a shared .NET Core runtime being installed on the target machine. This results in a smaller deployment package but requires the correct .NET Core runtime to be present."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": ".NET Framework vs .NET Core",
    "question": "What is self-contained deployment in .NET Core?",
    "options": [
      "The application is deployed without any dependencies.",
      "The application includes all necessary .NET Core runtime components in its deployment package.",
      "The application relies on a cloud-based runtime environment.",
      "The application automatically updates its dependencies during deployment."
    ],
    "correct_answer": "The application includes all necessary .NET Core runtime components in its deployment package.",
    "answer": "Self-contained deployment packages include all the necessary .NET Core runtime and libraries required to run the application, making it independent of the runtime installed on the target machine, but resulting in a larger deployment size."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": ".NET Framework vs .NET Core",
    "question": "When would you choose framework-dependent deployment over self-contained deployment for a .NET Core application?",
    "answer": "Framework-dependent deployment is a good choice when you have control over the target environment and can ensure that the required .NET Core runtime is installed. It leads to smaller deployment sizes and can be beneficial when deploying multiple applications to the same server."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": ".NET Framework vs .NET Core",
    "question": "Which of the following is a key advantage of the modular design of .NET Core?",
    "options": [
      "Larger application size",
      "Slower startup time",
      "Reduced attack surface",
      "Increased complexity"
    ],
    "correct_answer": "Reduced attack surface",
    "answer": "The modular design of .NET Core allows you to include only the necessary components, which can reduce the attack surface of your application by minimizing the amount of code that could potentially have vulnerabilities."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": ".NET Framework vs .NET Core",
    "question": "How does performance tuning differ between .NET Framework and .NET Core?",
    "answer": "While many performance tuning techniques are applicable to both, .NET Core's architecture and runtime optimizations often provide better performance out-of-the-box. Additionally, .NET Core's cross-platform nature allows for tuning specific to different operating systems."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": ".NET Framework vs .NET Core",
    "question": "Which of the following is a primary reason for the improved performance in .NET Core compared to .NET Framework?",
    "options": [
      "Larger runtime size",
      "Use of older compilation techniques",
      "Optimized core libraries and runtime",
      "Lack of support for legacy features"
    ],
    "correct_answer": "Optimized core libraries and runtime",
    "answer": ".NET Core has been built with a focus on performance, leading to optimized core libraries and a more efficient runtime."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": ".NET Framework vs .NET Core",
    "question": "What considerations should be taken into account when deciding whether to start a new project with .NET Framework or .NET Core?",
    "answer": "Considerations include the target operating systems, performance requirements, dependencies on Windows-specific technologies, the need for modern features and a modular design, and the long-term support and future direction of the platform (.NET Core is the future)."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": ".NET Framework vs .NET Core",
    "question": "Which version of .NET Framework is generally considered the last major release?",
    "options": [
      "4.5",
      "4.6",
      "4.7",
      "4.8"
    ],
    "correct_answer": "4.8",
    "answer": ".NET Framework 4.8 is generally considered the last major release of the .NET Framework."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": ".NET Framework vs .NET Core",
    "question": "Explain the support lifecycle for .NET Framework and .NET Core (now .NET).",
    "answer": ".NET Framework 4.8 will continue to be supported as part of Windows. Modern .NET versions (starting from .NET 5) have a different support policy with Long-Term Support (LTS) and Current releases. LTS releases receive support for a longer duration."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": ".NET Framework vs .NET Core",
    "question": "What is the role of the Base Class Library (BCL) in both .NET Framework and .NET Core?",
    "options": [
      "It is the compiler for .NET languages.",
      "It provides a set of fundamental types, utilities, and base classes for building applications.",
      "It is the integrated development environment for .NET.",
      "It is the testing framework for .NET applications."
    ],
    "correct_answer": "It provides a set of fundamental types, utilities, and base classes for building applications.",
    "answer": "The Base Class Library (BCL) provides a rich set of APIs for common tasks like file I/O, networking, collections, and more, and it is a fundamental part of both .NET Framework and .NET Core."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": ".NET Framework vs .NET Core",
    "question": "Discuss the implications of the open-source nature of .NET Core for enterprises.",
    "answer": "The open-source nature of .NET Core can be beneficial for enterprises as it allows for greater control, transparency, and the ability to contribute to the framework's development. It also reduces vendor lock-in and fosters a larger community for support and knowledge sharing."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": ".NET Framework vs .NET Core",
    "question": "Which of the following is a primary reason why developers might prefer .NET Core for cloud-based applications?",
    "options": [
      "Stronger ties to the Windows operating system.",
      "Larger deployment footprint.",
      "Cross-platform capabilities and better performance.",
      "Limited support for modern web development paradigms."
    ],
    "correct_answer": "Cross-platform capabilities and better performance.",
    "answer": ".NET Core's cross-platform nature allows for deployment on various cloud platforms (including Linux-based ones), and its performance optimizations make it well-suited for cloud environments."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": ".NET Framework vs .NET Core",
    "question": "Explain the differences in the web hosting models between traditional ASP.NET and ASP.NET Core.",
    "answer": "Traditional ASP.NET applications are typically hosted in IIS (Internet Information Services) on Windows Server. ASP.NET Core offers more flexible hosting options, including IIS, Apache, Nginx, and the ability to self-host within the application process using Kestrel, a cross-platform web server."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": ".NET Framework vs .NET Core",
    "question": "What is Kestrel in the context of ASP.NET Core?",
    "options": [
      "A code editor for ASP.NET Core development.",
      "A cross-platform web server that is the default for ASP.NET Core applications.",
      "A database management tool for .NET Core.",
      "A client-side framework for building web UIs."
    ],
    "correct_answer": "A cross-platform web server that is the default for ASP.NET Core applications.",
    "answer": "Kestrel is a lightweight, cross-platform web server that is the default server for ASP.NET Core applications. It can be used directly or behind a reverse proxy like IIS or Nginx."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": ".NET Framework vs .NET Core",
    "question": "How does the middleware pipeline work in ASP.NET Core, and how does it compare to HTTP handlers and modules in traditional ASP.NET?",
    "answer": "ASP.NET Core uses a middleware pipeline where requests are processed through a series of middleware components. Each middleware can perform specific actions before or after the next middleware in the pipeline. This is a more streamlined and flexible approach compared to the HTTP handlers and modules in traditional ASP.NET, which had a more complex configuration and lifecycle."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": ".NET Framework vs .NET Core",
    "question": "Which of the following is a configuration source supported by default in ASP.NET Core?",
    "options": [
      "web.config",
      "machine.config",
      "app.config",
      "appsettings.json"
    ],
    "correct_answer": "appsettings.json",
    "answer": "ASP.NET Core uses `appsettings.json` as a primary configuration source by default, along with support for environment variables, command-line arguments, and more."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": ".NET Framework vs .NET Core",
    "question": "Explain how environment variables are used in ASP.NET Core configuration.",
    "answer": "Environment variables can be used to configure ASP.NET Core applications, often overriding settings from `appsettings.json`. This is particularly useful for setting environment-specific configurations (e.g., database connection strings for development, staging, and production)."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": ".NET Framework vs .NET Core",
    "question": "What is the role of `Startup.cs` in an ASP.NET Core application?",
    "options": [
      "It contains the main entry point of the application.",
      "It defines the middleware pipeline and configures services for dependency injection.",
      "It is the configuration file for the web server.",
      "It contains the routing rules for the application."
    ],
    "correct_answer": "It defines the middleware pipeline and configures services for dependency injection.",
    "answer": "The `Startup.cs` file in ASP.NET Core is crucial for configuring the application's services (for dependency injection) and setting up the middleware pipeline that will handle incoming requests."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": ".NET Framework vs .NET Core",
    "question": "What are the key differences in project structure between a traditional ASP.NET MVC 5 application and an ASP.NET Core MVC application?",
    "answer": "ASP.NET Core MVC has a more streamlined project structure with a `Startup.cs` file for configuration, a `Program.cs` for the entry point, and a more organized way of handling static files and other assets. Traditional ASP.NET MVC 5 had a `Global.asax` file and a different folder structure."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": ".NET Framework vs .NET Core",
    "question": "Which of the following is a built-in container for dependency injection in ASP.NET Core?",
    "options": [
      "Autofac",
      "StructureMap",
      "Unity",
      "Microsoft.Extensions.DependencyInjection"
    ],
    "correct_answer": "Microsoft.Extensions.DependencyInjection",
    "answer": "ASP.NET Core has a built-in dependency injection container provided by the `Microsoft.Extensions.DependencyInjection` namespace."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": ".NET Framework vs .NET Core",
    "question": "How can you register a service for dependency injection in ASP.NET Core?",
    "answer": "Services are typically registered in the `ConfigureServices` method of the `Startup.cs` file using extension methods on the `IServiceCollection` interface, such as `AddScoped`, `AddTransient`, and `AddSingleton`."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": ".NET Framework vs .NET Core",
    "question": "What are the different service lifetimes (scopes) available in ASP.NET Core's dependency injection?",
    "options": [
      "Global, Local, Transient",
      "Singleton, Scoped, Transient",
      "Permanent, Temporary, Instance",
      "Static, Dynamic, PerRequest"
    ],
    "correct_answer": "Singleton, Scoped, Transient",
    "answer": "The three main service lifetimes in ASP.NET Core's dependency injection are Singleton (created once per application lifetime), Scoped (created once per request), and Transient (created every time they are requested)."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": ".NET Framework vs .NET Core",
    "question": "Explain the role of the `Program.cs` file in an ASP.NET Core application.",
    "answer": "The `Program.cs` file contains the entry point of the application (the `Main` method). It is responsible for setting up the host for the application, which includes configuring the web server (Kestrel by default) and the `Startup` class."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": ".NET Framework vs .NET Core",
    "question": "Which of the following is a key difference in handling static files in ASP.NET Core compared to traditional ASP.NET?",
    "options": [
      "Static files are automatically served without any configuration.",
      "You need to explicitly enable middleware for serving static files in ASP.NET Core.",
      "Static files are not supported in ASP.NET Core.",
      "Static files are handled by a separate web server in ASP.NET Core."
    ],
    "correct_answer": "You need to explicitly enable middleware for serving static files in ASP.NET Core.",
    "answer": "In ASP.NET Core, you need to explicitly add the `StaticFiles` middleware to the request pipeline in the `Configure` method of `Startup.cs` to serve static files like CSS, JavaScript, and images."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": ".NET Framework vs .NET Core",
    "question": "How do you configure logging in ASP.NET Core?",
    "answer": "Logging in ASP.NET Core is configured in the `CreateHostBuilder` method in `Program.cs` or within the `Configure` method of `Startup.cs`. You can add various logging providers (e.g., Console, Debug, EventLog) and configure log levels."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": ".NET Framework vs .NET Core",
    "question": "What is the purpose of the `UseRouting()` and `UseEndpoints()` middleware in ASP.NET Core?",
    "options": [
      "To handle authentication and authorization.",
      "To configure static file serving.",
      "To define and map routes to specific handlers or controllers.",
      "To manage session state."
    ],
    "correct_answer": "To define and map routes to specific handlers or controllers.",
    "answer": "`UseRouting()` adds route matching to the middleware pipeline, and `UseEndpoints()` executes the endpoint matched by routing."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": ".NET Framework vs .NET Core",
    "question": "Explain the concept of Razor Pages in ASP.NET Core.",
    "answer": "Razor Pages are a simplified, page-focused approach to building web UI with ASP.NET Core. They make coding page-centric scenarios easier and more productive by combining the C# code and Razor markup within a single `.cshtml` file."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": ".NET Framework vs .NET Core",
    "question": "Which of the following is a key benefit of Razor Pages over traditional MVC for certain types of applications?",
    "options": [
      "Better support for complex business logic.",
      "More separation of concerns.",
      "Simpler and more focused structure for page-centric applications.",
      "Enhanced performance for large-scale applications."
    ],
    "correct_answer": "Simpler and more focused structure for page-centric applications.",
    "answer": "Razor Pages offer a more straightforward structure for page-centric applications, reducing the number of files and folders compared to traditional MVC with separate controllers and views."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": ".NET Framework vs .NET Core",
    "question": "How do you handle form submissions in Razor Pages?",
    "answer": "In Razor Pages, you typically handle form submissions within the code-behind file (`.cshtml.cs`) using handler methods that correspond to HTTP verbs (e.g., `OnGet`, `OnPost`). Model binding works similarly to MVC controllers."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": ".NET Framework vs .NET Core",
    "question": "What is the purpose of Tag Helpers in ASP.NET Core Razor views?",
    "options": [
      "To write server-side code directly within HTML.",
      "To extend the functionality of HTML elements with server-side behavior.",
      "To define client-side JavaScript functions.",
      "To style HTML elements using CSS."
    ],
    "correct_answer": "To extend the functionality of HTML elements with server-side behavior.",
    "answer": "Tag Helpers allow server-side code to participate in the creation and rendering of HTML elements in Razor views, providing a more natural and HTML-friendly way to add dynamic behavior."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": ".NET Framework vs .NET Core",
    "question": "Explain the concept of View Components in ASP.NET Core MVC.",
    "answer": "View Components are reusable rendering logic that are similar to partial views but with associated code. They are useful for rendering complex UI elements that involve data retrieval and processing, such as navigation menus or shopping cart summaries."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": ".NET Framework vs .NET Core",
    "question": "How does routing work in ASP.NET Core MVC?",
    "options": [
      "It is defined solely in XML configuration files.",
      "It maps incoming browser requests to specific controller actions based on URL patterns.",
      "It is handled entirely on the client-side using JavaScript.",
      "It is determined by the physical file structure of the application."
    ],
    "correct_answer": "It maps incoming browser requests to specific controller actions based on URL patterns.",
    "answer": "Routing in ASP.NET Core MVC maps incoming HTTP requests to specific controller actions based on defined URL patterns. This can be configured using attribute routing or convention-based routing."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": ".NET Framework vs .NET Core",
    "question": "What are Action Filters in ASP.NET Core MVC?",
    "answer": "Action Filters are attributes that can be applied to controller actions or entire controllers to execute code before (e.g., authorization) or after (e.g., logging) the action method executes."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "ASP.NET Core",
    "question": "What is the role of a Controller in ASP.NET Core MVC?",
    "options": [
      "To define the data model for the application.",
      "To handle user input and interact with the model to prepare data for the view.",
      "To define the user interface of the application.",
      "To manage the application's configuration."
    ],
    "correct_answer": "To handle user input and interact with the model to prepare data for the view.",
    "answer": "Controllers in ASP.NET Core MVC are responsible for receiving user requests, interacting with the application's model to retrieve or update data, and then selecting a view to render the response."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "ASP.NET Core",
    "question": "Explain the Model-View-Controller (MVC) architectural pattern as it applies to ASP.NET Core.",
    "answer": "MVC is a design pattern that separates an application into three interconnected parts: the Model (data and business logic), the View (user interface), and the Controller (handles user input and updates the model and view). ASP.NET Core MVC implements this pattern to create well-structured and maintainable web applications."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "ASP.NET Core",
    "question": "What is an Action in an ASP.NET Core MVC Controller?",
    "options": [
      "A class that represents a specific functionality.",
      "A method within a controller that handles incoming requests and returns a result.",
      "A view that is rendered to the user.",
      "A piece of middleware in the request pipeline."
    ],
    "correct_answer": "A method within a controller that handles incoming requests and returns a result.",
    "answer": "An Action in ASP.NET Core MVC is a public method within a controller that is responsible for handling specific incoming HTTP requests and returning a result, such as a View, a Redirect, or JSON data."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "ASP.NET Core",
    "question": "How do you pass data from a Controller to a View in ASP.NET Core MVC?",
    "answer": "Data can be passed from a controller to a view using several mechanisms, including ViewData (a dictionary), ViewBag (a dynamic property wrapper around ViewData), and strongly-typed View Models."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "ASP.NET Core",
    "question": "What is a View Model in ASP.NET Core MVC?",
    "options": [
      "A class representing the database schema.",
      "A class specifically designed to hold and transfer data between the controller and the view.",
      "A JavaScript file used for client-side rendering.",
      "A configuration file for the view engine."
    ],
    "correct_answer": "A class specifically designed to hold and transfer data between the controller and the view.",
    "answer": "A View Model is a custom class that encapsulates all the data required by a specific view. It promotes type safety and improves code organization."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "ASP.NET Core",
    "question": "Explain the purpose of the `@model` directive in a Razor View.",
    "answer": "The `@model` directive at the top of a Razor view is used to specify the type of the model that the view expects to receive from the controller. This enables strongly-typed access to the model's properties within the view."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "ASP.NET Core",
    "question": "What is the function of the `IActionResult` interface in ASP.NET Core MVC?",
    "options": [
      "It represents the data model being passed to the view.",
      "It defines a contract for the result of a controller action.",
      "It is used to handle exceptions within controllers.",
      "It specifies the routing rules for the application."
    ],
    "correct_answer": "It defines a contract for the result of a controller action.",
    "answer": "`IActionResult` is an interface that defines a contract for the result of an action method. It allows for returning various types of responses, such as views, redirects, JSON data, and more."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "ASP.NET Core",
    "question": "What are Tag Helpers in ASP.NET Core and how do they differ from HTML Helpers?",
    "answer": "Tag Helpers are server-side components that participate in rendering HTML elements in Razor views. They look like standard HTML attributes. HTML Helpers are methods that generate HTML markup within Razor views using C# code. Tag Helpers generally provide a more HTML-friendly syntax."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "ASP.NET Core",
    "question": "Explain the purpose of the `asp-for` Tag Helper.",
    "answer": "The `asp-for` Tag Helper is used to bind an HTML element (like an input field) to a property of the model. It automatically generates the `name` and `id` attributes based on the model property, and it also handles model binding on form submission."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "ASP.NET Core",
    "question": "What is Model Binding in ASP.NET Core?",
    "options": [
      "The process of converting a view model to a database entity.",
      "The process of mapping incoming HTTP request data to action method parameters.",
      "The process of validating user input in a form.",
      "The process of rendering a view based on the model data."
    ],
    "correct_answer": "The process of mapping incoming HTTP request data to action method parameters.",
    "answer": "Model Binding in ASP.NET Core is the process of taking data from HTTP requests (e.g., form data, query string parameters, route data) and mapping it to the parameters of controller action methods."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "ASP.NET Core",
    "question": "How does Validation work in ASP.NET Core MVC?",
    "answer": "Validation in ASP.NET Core MVC can be implemented using Data Annotations (attributes applied to model properties) and custom validation logic. When a form is submitted, the framework automatically validates the model based on these rules, and validation errors can be displayed in the view using Tag Helpers like `<div asp-validation-summary=\"All\">` and `<span asp-validation-for=\"PropertyName\">`."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "ASP.NET Core",
    "question": "What is the purpose of the `[HttpPost]` attribute on a controller action?",
    "options": [
      "It specifies that the action can only be accessed via HTTP GET requests.",
      "It indicates that the action is responsible for rendering a view.",
      "It specifies that the action can only be accessed via HTTP POST requests, typically used for form submissions.",
      "It defines a route for the action."
    ],
    "correct_answer": "It specifies that the action can only be accessed via HTTP POST requests, typically used for form submissions.",
    "answer": "The `[HttpPost]` attribute restricts the action method to only handle HTTP POST requests."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "ASP.NET Core",
    "question": "Explain the concept of Routing in ASP.NET Core MVC.",
    "answer": "Routing in ASP.NET Core is the process of mapping incoming HTTP requests to specific controller actions. It involves defining URL patterns (routes) and specifying which controller and action should handle requests that match those patterns. Routing can be configured using convention-based routing or attribute routing."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "ASP.NET Core",
    "question": "What is Attribute Routing in ASP.NET Core MVC?",
    "options": [
      "Defining routes in a separate configuration file.",
      "Defining routes directly on controller actions using attributes like `[Route]`, `[HttpGet]`, `[HttpPost]`, etc.",
      "Automatically generating routes based on controller and action names.",
      "Defining routes using a fluent API in the `Startup.cs` file."
    ],
    "correct_answer": "Defining routes directly on controller actions using attributes like `[Route]`, `[HttpGet]`, `[HttpPost]`, etc.",
    "answer": "Attribute routing allows you to define routes directly on controller actions using route attributes, providing more control over the URL structure."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "ASP.NET Core",
    "question": "How do you handle authentication and authorization in ASP.NET Core MVC?",
    "answer": "Authentication in ASP.NET Core involves identifying users, while authorization involves determining what authenticated users are allowed to do. ASP.NET Core provides built-in support for various authentication schemes (e.g., Cookies, JWT Bearer) and authorization mechanisms (e.g., roles, policies)."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "ASP.NET Core",
    "question": "What is the purpose of the `[Authorize]` attribute in ASP.NET Core?",
    "options": [
      "To specify the HTTP method for an action.",
      "To define a route for an action.",
      "To require users to be authenticated to access a controller or action.",
      "To handle exceptions thrown by an action."
    ],
    "correct_answer": "To require users to be authenticated to access a controller or action.",
    "answer": "The `[Authorize]` attribute is used to restrict access to controllers or actions to authenticated users."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "ASP.NET Core",
    "question": "Explain the concept of Anti-Forgery Tokens in ASP.NET Core.",
    "answer": "Anti-Forgery Tokens are used to prevent Cross-Site Request Forgery (CSRF) attacks. When a form is rendered, the server injects a unique token into the form, and the server verifies this token when the form is submitted to ensure the request originated from the application's own form."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "ASP.NET Core",
    "question": "Which service is typically used to manage user sessions in ASP.NET Core?",
    "options": [
      "SessionState",
      "HttpContext.Session",
      "CookieManager",
      "UserManager"
    ],
    "correct_answer": "HttpContext.Session",
    "answer": "The `HttpContext.Session` property provides access to the session for the current request. Session state needs to be configured in the `Startup.cs` file."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "ASP.NET Core",
    "question": "How do you work with Cookies in ASP.NET Core?",
    "answer": "Cookies can be accessed and manipulated using the `Request.Cookies` and `Response.Cookies` collections within a controller or Razor Page. You can set, read, and delete cookies."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "ASP.NET Core",
    "question": "What is the role of the `IConfiguration` interface in ASP.NET Core?",
    "options": [
      "To manage user sessions.",
      "To handle routing requests.",
      "To access application configuration settings from various sources.",
      "To perform dependency injection."
    ],
    "correct_answer": "To access application configuration settings from various sources.",
    "answer": "The `IConfiguration` interface provides access to application configuration settings loaded from sources like `appsettings.json`, environment variables, and command-line arguments."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "ASP.NET Core",
    "question": "How can you access configuration settings in a Controller or Razor Page?",
    "answer": "Configuration settings can be accessed in a Controller or Razor Page by injecting an instance of `IConfiguration` into the constructor or by using the `IOptions<T>` pattern for strongly-typed configuration."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "ASP.NET Core",
    "question": "What is the purpose of the `appsettings.json` file in ASP.NET Core?",
    "options": [
      "To define the project dependencies.",
      "To store application-specific configuration settings.",
      "To configure the web server.",
      "To define the routing rules."
    ],
    "correct_answer": "To store application-specific configuration settings.",
    "answer": "`appsettings.json` is a common file used to store application configuration settings in a JSON format."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "ASP.NET Core",
    "question": "Explain the concept of Environment-Specific Configuration in ASP.NET Core.",
    "answer": "ASP.NET Core supports environment-specific configuration, allowing you to have different settings for different environments (e.g., Development, Staging, Production). This is typically done using files like `appsettings.Development.json`, `appsettings.Staging.json`, etc."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "ASP.NET Core",
    "question": "What is the role of Middleware in ASP.NET Core?",
    "options": [
      "To handle database interactions.",
      "To process incoming HTTP requests and outgoing responses in a pipeline.",
      "To define the user interface of the application.",
      "To manage application state."
    ],
    "correct_answer": "To process incoming HTTP requests and outgoing responses in a pipeline.",
    "answer": "Middleware in ASP.NET Core forms a pipeline through which each HTTP request is processed. Each middleware component in the pipeline can perform specific operations on the request or response."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "ASP.NET Core",
    "question": "How do you add custom Middleware to the ASP.NET Core request pipeline?",
    "answer": "Custom middleware can be added to the request pipeline in the `Configure` method of the `Startup.cs` file using extension methods on the `IApplicationBuilder` interface, such as `UseMiddleware<T>` or by writing an extension method that wraps this."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "ASP.NET Core",
    "question": "Which built-in middleware component is used to handle exceptions in ASP.NET Core?",
    "options": [
      "StaticFilesMiddleware",
      "RoutingMiddleware",
      "AuthenticationMiddleware",
      "ExceptionHandlerMiddleware"
    ],
    "correct_answer": "ExceptionHandlerMiddleware",
    "answer": "The `ExceptionHandlerMiddleware` is used to handle unhandled exceptions in the ASP.NET Core request pipeline and can be configured to display an error page or perform other actions."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "ASP.NET Core",
    "question": "What is the purpose of the `UseStaticFiles()` middleware in ASP.NET Core?",
    "answer": "The `UseStaticFiles()` middleware is used to serve static files (like HTML, CSS, JavaScript, images) from the web root directory (typically `wwwroot`)."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "ASP.NET Core",
    "question": "What is the purpose of the `UseRouting()` middleware in ASP.NET Core?",
    "options": [
      "To authenticate users.",
      "To serve static files.",
      "To match incoming requests to defined routes.",
      "To handle exceptions."
    ],
    "correct_answer": "To match incoming requests to defined routes.",
    "answer": "The `UseRouting()` middleware adds route matching to the request pipeline, allowing the application to determine which endpoint should handle the current request."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "ASP.NET Core",
    "question": "Explain the difference between `app.Use()` and `app.Run()` when configuring the middleware pipeline.",
    "answer": "`app.Use()` adds a middleware component to the pipeline that can either process the request and pass it to the next middleware or short-circuit the pipeline. `app.Run()` adds a terminal middleware that processes the request and does not pass it to the next middleware in the pipeline."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "ASP.NET Core",
    "question": "What is the purpose of the `UseEndpoints()` middleware in ASP.NET Core?",
    "options": [
      "To define the routing patterns.",
      "To execute the endpoint that was matched by the routing middleware.",
      "To handle authentication.",
      "To serve static content."
    ],
    "correct_answer": "To execute the endpoint that was matched by the routing middleware.",
    "answer": "The `UseEndpoints()` middleware executes the endpoint that was selected by the `UseRouting()` middleware. This is where the request is actually handled by the appropriate controller action or Razor Page handler."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "ASP.NET Core",
    "question": "How do you handle model validation errors in a Razor Page?",
    "answer": "Model validation errors in Razor Pages are automatically added to the `ModelState`. You can check `ModelState.IsValid` in your handler methods and display validation errors in the Razor view using the `<div asp-validation-summary=\"All\">` and `<span asp-validation-for=\"PropertyName\">` Tag Helpers."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "ASP.NET Core",
    "question": "What is the role of the `@page` directive in a Razor Page?",
    "options": [
      "It defines the layout for the page.",
      "It marks the file as a Razor Page, making it routable.",
      "It specifies the model for the page.",
      "It includes other Razor views within the page."
    ],
    "correct_answer": "It marks the file as a Razor Page, making it routable.",
    "answer": "The `@page` directive at the top of a `.cshtml` file designates it as a Razor Page, making it directly accessible via a URL without a separate controller action."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "ASP.NET Core",
    "question": "How do you perform dependency injection in a Razor Page?",
    "answer": "Dependency injection in Razor Pages is typically done by adding a `@inject` directive at the top of the `.cshtml` file, followed by the type and the name of the service to be injected. You can also inject services into the code-behind file (`.cshtml.cs`) via the constructor."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "ASP.NET Core",
    "question": "What is the purpose of the `[BindProperty]` attribute in a Razor Page?",
    "options": [
      "To define a property that can be bound to incoming request data during model binding.",
      "To specify the data type of a property.",
      "To apply validation rules to a property.",
      "To make a property read-only."
    ],
    "correct_answer": "To define a property that can be bound to incoming request data during model binding.",
    "answer": "The `[BindProperty]` attribute is used in the code-behind file of a Razor Page to mark a property that should be bound to incoming request data (e.g., form values, query parameters)."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "ASP.NET Core",
    "question": "Explain the use of Layout Pages in ASP.NET Core.",
    "answer": "Layout Pages provide a way to define a common structure and layout for multiple views or Razor Pages in an application. They typically contain the main HTML structure, navigation, and placeholders (`@RenderBody()`, `@RenderSection()`) where the content of individual pages is rendered."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "ASP.NET Core",
    "question": "What is the function of Partial Views in ASP.NET Core?",
    "options": [
      "To define the overall layout of the application.",
      "To render reusable view content within other views.",
      "To handle form submissions.",
      "To define custom routing rules."
    ],
    "correct_answer": "To render reusable view content within other views.",
    "answer": "Partial Views are reusable Razor markup files (`.cshtml`) that can be rendered within other views or layout pages. They are useful for breaking down complex views into smaller, more manageable components."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "ASP.NET Core",
    "question": "How can you use JavaScript and CSS in an ASP.NET Core application?",
    "answer": "JavaScript and CSS files are typically placed in the `wwwroot` directory. You can link to these files in your Razor views or Layout Pages using standard HTML `<script>` and `<link>` tags. ASP.NET Core also supports bundling and minification of static assets."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "ASP.NET Core",
    "question": "What is the purpose of the `IActionResult` return type `View()` in a controller action?",
    "options": [
      "To return JSON data to the client.",
      "To redirect the user to another URL.",
      "To render a Razor view.",
      "To return an HTTP status code."
    ],
    "correct_answer": "To render a Razor view.",
    "answer": "The `View()` method returns an `IActionResult` that renders a Razor view to the client. You can optionally pass a model to the view."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "ASP.NET Core",
    "question": "Explain how to handle different HTTP status codes in an ASP.NET Core application.",
    "answer": "You can return specific HTTP status codes from controller actions using `IActionResult` return types like `Ok()`, `BadRequest()`, `NotFound()`, `StatusCode()`, etc. You can also configure custom error pages using middleware."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "ASP.NET Core",
    "question": "What is the purpose of the `IWebHostEnvironment` interface in ASP.NET Core?",
    "options": [
      "To manage user sessions.",
      "To provide information about the hosting environment (e.g., application name, content root path, environment name).",
      "To handle database connections.",
      "To configure logging."
    ],
    "correct_answer": "To provide information about the hosting environment (e.g., application name, content root path, environment name).",
    "answer": "The `IWebHostEnvironment` interface provides information about the web hosting environment, which can be useful for configuring environment-specific behavior."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "ASP.NET Core",
    "question": "How can you implement model validation using Data Annotations in ASP.NET Core?",
    "answer": "You can apply Data Annotation attributes (from the `System.ComponentModel.DataAnnotations` namespace) to the properties of your View Models or Razor Page model. These attributes define validation rules (e.g., `[Required]`, `[EmailAddress]`, `[StringLength]`) that are automatically enforced by the framework."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "ASP.NET Core",
    "question": "What is the purpose of the `[ValidateAntiForgeryToken]` attribute in ASP.NET Core?",
    "options": [
      "To validate user input.",
      "To enable HTTPS for an action.",
      "To protect against Cross-Site Request Forgery (CSRF) attacks.",
      "To implement authentication."
    ],
    "correct_answer": "To protect against Cross-Site Request Forgery (CSRF) attacks.",
    "answer": "The `[ValidateAntiForgeryToken]` attribute is used on form submission actions to ensure that the request includes a valid anti-forgery token, helping to prevent CSRF attacks."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "ASP.NET Core",
    "question": "Explain the process of creating and using a custom Tag Helper in ASP.NET Core.",
    "answer": "To create a custom Tag Helper, you need to create a class that inherits from `TagHelper`. This class will have properties and an `Process` or `ProcessAsync` method where you can modify the HTML output based on the context and attributes. You then need to register the assembly containing your Tag Helper in the `_ViewImports.cshtml` file."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "ASP.NET Core",
    "question": "What is the role of the `_ViewStart.cshtml` file in ASP.NET Core?",
    "options": [
      "To define global routing rules.",
      "To configure dependency injection.",
      "To specify the default layout page for views.",
      "To register custom Tag Helpers."
    ],
    "correct_answer": "To specify the default layout page for views.",
    "answer": "The `_ViewStart.cshtml` file is executed before each view is rendered. It is typically used to set the default layout page using `@Layout = \"_Layout\"`."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "ASP.NET Core",
    "question": "How do you handle static files from a location other than `wwwroot` in ASP.NET Core?",
    "answer": "You can serve static files from other locations by adding additional `StaticFileOptions` when calling `app.UseStaticFiles()` in the `Configure` method of `Startup.cs`. This allows you to specify different file providers and request paths."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "ASP.NET Core",
    "question": "What is the purpose of the `IHttpContextAccessor` interface in ASP.NET Core?",
    "options": [
      "To access the current HTTP request context.",
      "To manage user sessions.",
      "To handle authentication.",
      "To configure routing."
    ],
    "correct_answer": "To access the current HTTP request context.",
    "answer": "The `IHttpContextAccessor` interface provides a way to access the `HttpContext` (which contains information about the current HTTP request) from anywhere in your application, even in services that are not directly part of the request pipeline. However, it's generally recommended to avoid direct dependency on `HttpContext` where possible and instead rely on request-scoped services."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "ASP.NET Core",
    "question": "Explain the concept of Tag Helper precedence in ASP.NET Core.",
    "answer": "Tag Helper precedence determines the order in which Tag Helpers are executed when multiple Tag Helpers target the same element. You can set the precedence of a Tag Helper by overriding the `Order` property. Tag Helpers with lower order values are executed earlier."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "ASP.NET Core",
    "question": "What is the role of the `[FromRoute]` attribute in ASP.NET Core MVC?",
    "options": [
      "To bind data from the request body.",
      "To bind data from the query string.",
      "To bind data from the route parameters.",
      "To bind data from form fields."
    ],
    "correct_answer": "To bind data from the route parameters.",
    "answer": "The `[FromRoute]` attribute is used to explicitly specify that a method parameter should be bound to a value from the route data."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "ASP.NET Core",
    "question": "How do you handle file uploads in ASP.NET Core MVC or Razor Pages?",
    "answer": "File uploads are typically handled by receiving an `IFormFile` object as a parameter in a controller action or Razor Page handler. You can then access the file's content, name, and other properties, and save it to the server or cloud storage."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "ASP.NET Core",
    "question": "What is the purpose of the `[Bind]` attribute in ASP.NET Core MVC?",
    "options": [
      "To specify which properties of a model should be bound during model binding.",
      "To define a custom route for an action.",
      "To apply validation rules to a model.",
      "To create a new instance of a model."
    ],
    "correct_answer": "To specify which properties of a model should be bound during model binding.",
    "answer": "The `[Bind]` attribute can be used to explicitly include or exclude specific properties from model binding, providing control over which data from the request is used to populate the model."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "ASP.NET Core",
    "question": "Explain the concept of model state in ASP.NET Core.",
    "answer": "Model state represents the state of the model during model binding and validation. It contains information about the values submitted in the request, any validation errors that occurred, and whether the model is valid."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "Web API",
    "question": "What is a Web API and how does it differ from a traditional web application?",
    "answer": "A Web API is an application programming interface for the web. Unlike a traditional web application that primarily serves HTML to be rendered in a browser, a Web API typically serves data in formats like JSON or XML, intended for consumption by other applications or services."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "Web API",
    "question": "Which architectural style is commonly used for building Web APIs?",
    "options": [
      "SOAP",
      "RPC",
      "REST",
      "GraphQL"
    ],
    "correct_answer": "REST",
    "answer": "Representational State Transfer (REST) is a widely adopted architectural style for building scalable and stateless Web APIs."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "Web API",
    "question": "What are the core principles of RESTful APIs?",
    "answer": "The core principles of RESTful APIs include: Statelessness, Client-Server architecture, Cacheability, Layered System, Uniform Interface, and Code on Demand (optional)."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "Web API",
    "question": "Which HTTP method is typically used to retrieve data from a RESTful API?",
    "options": [
      "POST",
      "PUT",
      "DELETE",
      "GET"
    ],
    "correct_answer": "GET",
    "answer": "The HTTP GET method is used to request and retrieve data from a specified resource."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "Web API",
    "question": "What is the purpose of the HTTP POST method in a RESTful API?",
    "answer": "The HTTP POST method is primarily used to submit data to be processed to a specified resource, often resulting in the creation of a new resource."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "Web API",
    "question": "Which HTTP method is typically used to update an existing resource in a RESTful API?",
    "options": [
      "POST",
      "GET",
      "DELETE",
      "PUT"
    ],
    "correct_answer": "PUT",
    "answer": "The HTTP PUT method is used to update an existing resource at a known URI."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "Web API",
    "question": "What is the purpose of the HTTP DELETE method in a RESTful API?",
    "answer": "The HTTP DELETE method is used to delete a resource identified by a specific URI."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "Web API",
    "question": "What are HTTP status codes and why are they important in Web APIs?",
    "options": [
      "They are codes that indicate the data format of the response.",
      "They are codes that indicate the authentication status of the client.",
      "They are three-digit codes that indicate the outcome of an HTTP request.",
      "They are used to define the routing rules for the API."
    ],
    "correct_answer": "They are three-digit codes that indicate the outcome of an HTTP request.",
    "answer": "HTTP status codes are crucial for communicating the result of a client's request to the server. They provide standardized information about whether the request was successful, encountered an error, or requires further action."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "Web API",
    "question": "List some common HTTP status codes and their meanings in the context of a Web API.",
    "answer": "Common HTTP status codes include: 200 OK (success), 201 Created (resource created), 204 No Content (success, no response body), 400 Bad Request (client error), 401 Unauthorized (authentication required), 403 Forbidden (client not authorized), 404 Not Found (resource not found), 500 Internal Server Error (server error)."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "Web API",
    "question": "What is JSON and why is it commonly used in Web APIs?",
    "options": [
      "It is a programming language used to build APIs.",
      "It is a markup language for structuring web pages.",
      "It is a lightweight data-interchange format that is easy for humans to read and write and easy for machines to parse and generate.",
      "It is a protocol for transferring files over the internet."
    ],
    "correct_answer": "It is a lightweight data-interchange format that is easy for humans to read and write and easy for machines to parse and generate.",
    "answer": "JSON (JavaScript Object Notation) is a popular data format for Web APIs due to its simplicity, readability, and ease of parsing and generation in various programming languages."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "Web API",
    "question": "How do you create a Web API controller in ASP.NET Core?",
    "answer": "You create a Web API controller in ASP.NET Core by creating a class that inherits from `ControllerBase` or `Controller` (if you need view support) and decorating it with the `[ApiController]` attribute. You then define action methods within this controller, decorated with HTTP verb attributes like `[HttpGet]`, `[HttpPost]`, etc."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "Web API",
    "question": "What is the purpose of the `[ApiController]` attribute in ASP.NET Core Web API controllers?",
    "options": [
      "It enables support for views in the controller.",
      "It automatically handles model validation, parameter binding, and returns problem details for errors.",
      "It restricts the controller to only handle requests from the same domain.",
      "It enables authentication for the controller."
    ],
    "correct_answer": "It automatically handles model validation, parameter binding, and returns problem details for errors.",
    "answer": "The `[ApiController]` attribute provides several features that are convenient for building Web APIs, such as automatic HTTP 400 responses for invalid model states and parameter binding from route, query, and body."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "Web API",
    "question": "What is Content Negotiation in the context of Web APIs?",
    "options": [
      "The process of authenticating users accessing the API.",
      "The process of agreeing on the data format (e.g., JSON, XML) between the client and the server.",
      "The process of handling errors and exceptions in the API.",
      "The process of defining the API's endpoints and their URLs."
    ],
    "correct_answer": "The process of agreeing on the data format (e.g., JSON, XML) between the client and the server.",
    "answer": "Content negotiation is the mechanism by which the client and the server agree on the format of the data being exchanged. Clients typically specify their preferred format using the `Accept` header in the HTTP request."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "Web API",
    "question": "How do you implement input validation in an ASP.NET Core Web API?",
    "answer": "Input validation in ASP.NET Core Web APIs can be implemented using Data Annotations on the request models. When the `[ApiController]` attribute is used, the framework automatically validates the model, and if it's invalid, it returns an HTTP 400 Bad Request response with validation errors."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "Web API",
    "question": "What is the purpose of the `[FromBody]` attribute in an ASP.NET Core Web API action parameter?",
    "options": [
      "To bind the parameter from the route.",
      "To bind the parameter from the query string.",
      "To bind the parameter from the request body.",
      "To bind the parameter from the request headers."
    ],
    "correct_answer": "To bind the parameter from the request body.",
    "answer": "The `[FromBody]` attribute indicates that the parameter should be bound to the data sent in the HTTP request body (e.g., JSON or XML)."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "Web API",
    "question": "How do you handle different versions of your Web API?",
    "answer": "API versioning can be implemented in several ways, including URI versioning (e.g., `/api/v1/products`), query string parameter versioning (e.g., `/api/products?api-version=1`), or using custom request headers. ASP.NET Core provides libraries and conventions to facilitate API versioning."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "Web API",
    "question": "What is the role of serialization and deserialization in Web APIs?",
    "options": [
      "To encrypt and decrypt data.",
      "To convert data between object format and a format suitable for transmission (e.g., JSON) and vice versa.",
      "To compress and decompress data.",
      "To validate the format of the data."
    ],
    "correct_answer": "To convert data between object format and a format suitable for transmission (e.g., JSON) and vice versa.",
    "answer": "Serialization is the process of converting objects into a format that can be easily transmitted (like JSON), and deserialization is the reverse process of converting the transmitted data back into objects."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "Web API",
    "question": "How do you handle exceptions in an ASP.NET Core Web API?",
    "answer": "Exception handling in ASP.NET Core Web APIs can be done using `try-catch` blocks within action methods or by implementing global exception handling middleware. The `[ApiController]` attribute also provides automatic handling that returns problem details for unhandled exceptions in development environments."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "Web API",
    "question": "What is Cross-Origin Resource Sharing (CORS) and why is it important for Web APIs?",
    "options": [
      "It is a security mechanism that prevents unauthorized access to the API from different domains.",
      "It is a technique for caching API responses to improve performance.",
      "It is a standard for documenting Web APIs.",
      "It is a protocol for secure communication over the internet."
    ],
    "correct_answer": "It is a security mechanism that prevents unauthorized access to the API from different domains.",
    "answer": "CORS is a security feature implemented by web browsers to restrict web pages from making requests to a different domain than the one that served the web page. Web APIs often need to configure CORS to allow requests from specific origins."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "Web API",
    "question": "How do you enable CORS in an ASP.NET Core Web API?",
    "answer": "CORS can be enabled in ASP.NET Core by configuring the CORS middleware in the `ConfigureServices` and `Configure` methods of the `Startup.cs` file. You can define policies to allow requests from specific origins, headers, and HTTP methods."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "Web API",
    "question": "What is API documentation and why is it important?",
    "options": [
      "It is the code implementation of the API.",
      "It is a description of the API's endpoints, parameters, and responses, making it easier for developers to understand and use the API.",
      "It is the server infrastructure that hosts the API.",
      "It is the client application that consumes the API."
    ],
    "correct_answer": "It is a description of the API's endpoints, parameters, and responses, making it easier for developers to understand and use the API.",
    "answer": "API documentation is essential for making an API usable by other developers. It provides clear information about the API's functionality, how to interact with it, and the expected inputs and outputs."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "Web API",
    "question": "How can you generate API documentation for an ASP.NET Core Web API?",
    "answer": "API documentation for ASP.NET Core Web APIs can be generated using tools like Swashbuckle (for Swagger/OpenAPI) or NSwag. These tools can automatically generate documentation based on your controller code and XML comments."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "Web API",
    "question": "What is Swagger/OpenAPI in the context of Web APIs?",
    "options": [
      "A programming language for building APIs.",
      "A set of specifications for describing RESTful APIs in a standardized format.",
      "A tool for testing Web APIs.",
      "A security protocol for APIs."
    ],
    "correct_answer": "A set of specifications for describing RESTful APIs in a standardized format.",
    "answer": "Swagger (now known as OpenAPI) is a specification that defines a standard, language-agnostic interface for RESTful APIs, allowing both humans and computers to discover and understand the capabilities of the service without access to source code, documentation, or through network traffic inspection."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "Web API",
    "question": "How do you implement authentication and authorization in an ASP.NET Core Web API?",
    "answer": "Authentication can be implemented using various middleware components like `AddAuthentication` with specific schemes (e.g., JWT Bearer, Cookies). Authorization can be implemented using the `[Authorize]` attribute on controllers or actions, and you can define roles and policies to control access based on user identity and permissions."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "Web API",
    "question": "What is JWT (JSON Web Token) and how is it used in Web API authentication?",
    "options": [
      "It is a type of HTTP request.",
      "It is an open standard for creating data that is digitally signed using JSON to transmit information securely.",
      "It is a database query language.",
      "It is a tool for load testing APIs."
    ],
    "correct_answer": "It is an open standard for creating data that is digitally signed using JSON to transmit information securely.",
    "answer": "JWT is a compact, URL-safe means of representing claims to be transferred between two parties. In Web API authentication, a server can issue a JWT to a client upon successful authentication, and the client can then include this token in subsequent requests to prove their identity."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "Web API",
    "question": "Explain the concept of statelessness in RESTful APIs.",
    "answer": "Statelessness means that each request from a client to the server must contain all the information needed to understand the request. The server does not store any client state between requests. This makes RESTful APIs more scalable and easier to manage."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "Web API",
    "question": "What are the benefits of building stateless Web APIs?",
    "options": [
      "Improved performance due to server-side session management.",
      "Simplified client-side logic.",
      "Increased scalability and reliability.",
      "Reduced security risks."
    ],
    "correct_answer": "Increased scalability and reliability.",
    "answer": "Statelessness improves scalability because the server doesn't need to maintain session information for each client, and it enhances reliability as server restarts or failures don't impact client sessions."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "Web API",
    "question": "How do you handle data pagination in a Web API?",
    "answer": "Data pagination involves returning data in smaller, manageable chunks (pages) instead of sending the entire dataset at once. This can be implemented by accepting parameters like page number and page size in the request and using these to query and return the appropriate subset of data. Response headers or a wrapper object can be used to provide metadata about the pagination (e.g., total number of records, current page, next page)."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "Web API",
    "question": "What are HATEOAS (Hypermedia as the Engine of Application State) and why are they considered a good practice for RESTful APIs?",
    "options": [
      "A security protocol for Web APIs.",
      "A way to document Web APIs.",
      "A principle of REST that allows clients to discover and navigate API resources dynamically through links included in the responses.",
      "A caching mechanism for Web APIs."
    ],
    "correct_answer": "A principle of REST that allows clients to discover and navigate API resources dynamically through links included in the responses.",
    "answer": "HATEOAS enables clients to interact with the API without hardcoding URLs. The API response includes links to related resources and actions, making the API more discoverable and evolving."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "Web API",
    "question": "How can you improve the performance of your ASP.NET Core Web API?",
    "answer": "Performance can be improved through various techniques, including efficient data access (e.g., using asynchronous operations and optimized queries), caching (both server-side and client-side), minimizing the size of request and response payloads, using efficient serialization formats, and optimizing the application's code and dependencies."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "Web API",
    "question": "What is the purpose of Response Caching in ASP.NET Core Web APIs?",
    "options": [
      "To cache database queries.",
      "To cache the entire HTTP response on the server to reduce the load for subsequent identical requests.",
      "To cache client-side assets like CSS and JavaScript.",
      "To cache authentication tokens."
    ],
    "correct_answer": "To cache the entire HTTP response on the server to reduce the load for subsequent identical requests.",
    "answer": "Response caching can significantly improve the performance of a Web API by storing the server's response for certain requests and serving the cached response for subsequent identical requests, reducing the need to process the request again."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "Web API",
    "question": "Explain the difference between PUT and PATCH HTTP methods for updating resources.",
    "answer": "The PUT method is intended to replace the entire resource at a given URI. If the resource does not exist, the server might create it. The PATCH method is used to apply partial modifications to a resource. It only sends the data that needs to be updated, rather than the entire resource."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "Web API",
    "question": "Which HTTP status code indicates that the server understands the request but refuses to authorize it?",
    "options": [
      "400 Bad Request",
      "401 Unauthorized",
      "403 Forbidden",
      "404 Not Found"
    ],
    "correct_answer": "403 Forbidden",
    "answer": "The 403 Forbidden status code indicates that the server understands the request but the client does not have the necessary permissions to access the resource."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "Web API",
    "question": "What are Idempotent operations in the context of RESTful APIs? Give examples.",
    "answer": "An operation is idempotent if performing it multiple times has the same effect as performing it once. The HTTP GET, PUT, and DELETE methods are considered idempotent. For example, calling `GET /products/123` multiple times will always return the same product (if it exists). Calling `DELETE /products/123` multiple times will result in the product being deleted (the first time) and then will likely return a 404 Not Found on subsequent calls, which is still the same final state."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "Web API",
    "question": "What is the purpose of the `[Produces]` attribute in an ASP.NET Core Web API action?",
    "options": [
      "To specify the HTTP methods the action supports.",
      "To define the route for the action.",
      "To indicate the response content types that the action can produce (e.g., application/json).",
      "To specify the required request content types."
    ],
    "correct_answer": "To indicate the response content types that the action can produce (e.g., application/json).",
    "answer": "The `[Produces]` attribute is used to specify the content types that the API action can return in the HTTP response. This is helpful for documentation and content negotiation."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "Web API",
    "question": "How do you handle versioning of request and response models in a Web API?",
    "answer": "Versioning of models can be handled by creating different classes for different versions, often within separate namespaces or folders. You might use different serialization settings or include/exclude properties based on the API version. Content negotiation can be used to serve the appropriate model version based on the client's request."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "Web API",
    "question": "What is the purpose of the `[Consumes]` attribute in an ASP.NET Core Web API action?",
    "options": [
      "To specify the response content types.",
      "To define the route.",
      "To indicate the request content types that the action can accept (e.g., application/json).",
      "To handle authentication."
    ],
    "correct_answer": "To indicate the request content types that the action can accept (e.g., application/json).",
    "answer": "The `[Consumes]` attribute specifies the media types that the action method can accept in the HTTP request body."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "Web API",
    "question": "Explain the concept of rate limiting in Web APIs and why it's important.",
    "answer": "Rate limiting is a technique used to control the number of requests that a client can make to an API within a specific time period. It's important for preventing abuse, ensuring fair usage, and protecting the API from being overwhelmed by excessive requests."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "Web API",
    "question": "How can you implement rate limiting in an ASP.NET Core Web API?",
    "options": [
      "Using built-in features of the .NET runtime.",
      "By manually tracking request counts and timestamps.",
      "Using middleware components or third-party libraries that provide rate limiting functionality.",
      "By configuring the web server to handle rate limiting."
    ],
    "correct_answer": "Using middleware components or third-party libraries that provide rate limiting functionality.",
    "answer": "Rate limiting in ASP.NET Core Web APIs is typically implemented using custom middleware or by leveraging third-party libraries that offer more advanced rate limiting features and configurations."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "Entity Framework Core",
    "question": "What is Entity Framework Core (EF Core)?",
    "answer": "Entity Framework Core (EF Core) is a lightweight, extensible, open-source, and cross-platform version of the popular Entity Framework ORM (Object-Relational Mapper) technology. It enables .NET developers to work with a database using .NET objects."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "Entity Framework Core",
    "question": "What is an ORM and what problem does it solve?",
    "options": [
      "A tool for designing user interfaces.",
      "A software development methodology.",
      "A programming paradigm for functional programming.",
      "An Object-Relational Mapper that allows developers to interact with databases using objects instead of raw SQL."
    ],
    "correct_answer": "An Object-Relational Mapper that allows developers to interact with databases using objects instead of raw SQL.",
    "answer": "An ORM acts as a bridge between the object-oriented domain of an application and the relational world of databases, handling the translation between objects and database tables."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "Entity Framework Core",
    "question": "What are the key advantages of using EF Core?",
    "answer": "Key advantages include increased developer productivity, reduced amount of code needed for data access, type safety, cross-platform compatibility, and support for various database systems."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "Entity Framework Core",
    "question": "What is a DbContext in EF Core?",
    "options": [
      "A class that represents a database table.",
      "A class that represents a relationship between tables.",
      "A class that serves as a bridge between your domain classes and the database.",
      "An interface for querying data from the database."
    ],
    "correct_answer": "A class that serves as a bridge between your domain classes and the database.",
    "answer": "A `DbContext` is the main class in EF Core that you use to interact with the database. It represents a session with the database and provides APIs for querying, saving, and tracking changes to entities."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "Entity Framework Core",
    "question": "How do you configure a DbContext in EF Core?",
    "answer": "A `DbContext` is typically configured by inheriting from it and overriding the `OnConfiguring` method to specify the database provider and connection string. In ASP.NET Core, it's often configured in the `ConfigureServices` method of `Startup.cs` using methods like `AddDbContext`."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "Entity Framework Core",
    "question": "What is the purpose of DbSet<T> in EF Core?",
    "options": [
      "It represents a single record in a database table.",
      "It represents a collection of all entities of a given type in the database.",
      "It defines the primary key of an entity.",
      "It is used to establish relationships between entities."
    ],
    "correct_answer": "It represents a collection of all entities of a given type in the database.",
    "answer": "`DbSet<T>` is a property on your `DbContext` that represents a collection of all entities of a given type, which maps to a specific table in the database. You can use it to perform CRUD operations on those entities."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "Entity Framework Core",
    "question": "What are Entities in EF Core?",
    "answer": "Entities in EF Core are classes that represent the tables in your database. Each instance of an entity class typically corresponds to a row in the database table."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "Entity Framework Core",
    "question": "What is Code-First approach in EF Core?",
    "options": [
      "Creating the database schema manually and then writing code to interact with it.",
      "Defining your domain classes first, and then EF Core creates the database schema based on these classes.",
      "Writing SQL queries directly within your C# code.",
      "Using a visual designer to create the database schema and entities."
    ],
    "correct_answer": "Defining your domain classes first, and then EF Core creates the database schema based on these classes.",
    "answer": "In the Code-First approach, you start by defining your domain classes (entities) in C#, and EF Core uses these classes to generate the database schema."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "Entity Framework Core",
    "question": "What is Database-First approach in EF Core?",
    "answer": "In the Database-First approach, you start with an existing database schema, and EF Core generates the entity classes and `DbContext` based on the database structure."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "Entity Framework Core",
    "question": "What are Migrations in EF Core?",
    "options": [
      "A way to seed initial data into the database.",
      "A set of code changes that update the database schema to match changes in your entity model.",
      "A mechanism for querying data from multiple databases.",
      "A tool for monitoring database performance."
    ],
    "correct_answer": "A set of code changes that update the database schema to match changes in your entity model.",
    "answer": "Migrations in EF Core allow you to evolve your database schema as your entity model changes over time. They are created and applied using the EF Core CLI tools or Package Manager Console."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "Entity Framework Core",
    "question": "How do you create and apply Migrations in EF Core?",
    "answer": "You can create a new migration using the command `dotnet ef migrations add <MigrationName>` in the EF Core CLI or `Add-Migration <MigrationName>` in the Package Manager Console. To apply the migrations to the database, you can use `dotnet ef database update` or `Update-Database`."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "Entity Framework Core",
    "question": "What is Fluent API in EF Core?",
    "options": [
      "A way to write SQL queries directly in C#.",
      "A configuration method in `DbContext` that allows you to configure entity mappings and relationships using C# code.",
      "A set of attributes used to define entity properties.",
      "A tool for visualizing the database schema."
    ],
    "correct_answer": "A configuration method in `DbContext` that allows you to configure entity mappings and relationships using C# code.",
    "answer": "Fluent API provides a way to configure aspects of your entity model that are not covered by data annotations, such as table and column names, primary keys, relationships, and more, within the `OnModelCreating` method of your `DbContext`."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "Entity Framework Core",
    "question": "What are Data Annotations in EF Core?",
    "answer": "Data Annotations are attributes that you can apply to your entity classes and properties to configure aspects of the entity mapping to the database, such as primary keys, required fields, maximum lengths, and relationships."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "Entity Framework Core",
    "question": "What is the difference between eager loading and lazy loading in EF Core?",
    "options": [
      "Eager loading loads related entities automatically, while lazy loading loads them on demand.",
      "Lazy loading loads all related entities at once, while eager loading loads them one by one.",
      "Eager loading is used for value types, while lazy loading is used for reference types.",
      "There is no difference between them."
    ],
    "correct_answer": "Eager loading loads related entities automatically, while lazy loading loads them on demand.",
    "answer": "Eager loading retrieves related entities along with the primary entity in a single query using the `Include` method. Lazy loading retrieves related entities only when you explicitly access the navigation property, potentially resulting in multiple database queries."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "Entity Framework Core",
    "question": "How do you perform eager loading of related entities in EF Core?",
    "answer": "Eager loading is achieved using the `Include` method on a query. For multiple levels of related entities, you can use `ThenInclude`."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "Entity Framework Core",
    "question": "What is the benefit of using `AsNoTracking()` in an EF Core query?",
    "options": [
      "It automatically saves changes to the database.",
      "It prevents EF Core from tracking the entities returned by the query, which can improve performance for read-only scenarios.",
      "It forces EF Core to use lazy loading.",
      "It includes related entities in the query."
    ],
    "correct_answer": "It prevents EF Core from tracking the entities returned by the query, which can improve performance for read-only scenarios.",
    "answer": "`AsNoTracking()` is used when you only need to read data and don't intend to modify the returned entities. It disables change tracking, which can reduce memory usage and improve query performance."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "Entity Framework Core",
    "question": "Explain the concept of Shadow Properties in EF Core.",
    "answer": "Shadow properties are properties that are not explicitly defined in your entity class but are part of the EF Core model. They are typically used for foreign keys or concurrency tokens and are managed by EF Core."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "Entity Framework Core",
    "question": "What is the purpose of the `SaveChanges()` method in EF Core?",
    "options": [
      "To execute a raw SQL query.",
      "To retrieve data from the database.",
      "To persist the changes made to tracked entities back to the database.",
      "To start a new transaction."
    ],
    "correct_answer": "To persist the changes made to tracked entities back to the database.",
    "answer": "The `SaveChanges()` method is called on the `DbContext` to save all the changes that have been tracked by EF Core (added, modified, or deleted entities) to the underlying database."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "Entity Framework Core",
    "question": "How do you handle relationships between entities in EF Core (e.g., one-to-many, many-to-many)?",
    "answer": "Relationships are configured using navigation properties in your entity classes and can be further customized using Data Annotations or the Fluent API. EF Core supports one-to-one, one-to-many, and many-to-many relationships."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "Entity Framework Core",
    "question": "What are Navigation Properties in EF Core?",
    "options": [
      "Properties that represent the primary key of an entity.",
      "Properties that hold the actual data of an entity.",
      "Properties that allow you to navigate between related entities.",
      "Properties that are used for database indexing."
    ],
    "correct_answer": "Properties that allow you to navigate between related entities.",
    "answer": "Navigation properties are reference properties in your entity classes that allow you to traverse relationships between entities. For example, an `Order` entity might have a navigation property to its related `Customer` entity."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "Entity Framework Core",
    "question": "Explain the concept of Foreign Keys in EF Core.",
    "answer": "Foreign keys are properties in one entity that refer to the primary key of another entity, establishing a link between the two tables in the database. In EF Core, foreign key properties can be explicitly defined or can be shadow properties managed by the framework."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "Entity Framework Core",
    "question": "What is the difference between `Single()`, `SingleOrDefault()`, `First()`, and `FirstOrDefault()` methods in LINQ to Entities?",
    "options": [
      "They all retrieve a single entity but handle multiple results differently.",
      "They differ in how they handle empty result sets and multiple results.",
      "They are used for different types of queries (e.g., aggregate vs. single entity).",
      "There is no significant difference between them."
    ],
    "correct_answer": "They differ in how they handle empty result sets and multiple results.",
    "answer": "`Single()` throws an exception if the sequence contains more than one element or no elements. `SingleOrDefault()` returns the single element or a default value if the sequence is empty, and throws an exception if there's more than one element. `First()` returns the first element or throws an exception if the sequence is empty. `FirstOrDefault()` returns the first element or a default value if the sequence is empty."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "Entity Framework Core",
    "question": "How do you execute raw SQL queries using EF Core?",
    "answer": "EF Core allows you to execute raw SQL queries using methods like `FromSqlRaw()` for queries that return entities and `Database.ExecuteSqlRaw()` or `Database.ExecuteSqlInterpolated()` for non-query operations."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "Entity Framework Core",
    "question": "What is the purpose of the `Include()` method when querying data with EF Core?",
    "options": [
      "To filter the results of the query.",
      "To sort the results of the query.",
      "To eagerly load related entities.",
      "To project the results into a different type."
    ],
    "correct_answer": "To eagerly load related entities.",
    "answer": "The `Include()` method is used to specify related entities that should be loaded along with the primary entity in a single database query."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "Entity Framework Core",
    "question": "Explain the concept of Change Tracking in EF Core.",
    "answer": "EF Core keeps track of the changes made to the entities that are retrieved from the database or newly created and attached to the `DbContext`. This change tracking mechanism allows EF Core to generate the appropriate SQL commands when `SaveChanges()` is called."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "Entity Framework Core",
    "question": "What is the role of the `[Key]` attribute in EF Core?",
    "options": [
      "To define a foreign key relationship.",
      "To specify that a property is required.",
      "To designate a property as the primary key of an entity.",
      "To set the maximum length of a string property."
    ],
    "correct_answer": "To designate a property as the primary key of an entity.",
    "answer": "The `[Key]` attribute is used to mark one or more properties of an entity as its primary key in the database table."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "Entity Framework Core",
    "question": "How do you configure a one-to-many relationship using Fluent API in EF Core?",
    "answer": "You can configure a one-to-many relationship using the Fluent API in the `OnModelCreating` method. You would typically use the `HasOne` and `WithMany` methods to define the relationship and specify the foreign key."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "Entity Framework Core",
    "question": "What is the purpose of the `DbContextOptions` class?",
    "options": [
      "To configure the connection to the database.",
      "To define the entity model.",
      "To manage migrations.",
      "To track changes to entities."
    ],
    "correct_answer": "To configure the connection to the database.",
    "answer": "`DbContextOptions` is used to configure the `DbContext`, such as specifying the database provider (e.g., SQL Server, SQLite) and the connection string."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "Entity Framework Core",
    "question": "Explain the concept of disconnected entities in EF Core.",
    "answer": "Disconnected entities are entity instances that are no longer being tracked by a `DbContext`. This typically happens when an entity is retrieved in one request, modified, and then you try to save the changes in a different request with a new `DbContext` instance. You need to explicitly attach or update such entities in the new context to persist the changes."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "Entity Framework Core",
    "question": "How do you handle concurrency in EF Core?",
    "options": [
      "By using transactions.",
      "By implementing optimistic or pessimistic concurrency control using properties like RowVersion or by using database-level locking mechanisms.",
      "By disabling change tracking.",
      "By always overwriting the existing data."
    ],
    "correct_answer": "By implementing optimistic or pessimistic concurrency control using properties like RowVersion or by using database-level locking mechanisms.",
    "answer": "EF Core supports optimistic concurrency control using a concurrency token (often a `RowVersion` property) that is checked when saving changes. If the token has been modified since the entity was loaded, an exception is thrown."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "Entity Framework Core",
    "question": "What is the purpose of the `[NotMapped]` attribute in EF Core?",
    "answer": "The `[NotMapped]` attribute is used to indicate that a property in your entity class should not be mapped to a column in the database table."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "Entity Framework Core",
    "question": "Which of the following is a common database provider for EF Core?",
    "options": [
      "Entity Framework 6",
      "NHibernate",
      "Dapper",
      "Microsoft.EntityFrameworkCore.SqlServer"
    ],
    "correct_answer": "Microsoft.EntityFrameworkCore.SqlServer",
    "answer": "`Microsoft.EntityFrameworkCore.SqlServer` is a common provider for using EF Core with Microsoft SQL Server databases. Other providers exist for different database systems like PostgreSQL, MySQL, SQLite, and more."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "Entity Framework Core",
    "question": "How can you improve the performance of EF Core queries?",
    "answer": "Performance can be improved by using techniques like eager loading for frequently accessed related data, using `AsNoTracking()` for read-only queries, filtering and projecting data on the server-side, avoiding unnecessary database round trips, and using efficient indexing in the database."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "Entity Framework Core",
    "question": "What is the purpose of the `DbContextPool` in ASP.NET Core?",
    "options": [
      "To manage database connections.",
      "To improve the performance of creating `DbContext` instances by reusing them across requests.",
      "To store cached query results.",
      "To handle database transactions."
    ],
    "correct_answer": "To improve the performance of creating `DbContext` instances by reusing them across requests.",
    "answer": "`DbContextPool` is a feature in ASP.NET Core that optimizes the creation of `DbContext` instances in scoped scenarios (like web requests) by reusing instances, reducing the overhead of creating a new context for each request."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "Entity Framework Core",
    "question": "Explain the concept of Migrations Bundles in EF Core.",
    "answer": "Migration Bundles allow you to package all your application's migrations into a single executable file. This can simplify the process of deploying database schema changes to different environments, especially those where the .NET SDK might not be readily available."
  },
  {
    "type": "mcq",
    "level": "advanced",
    "topic": "Entity Framework Core",
    "question": "What are Compiled Queries in EF Core and when would you use them?",
    "options": [
      "Queries that are executed on the client-side.",
      "Queries that are pre-compiled by EF Core to improve performance for frequently executed queries with the same shape.",
      "Queries that are written in raw SQL.",
      "Queries that are automatically generated by EF Core."
    ],
    "correct_answer": "Queries that are pre-compiled by EF Core to improve performance for frequently executed queries with the same shape.",
    "answer": "Compiled queries are LINQ queries that are compiled once and then reused, which can lead to performance improvements for frequently executed queries, especially those with complex logic."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Entity Framework Core",
    "question": "Discuss the different strategies for handling inheritance in EF Core.",
    "answer": "EF Core supports three main inheritance mapping strategies: Table-per-Hierarchy (TPH), Table-per-Type (TPT), and Table-per-Concrete-Type (TPC). Each strategy has its own trade-offs in terms of database schema design and query performance."
  },
  {
    "type": "mcq",
    "level": "advanced",
    "topic": "Entity Framework Core",
    "question": "What is the role of Interceptors in EF Core?",
    "options": [
      "To intercept HTTP requests.",
      "To intercept database commands being executed by EF Core, allowing you to log, modify, or suppress them.",
      "To intercept user input in a web application.",
      "To intercept exceptions thrown by the application."
    ],
    "correct_answer": "To intercept database commands being executed by EF Core, allowing you to log, modify, or suppress them.",
    "answer": "Interceptors in EF Core provide a way to hook into the pipeline of database operations, allowing you to perform actions like logging SQL queries, modifying command text, or handling connection events."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Entity Framework Core",
    "question": "Explain the concept of Split Queries in EF Core and when they might be beneficial.",
    "answer": "Split queries allow EF Core to generate multiple separate SQL queries to retrieve related data for a given entity, instead of using a single large JOIN query. This can be beneficial in scenarios where the JOIN operation would result in a large amount of redundant data being transferred."
  },
  {
    "type": "mcq",
    "level": "advanced",
    "topic": "Entity Framework Core",
    "question": "What are Owned Entity Types in EF Core?",
    "options": [
      "Entities that cannot exist without a parent entity and are conceptually part of it.",
      "Entities that own the database context.",
      "Entities that are only used for read-only operations.",
      "Entities that are automatically created by EF Core."
    ],
    "correct_answer": "Entities that cannot exist without a parent entity and are conceptually part of it.",
    "answer": "Owned entity types are entities that are conceptually part of another entity (the owner). They are stored in the same table as the owner by default and do not have their own identity separate from the owner."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Entity Framework Core",
    "question": "Discuss the trade-offs between using raw SQL queries and LINQ to Entities with EF Core.",
    "answer": "Raw SQL queries offer more control and can sometimes be more efficient for complex scenarios or database-specific features. However, they are less type-safe and can be harder to maintain. LINQ to Entities provides type safety, better abstraction, and is generally easier to write and understand for common data access tasks, but it might not always translate to the most optimal SQL."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "LINQ",
    "question": "What is LINQ (Language Integrated Query)?",
    "answer": "LINQ (Language Integrated Query) is a set of features introduced in .NET that provides a unified way to query data from various sources, such as collections, databases, XML, and more, directly within C# code."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "LINQ",
    "question": "Which namespace is essential for using LINQ in C#?",
    "options": [
      "System.IO",
      "System.Net",
      "System.Linq",
      "System.Collections.Generic"
    ],
    "correct_answer": "System.Linq",
    "answer": "The `System.Linq` namespace contains the extension methods and operators that enable LINQ queries."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "LINQ",
    "question": "What are the two main syntaxes for writing LINQ queries in C#?",
    "answer": "The two main syntaxes for writing LINQ queries in C# are Query Syntax (similar to SQL) and Method Syntax (using lambda expressions and extension methods)."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "LINQ",
    "question": "Which of the following is an example of LINQ Query Syntax?",
    "options": [
      "numbers.Where(n => n > 5);",
      "from n in numbers where n > 5 select n;",
      "numbers.Select(n => n * 2);",
      "numbers.OrderBy(n => n);"
    ],
    "correct_answer": "from n in numbers where n > 5 select n;",
    "answer": "The `from ... in ... where ... select ...` structure is characteristic of LINQ Query Syntax."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "LINQ",
    "question": "Which of the following is an example of LINQ Method Syntax?",
    "options": [
      "from n in numbers orderby n select n;",
      "numbers.Where(n => n % 2 == 0).ToList();",
      "from n in numbers group n by n % 2;",
      "select n from numbers where n < 10;"
    ],
    "correct_answer": "numbers.Where(n => n % 2 == 0).ToList();",
    "answer": "Method Syntax uses extension methods like `Where`, `Select`, `OrderBy`, etc., often combined with lambda expressions."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "LINQ",
    "question": "What is a lambda expression in C# and how is it used in LINQ?",
    "options": [
      "A way to define anonymous methods or delegates.",
      "A type of loop used for iterating over collections.",
      "A keyword for declaring variables.",
      "A mechanism for handling exceptions."
    ],
    "correct_answer": "A way to define anonymous methods or delegates.",
    "answer": "A lambda expression is a concise way to define anonymous methods or delegates. In LINQ, they are often used as arguments to extension methods like `Where`, `Select`, and `OrderBy` to specify the filtering, transformation, or sorting logic."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "LINQ",
    "question": "Explain the purpose of the `Where()` LINQ extension method.",
    "answer": "The `Where()` extension method is used to filter a sequence of elements based on a specified predicate (a condition expressed as a lambda expression or a delegate). It returns a new sequence containing only the elements that satisfy the condition."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "LINQ",
    "question": "What does the `Select()` LINQ extension method do?",
    "options": [
      "Filters a sequence based on a condition.",
      "Sorts the elements of a sequence.",
      "Projects each element of a sequence into a new form.",
      "Groups the elements of a sequence."
    ],
    "correct_answer": "Projects each element of a sequence into a new form.",
    "answer": "The `Select()` extension method transforms each element in a sequence into a new form. You can use it to select specific properties of objects or to perform operations on each element."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "LINQ",
    "question": "What is the purpose of the `OrderBy()` and `OrderByDescending()` LINQ extension methods?",
    "answer": "`OrderBy()` is used to sort the elements of a sequence in ascending order based on a specified key selector. `OrderByDescending()` does the same but sorts the elements in descending order."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "LINQ",
    "question": "Which LINQ method is used to retrieve the first element of a sequence?",
    "options": [
      "Single()",
      "Last()",
      "First()",
      "ElementAt(0)"
    ],
    "correct_answer": "First()",
    "answer": "The `First()` method returns the first element of a sequence. It throws an exception if the sequence is empty."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "LINQ",
    "question": "What is the difference between `First()` and `FirstOrDefault()` in LINQ?",
    "answer": "`First()` returns the first element of a sequence and throws an exception if the sequence is empty. `FirstOrDefault()` also returns the first element but returns a default value (e.g., null for reference types, 0 for numeric types) if the sequence is empty."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "LINQ",
    "question": "Which LINQ method is used to retrieve the last element of a sequence?",
    "options": [
      "First()",
      "Single()",
      "Last()",
      "ElementAt(sequence.Count - 1)"
    ],
    "correct_answer": "Last()",
    "answer": "The `Last()` method returns the last element of a sequence. It throws an exception if the sequence is empty."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "LINQ",
    "question": "What is the difference between `Last()` and `LastOrDefault()` in LINQ?",
    "answer": "`Last()` returns the last element of a sequence and throws an exception if the sequence is empty. `LastOrDefault()` also returns the last element but returns a default value if the sequence is empty."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "LINQ",
    "question": "Which LINQ method is used to retrieve a single specific element from a sequence?",
    "options": [
      "First()",
      "Last()",
      "Single()",
      "ElementAt()"
    ],
    "correct_answer": "Single()",
    "answer": "The `Single()` method returns the only element of a sequence. It throws an exception if the sequence is empty or contains more than one element."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "LINQ",
    "question": "What is the difference between `Single()` and `SingleOrDefault()` in LINQ?",
    "answer": "`Single()` returns the only element of a sequence and throws an exception if the sequence is empty or contains more than one element. `SingleOrDefault()` returns the single element or a default value if the sequence is empty, and throws an exception if the sequence contains more than one element."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "LINQ",
    "question": "Which LINQ method is used to skip a specified number of elements from the beginning of a sequence?",
    "options": [
      "Take()",
      "Skip()",
      "TakeWhile()",
      "SkipWhile()"
    ],
    "correct_answer": "Skip()",
    "answer": "The `Skip()` method bypasses a specified number of elements in a sequence and then returns the remaining elements."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "LINQ",
    "question": "What is the purpose of the `Take()` LINQ extension method?",
    "answer": "The `Take()` method returns a specified number of contiguous elements from the beginning of a sequence."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "LINQ",
    "question": "Which LINQ method returns elements from a sequence as long as a specified condition is true?",
    "options": [
      "Take()",
      "Skip()",
      "TakeWhile()",
      "SkipWhile()"
    ],
    "correct_answer": "TakeWhile()",
    "answer": "The `TakeWhile()` method returns elements from the beginning of a sequence as long as the specified predicate is true."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "LINQ",
    "question": "What is the purpose of the `SkipWhile()` LINQ extension method?",
    "answer": "The `SkipWhile()` method bypasses elements in a sequence as long as a specified condition is true and then returns the remaining elements."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "LINQ",
    "question": "Which LINQ method is used to group the elements of a sequence according to a specified key selector function?",
    "options": [
      "Where()",
      "Select()",
      "GroupBy()",
      "OrderBy()"
    ],
    "correct_answer": "GroupBy()",
    "answer": "The `GroupBy()` method groups the elements of a sequence based on a specified key selector function and returns a sequence of `IGrouping<TKey, TElement>` objects."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "LINQ",
    "question": "What is an `IGrouping<TKey, TElement>` in LINQ?",
    "answer": "`IGrouping<TKey, TElement>` represents a collection of objects that have the same key. It is typically the result of a `GroupBy()` operation and provides access to the key and the collection of elements with that key."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "LINQ",
    "question": "Which LINQ method is used to join two sequences based on a common key?",
    "options": [
      "Where()",
      "Select()",
      "Join()",
      "Concat()"
    ],
    "correct_answer": "Join()",
    "answer": "The `Join()` method correlates the elements of two sequences based on matching keys and returns a sequence of result elements."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "LINQ",
    "question": "Explain how the `Join()` method works in LINQ.",
    "answer": "The `Join()` method takes four parameters: the inner sequence, the outer key selector, the inner key selector, and a result selector function. It compares the keys extracted from each sequence using the key selectors and, for each pair of matching keys, it invokes the result selector to produce a result element."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "LINQ",
    "question": "Which LINQ method is used to combine two sequences into one?",
    "options": [
      "Join()",
      "GroupJoin()",
      "Concat()",
      "Zip()"
    ],
    "correct_answer": "Concat()",
    "answer": "The `Concat()` method appends one sequence to the end of another. It does not perform any merging or matching of elements."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "LINQ",
    "question": "What is the purpose of the `Zip()` LINQ extension method?",
    "answer": "The `Zip()` method merges two sequences based on their element positions. It returns a sequence of a specified result type that is produced by applying a specified function to the corresponding elements of the two input sequences."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "LINQ",
    "question": "Which LINQ method checks if all elements in a sequence satisfy a condition?",
    "options": [
      "Any()",
      "All()",
      "Contains()",
      "SequenceEqual()"
    ],
    "correct_answer": "All()",
    "answer": "The `All()` method determines whether all elements of a sequence satisfy a specified condition."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "LINQ",
    "question": "What is the purpose of the `Any()` LINQ extension method?",
    "answer": "The `Any()` method checks if any element in a sequence satisfies a condition or if the sequence itself is not empty."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "LINQ",
    "question": "Which LINQ method checks if a sequence contains a specified element?",
    "options": [
      "Any()",
      "All()",
      "Contains()",
      "SequenceEqual()"
    ],
    "correct_answer": "Contains()",
    "answer": "The `Contains()` method checks whether a sequence contains a specified element. You can optionally use a custom equality comparer."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "LINQ",
    "question": "What does the `SequenceEqual()` LINQ extension method do?",
    "answer": "The `SequenceEqual()` method determines whether two sequences are equal by comparing the elements by using the default equality comparer for their type."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "LINQ",
    "question": "Which LINQ method is used to get the number of elements in a sequence?",
    "options": [
      "Length()",
      "Size()",
      "Count()",
      "Elements()"
    ],
    "correct_answer": "Count()",
    "answer": "The `Count()` method returns the number of elements in a sequence."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "LINQ",
    "question": "What are the aggregate methods in LINQ? Give some examples.",
    "answer": "Aggregate methods in LINQ perform calculations on a sequence of values. Examples include `Count()`, `Sum()`, `Min()`, `Max()`, `Average()`, and `Aggregate()`."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "LINQ",
    "question": "Which LINQ method calculates the sum of the numeric elements in a sequence?",
    "options": [
      "Count()",
      "Average()",
      "Sum()",
      "Aggregate()"
    ],
    "correct_answer": "Sum()",
    "answer": "The `Sum()` method calculates the sum of the numeric elements in a sequence."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "LINQ",
    "question": "What is the purpose of the `Min()` and `Max()` LINQ extension methods?",
    "answer": "`Min()` returns the minimum value in a sequence of numeric values or the minimum element based on a specified comparer. `Max()` does the same for the maximum value or element."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "LINQ",
    "question": "Which LINQ method calculates the average of the numeric elements in a sequence?",
    "options": [
      "Sum()",
      "Min()",
      "Max()",
      "Average()"
    ],
    "correct_answer": "Average()",
    "answer": "The `Average()` method computes the average of a sequence of numeric values."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "LINQ",
    "question": "What is the `Aggregate()` method in LINQ?",
    "answer": "The `Aggregate()` method applies an accumulator function over a sequence. You can specify an initial accumulator value and a function to update the accumulator for each element in the sequence."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "LINQ",
    "question": "Which LINQ method removes duplicate elements from a sequence?",
    "options": [
      "Where()",
      "Select()",
      "Distinct()",
      "GroupBy()"
    ],
    "correct_answer": "Distinct()",
    "answer": "The `Distinct()` method returns a new sequence containing only the unique elements from the original sequence."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "LINQ",
    "question": "What is the purpose of the `Reverse()` LINQ extension method?",
    "answer": "The `Reverse()` method inverts the order of the elements in a sequence."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "LINQ",
    "question": "Which LINQ method projects each element of a sequence to an `IEnumerable<T>` and flattens the resulting sequences into one sequence?",
    "options": [
      "Select()",
      "Where()",
      "SelectMany()",
      "Join()"
    ],
    "correct_answer": "SelectMany()",
    "answer": "The `SelectMany()` method is used to project each element of a sequence to an `IEnumerable<T>` and then flatten the resulting sequences into one sequence."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "LINQ",
    "question": "What is the difference between `IEnumerable<T>` and `IQueryable<T>` in LINQ?",
    "answer": "`IEnumerable<T>` represents a sequence of objects in memory. LINQ operations on `IEnumerable<T>` are executed in-memory. `IQueryable<T>` represents a query that can be translated and executed by a data source (like a database). LINQ operations on `IQueryable<T>` are typically translated into a query language (like SQL) and executed at the data source."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "LINQ",
    "question": "When working with Entity Framework Core, which interface should you typically use for querying the database?",
    "options": [
      "IEnumerable<T>",
      "IList<T>",
      "ICollection<T>",
      "IQueryable<T>"
    ],
    "correct_answer": "IQueryable<T>",
    "answer": "When querying databases with EF Core, you should typically work with `IQueryable<T>` to ensure that the LINQ queries are translated into efficient database queries and executed at the database level."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "LINQ",
    "question": "What are deferred execution and immediate execution in LINQ?",
    "answer": "Deferred execution means that a LINQ query is not executed when it is defined but rather when its results are iterated over (e.g., using a `foreach` loop or by calling methods like `ToList()` or `ToArray()`). Immediate execution means that the query is executed as soon as it is defined, and the result is stored in memory."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "LINQ",
    "question": "Which of the following LINQ methods will cause immediate execution?",
    "options": [
      "Where()",
      "Select()",
      "OrderBy()",
      "ToList()"
    ],
    "correct_answer": "ToList()",
    "answer": "Methods like `ToList()`, `ToArray()`, `ToDictionary()`, `Count()`, `Sum()`, etc., force the immediate execution of a LINQ query."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "LINQ",
    "question": "How can you improve the performance of LINQ queries?",
    "answer": "Performance can be improved by being mindful of deferred vs. immediate execution, filtering data as early as possible, selecting only the necessary data, using appropriate data structures, and for database queries, ensuring proper indexing and understanding how LINQ translates to database queries."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "LINQ",
    "question": "What is the purpose of the `ToDictionary()` LINQ extension method?",
    "options": [
      "To convert a sequence to a list.",
      "To convert a sequence to an array.",
      "To convert a sequence to a dictionary based on specified key and element selectors.",
      "To convert a sequence to a string."
    ],
    "correct_answer": "To convert a sequence to a dictionary based on specified key and element selectors.",
    "answer": "The `ToDictionary()` method converts a sequence to a `Dictionary<TKey, TValue>` according to specified key-selector and element-selector functions."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "LINQ",
    "question": "Explain how to use LINQ with XML (LINQ to XML).",
    "answer": "LINQ to XML provides classes and extension methods in the `System.Xml.Linq` namespace that allow you to query and manipulate XML documents using LINQ syntax. You can load XML from files or strings and then use LINQ operators to filter, transform, and retrieve data."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "LINQ",
    "question": "Which namespace is primarily used for LINQ to XML?",
    "options": [
      "System.Linq",
      "System.Xml",
      "System.Xml.Linq",
      "System.Data.Linq"
    ],
    "correct_answer": "System.Xml.Linq",
    "answer": "The `System.Xml.Linq` namespace contains the classes like `XDocument`, `XElement`, and extension methods for querying XML using LINQ."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "LINQ",
    "question": "How can you use LINQ with data from ADO.NET DataSets (LINQ to DataSet)?",
    "answer": "LINQ to DataSet allows you to query and manipulate data stored in ADO.NET `DataSet` and `DataTable` objects using LINQ syntax. You typically use the `AsEnumerable()` method to convert a `DataTable` to an `IEnumerable<DataRow>` and then apply LINQ operators."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "LINQ",
    "question": "What is the purpose of the `OfType<TResult>()` LINQ extension method?",
    "options": [
      "To sort elements by their type.",
      "To filter elements based on their type.",
      "To convert elements to a specific type.",
      "To group elements by their type."
    ],
    "correct_answer": "To filter elements based on their type.",
    "answer": "The `OfType<TResult>()` method filters the elements of an `IEnumerable` based on their ability to be cast to a specified type."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "LINQ",
    "question": "Explain the concept of Projection in LINQ.",
    "answer": "Projection in LINQ refers to the process of transforming the elements of a sequence into a new form. The `Select()` method is the primary operator used for projection, allowing you to choose which properties to include or to create new anonymous or named types based on the original elements."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "LINQ",
    "question": "What is an anonymous type in C# and how is it often used with LINQ?",
    "options": [
      "A type without a name that is defined using the `class` keyword.",
      "A type that can only hold null values.",
      "A type without a name that is inferred by the compiler based on the properties initialized in an object initializer.",
      "A type that is defined in an external assembly."
    ],
    "correct_answer": "A type without a name that is inferred by the compiler based on the properties initialized in an object initializer.",
    "answer": "Anonymous types are often used in LINQ `select` clauses to create temporary data structures with specific properties without explicitly defining a class."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "LINQ",
    "question": "How can you perform a left outer join in LINQ?",
    "answer": "A left outer join in LINQ can be achieved using the `GroupJoin()` method followed by a `SelectMany()` to flatten the results. You provide a default value for the inner sequence if no matching elements are found."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "LINQ",
    "question": "Which LINQ method returns the element at a specified index in a sequence?",
    "options": [
      "First()",
      "Last()",
      "ElementAt()",
      "Single()"
    ],
    "correct_answer": "ElementAt()",
    "answer": "The `ElementAt()` method returns the element at a specified zero-based index in a sequence. It throws an `ArgumentOutOfRangeException` if the index is out of range."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "LINQ",
    "question": "What is the difference between `ElementAt()` and `ElementAtOrDefault()` in LINQ?",
    "answer": "`ElementAt()` returns the element at a specified index and throws an exception if the index is out of range. `ElementAtOrDefault()` returns the element at a specified index or a default value if the index is outside the bounds of the sequence."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "Dependency Injection",
    "question": "What is Dependency Injection (DI)?",
    "answer": "Dependency Injection is a design pattern in which an object receives other objects that it depends on (its dependencies) from an external source rather than creating them itself. This promotes loose coupling and makes code more testable and maintainable."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "Dependency Injection",
    "question": "What are the main benefits of using Dependency Injection?",
    "options": [
      "Increased code complexity, reduced testability, tighter coupling.",
      "Loose coupling, increased testability, improved maintainability, better code reusability.",
      "Faster execution speed, smaller application size.",
      "Only beneficial for very large applications."
    ],
    "correct_answer": "Loose coupling, increased testability, improved maintainability, better code reusability.",
    "answer": "Dependency Injection helps to decouple components, making them easier to test, understand, and modify independently. It also promotes code reusability."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "Dependency Injection",
    "question": "Explain the difference between Dependency Injection and the Service Locator pattern.",
    "answer": "In Dependency Injection, dependencies are passed into an object, making the dependencies explicit. In the Service Locator pattern, an object asks a central registry (the service locator) for its dependencies. DI is generally preferred as it promotes better testability and makes dependencies more visible."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "Dependency Injection",
    "question": "What are the three main types of Dependency Injection?",
    "options": [
      "Constructor Injection, Property Injection, Method Injection.",
      "Class Injection, Interface Injection, Object Injection.",
      "Static Injection, Dynamic Injection, Runtime Injection.",
      "Field Injection, Setter Injection, Parameter Injection."
    ],
    "correct_answer": "Constructor Injection, Property Injection, Method Injection.",
    "answer": "The three common types of Dependency Injection are Constructor Injection (dependencies are provided through the constructor), Property Injection (dependencies are set via public properties), and Method Injection (dependencies are provided as parameters to a specific method)."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "Dependency Injection",
    "question": "Which type of Dependency Injection is generally recommended and why?",
    "answer": "Constructor Injection is generally the recommended type of Dependency Injection because it makes dependencies explicit, ensures that required dependencies are available when the object is created, and facilitates testing."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "Dependency Injection",
    "question": "What is an IoC container (Inversion of Control container)?",
    "options": [
      "A database used to store application settings.",
      "A tool for managing network connections.",
      "A framework that manages the creation and lifetime of objects and injects dependencies into them.",
      "A code editor with advanced features."
    ],
    "correct_answer": "A framework that manages the creation and lifetime of objects and injects dependencies into them.",
    "answer": "An IoC container (also known as a DI container) is a framework that automates the process of dependency injection. It is responsible for creating instances of classes and injecting the necessary dependencies."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "Dependency Injection",
    "question": "How does the built-in Dependency Injection container in ASP.NET Core work?",
    "answer": "ASP.NET Core provides a built-in IoC container that is configured in the `ConfigureServices` method of the `Startup.cs` file. You register services (dependencies) with the container, specifying their lifetime (e.g., Singleton, Scoped, Transient). When an instance of a class needs a registered service, the container automatically resolves and injects it."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "Dependency Injection",
    "question": "What are the three main service lifetimes supported by the built-in DI container in ASP.NET Core?",
    "options": [
      "Global, Local, Temporary.",
      "Permanent, Request-based, Short-lived.",
      "Singleton, Scoped, Transient.",
      "Application, Session, Operation."
    ],
    "correct_answer": "Singleton, Scoped, Transient.",
    "answer": "The three main service lifetimes in ASP.NET Core DI are Singleton (one instance per application), Scoped (one instance per request), and Transient (a new instance every time it's requested)."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "Dependency Injection",
    "question": "Explain the Singleton service lifetime in ASP.NET Core DI.",
    "answer": "A service registered with the Singleton lifetime is created once for the entire application lifetime. All subsequent requests for this service will receive the same instance."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "Dependency Injection",
    "question": "What is the Scoped service lifetime in ASP.NET Core DI typically used for?",
    "options": [
      "For services that should be shared across the entire application.",
      "For services that should be created every time they are requested.",
      "For services that should be unique per HTTP request.",
      "For services that are only used within a specific method."
    ],
    "correct_answer": "For services that should be unique per HTTP request.",
    "answer": "Scoped services are created once per client request (or scope). In ASP.NET Core, this usually means one instance is created for each HTTP request."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "Dependency Injection",
    "question": "Explain the Transient service lifetime in ASP.NET Core DI.",
    "answer": "A service registered with the Transient lifetime is created every time it is requested from the service container. This is useful for lightweight, stateless services."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "Dependency Injection",
    "question": "How do you register a service with the built-in DI container in ASP.NET Core?",
    "options": [
      "By creating an instance of the service directly in the `Startup.cs` file.",
      "By using methods like `services.AddSingleton()`, `services.AddScoped()`, or `services.AddTransient()` in the `ConfigureServices` method.",
      "By adding attributes to the service class.",
      "By configuring a separate XML file."
    ],
    "correct_answer": "By using methods like `services.AddSingleton()`, `services.AddScoped()`, or `services.AddTransient()` in the `ConfigureServices` method.",
    "answer": "Services are registered in the `ConfigureServices` method of the `Startup.cs` file using the `IServiceCollection` instance and its extension methods like `AddSingleton`, `AddScoped`, and `AddTransient`."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "Dependency Injection",
    "question": "What is the difference between registering a service by its concrete type versus registering it by an interface?",
    "answer": "Registering by interface allows for more flexibility and easier swapping of implementations. When a consumer depends on an interface, you can register different concrete implementations without modifying the consumer. Registering by concrete type directly creates an instance of that specific type."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "Dependency Injection",
    "question": "How do you resolve (get an instance of) a registered service in ASP.NET Core?",
    "options": [
      "By calling a static method on the service class.",
      "By using the `new` keyword to create an instance.",
      "By having the service injected into the constructor of a class that needs it.",
      "By looking it up in a global registry."
    ],
    "correct_answer": "By having the service injected into the constructor of a class that needs it.",
    "answer": "The primary way to resolve services in ASP.NET Core is through constructor injection. The DI container automatically provides instances of registered dependencies to the constructor of classes that require them."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "Dependency Injection",
    "question": "Can you inject services into properties or methods in ASP.NET Core?",
    "answer": "Yes, while constructor injection is preferred, ASP.NET Core also supports Property Injection (using the `[FromServices]` attribute) and Method Injection (dependencies as parameters to action methods in controllers or handlers in Razor Pages)."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "Dependency Injection",
    "question": "What is the purpose of the `[FromServices]` attribute in ASP.NET Core?",
    "options": [
      "To register a service with the DI container.",
      "To specify the lifetime of a service.",
      "To indicate that a property or parameter should have its value injected by the DI container.",
      "To define a route for a controller action."
    ],
    "correct_answer": "To indicate that a property or parameter should have its value injected by the DI container.",
    "answer": "The `[FromServices]` attribute can be used on properties or parameters to request that the DI container inject the corresponding service."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "Dependency Injection",
    "question": "How do you inject configuration settings into a service using Dependency Injection in ASP.NET Core?",
    "answer": "Configuration settings can be injected into services using the `IOptions<T>` interface. You first bind the configuration section to a class `T` in `ConfigureServices`, and then you can inject `IOptions<T>` into your service's constructor to access the configuration values."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "Dependency Injection",
    "question": "What is the role of the `IOptions<T>` interface in ASP.NET Core DI?",
    "options": [
      "To register configuration settings with the DI container.",
      "To access strongly-typed configuration settings that have been bound to a class.",
      "To define custom service lifetimes.",
      "To handle exceptions during service resolution."
    ],
    "correct_answer": "To access strongly-typed configuration settings that have been bound to a class.",
    "answer": "The `IOptions<T>` interface provides a way to access configuration settings in a strongly-typed manner after they have been bound to a class using the configuration system."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "Dependency Injection",
    "question": "Can you inject multiple implementations of the same interface? If so, how?",
    "answer": "Yes, you can register multiple implementations of the same interface. You can then inject an `IEnumerable<IService>` (where `IService` is the interface) to get all registered implementations. You can also use named services or keyed services in some IoC containers for more specific resolution."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "Dependency Injection",
    "question": "What is meant by the 'composition root' in the context of Dependency Injection?",
    "options": [
      "The main method of the application.",
      "The part of the application where all the dependencies are registered and wired up.",
      "The root directory of the project.",
      "The base class of all controllers."
    ],
    "correct_answer": "The part of the application where all the dependencies are registered and wired up.",
    "answer": "The composition root is the entry point of an application where the object graph is constructed and dependencies are configured. In ASP.NET Core, the `Startup.cs` file (specifically the `ConfigureServices` method) acts as the composition root."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "Dependency Injection",
    "question": "What are some common third-party IoC containers that can be used with .NET?",
    "answer": "Some common third-party IoC containers for .NET include Autofac, StructureMap (now Lamar), Ninject, and Unity."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "Dependency Injection",
    "question": "When might you consider using a third-party IoC container over the built-in one in ASP.NET Core?",
    "options": [
      "When the built-in container is not available.",
      "When you need more advanced features or customization options that are not provided by the built-in container.",
      "When you want to make your application more complex.",
      "There is no reason to use a third-party container."
    ],
    "correct_answer": "When you need more advanced features or customization options that are not provided by the built-in container.",
    "answer": "Third-party IoC containers often offer more advanced features like interception, complex registration scenarios, and more control over the object lifecycle."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "Dependency Injection",
    "question": "Explain the concept of 'dependency inversion' which is a principle behind Dependency Injection.",
    "answer": "The Dependency Inversion Principle (DIP) states that high-level modules should not depend on low-level modules. Both should depend on abstractions. Also, abstractions should not depend on details. Details should depend on abstractions. DI is a way to implement this principle."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "Dependency Injection",
    "question": "What is a 'dependency'? Give an example.",
    "options": [
      "A class that is not used by any other class.",
      "A method within a class.",
      "An object that another object needs to function correctly.",
      "A configuration setting for the application."
    ],
    "correct_answer": "An object that another object needs to function correctly.",
    "answer": "A dependency is an object that another object (the client) relies on. For example, if a `UserService` class needs to access a database, it might have a dependency on a `UserRepository` class."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "Dependency Injection",
    "question": "How does Dependency Injection improve the testability of your code?",
    "answer": "By using DI, you can easily replace real dependencies with mock or stub implementations during testing. This allows you to isolate the component being tested and verify its behavior without relying on the actual dependencies."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "Dependency Injection",
    "question": "What is the 'control' that is being inverted in Inversion of Control?",
    "options": [
      "The control over the flow of execution.",
      "The control over the creation and management of dependencies.",
      "The control over user input.",
      "The control over database access."
    ],
    "correct_answer": "The control over the creation and management of dependencies.",
    "answer": "In Inversion of Control, the control over how dependencies are created and managed is inverted. Instead of a class creating its own dependencies, these dependencies are provided from an external source (the IoC container)."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "Dependency Injection",
    "question": "Explain the potential drawbacks or challenges of using Dependency Injection.",
    "answer": "While DI offers many benefits, it can sometimes increase the initial complexity of the codebase, especially for developers new to the pattern. Over-reliance on DI without clear understanding can also lead to a proliferation of interfaces and abstractions."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "Dependency Injection",
    "question": "In the context of ASP.NET Core, where is the built-in DI container typically configured?",
    "options": [
      "In the `Program.cs` file.",
      "In the `appsettings.json` file.",
      "In the `Startup.cs` file, specifically within the `ConfigureServices` method.",
      "In the `HomeController.cs` file."
    ],
    "correct_answer": "In the `Startup.cs` file, specifically within the `ConfigureServices` method.",
    "answer": "The built-in DI container in ASP.NET Core is configured within the `ConfigureServices` method of the `Startup.cs` file."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "Dependency Injection",
    "question": "How can you register an existing instance of an object as a service in the ASP.NET Core DI container?",
    "answer": "You can register an existing instance using the `AddSingleton` method that takes an instance directly as an argument (e.g., `services.AddSingleton<IMyService>(new MyService());`)."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "Dependency Injection",
    "question": "What happens if you try to resolve a service that has not been registered with the DI container?",
    "options": [
      "The application will crash.",
      "The DI container will return a default instance.",
      "The DI container will throw an exception.",
      "The DI container will try to create an instance using reflection."
    ],
    "correct_answer": "The DI container will throw an exception.",
    "answer": "If you try to resolve a service that hasn't been registered, the DI container will typically throw an exception indicating that the service could not be found."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "Dependency Injection",
    "question": "Explain the concept of 'service providers' in the context of .NET DI.",
    "answer": "A service provider is an implementation of the `IServiceProvider` interface, which provides a mechanism to retrieve service objects from the container. The built-in DI container in ASP.NET Core creates a service provider that manages the registered services."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "Dependency Injection",
    "question": "Which interface is the foundation for dependency injection in .NET?",
    "options": [
      "IDisposable",
      "IEnumerable",
      "IServiceProvider",
      "IConfiguration"
    ],
    "correct_answer": "IServiceProvider",
    "answer": "The `IServiceProvider` interface is the core interface for retrieving services from a dependency injection container in .NET."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "Dependency Injection",
    "question": "How can you use Dependency Injection in classes that are not directly managed by the ASP.NET Core framework (e.g., in a console application or a class library)?",
    "answer": "You can create an instance of a service provider manually using a service collection. You would register your services with the collection and then build the service provider to resolve dependencies."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "Dependency Injection",
    "question": "What is the purpose of the `IServiceScope` in ASP.NET Core?",
    "options": [
      "To define the lifetime of singleton services.",
      "To create a new scope for resolving scoped services, typically per HTTP request.",
      "To register transient services.",
      "To manage configuration settings."
    ],
    "correct_answer": "To create a new scope for resolving scoped services, typically per HTTP request.",
    "answer": "An `IServiceScope` represents a lifetime for scoped services. When a new scope is created (e.g., at the beginning of an HTTP request), a new instance of any registered scoped services is created within that scope."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "Dependency Injection",
    "question": "How do you handle circular dependencies when using Dependency Injection?",
    "answer": "Circular dependencies (where two or more classes directly or indirectly depend on each other) can cause issues. It's generally recommended to refactor the code to break these cycles. If unavoidable, you might consider using Property Injection or Method Injection for one of the dependencies to break the constructor injection cycle, or using factories or delegates to resolve the dependency later."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "Unit Testing",
    "question": "What is Unit Testing?",
    "answer": "Unit testing is a software testing method by which individual units of source code\u2014the smallest testable parts of an application\u2014are put under test to determine whether they are fit for use. A unit is often a single function, method, procedure, module, or object."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "Unit Testing",
    "question": "What is the primary goal of unit testing?",
    "options": [
      "To test the entire application flow.",
      "To find integration issues between different modules.",
      "To verify that individual parts of the code work as expected.",
      "To measure the performance of the application."
    ],
    "correct_answer": "To verify that individual parts of the code work as expected.",
    "answer": "The primary goal of unit testing is to ensure that each unit of the software performs correctly."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "Unit Testing",
    "question": "What are the key characteristics of a good unit test?",
    "answer": "Good unit tests should be: Fast, Independent (should not rely on other tests), Repeatable (should produce the same result every time), Self-validating (should automatically determine if the test passed or failed), and Timely (should be written early in the development cycle)."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "Unit Testing",
    "question": "Which of the following is a popular unit testing framework for .NET?",
    "options": [
      "Selenium",
      "NUnit",
      "Postman",
      "SonarQube"
    ],
    "correct_answer": "NUnit",
    "answer": "NUnit is a widely used open-source unit testing framework for .NET. Other popular frameworks include xUnit.net and MSTest."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "Unit Testing",
    "question": "Explain the Arrange-Act-Assert (AAA) pattern in unit testing.",
    "answer": "The AAA pattern is a common structure for writing unit tests. Arrange: Set up the necessary preconditions and inputs for the test. Act: Perform the action being tested. Assert: Verify that the action behaves as expected by checking the output or the state of the system."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "Unit Testing",
    "question": "In the Arrange phase of a unit test, what is typically done?",
    "options": [
      "Executing the method being tested.",
      "Verifying the outcome of the test.",
      "Setting up the necessary objects and data for the test.",
      "Cleaning up resources after the test."
    ],
    "correct_answer": "Setting up the necessary objects and data for the test.",
    "answer": "The Arrange phase involves initializing the system under test and any dependencies it might have."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "Unit Testing",
    "question": "What happens in the Act phase of a unit test?",
    "answer": "The Act phase involves performing the specific action that you want to test, typically by calling a method on the class under test."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "Unit Testing",
    "question": "What is the purpose of the Assert phase in a unit test?",
    "options": [
      "To set up the test environment.",
      "To execute the code being tested.",
      "To verify that the actual result matches the expected result.",
      "To clean up resources used by the test."
    ],
    "correct_answer": "To verify that the actual result matches the expected result.",
    "answer": "The Assert phase is where you check if the outcome of the Act phase is what you expected. This is done using assertion methods provided by the unit testing framework."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "Unit Testing",
    "question": "What is a test fixture in the context of unit testing?",
    "answer": "A test fixture is the set of preconditions or the environment needed for the unit tests to run. This might include setting up objects, data, or external dependencies."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "Unit Testing",
    "question": "In NUnit, which attribute is used to mark a method as a test case?",
    "options": [
      "[TestMethod]",
      "[TestFixture]",
      "[Fact]",
      "[Test]"
    ],
    "correct_answer": "[Test]",
    "answer": "In NUnit, the `[Test]` attribute is used to identify a method as a unit test."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "Unit Testing",
    "question": "What is a test suite?",
    "answer": "A test suite is a collection of related test cases that are grouped together for execution. This helps in organizing tests by functionality or module."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "Unit Testing",
    "question": "What is a mocking framework and why is it used in unit testing?",
    "options": [
      "A framework for creating user interfaces.",
      "A framework for performing load testing.",
      "A framework for creating substitute objects (mocks) for dependencies to isolate the code being tested.",
      "A framework for managing database migrations."
    ],
    "correct_answer": "A framework for creating substitute objects (mocks) for dependencies to isolate the code being tested.",
    "answer": "A mocking framework helps create mock objects that simulate the behavior of real dependencies. This allows you to test a unit of code in isolation without relying on the actual implementation of its dependencies."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "Unit Testing",
    "question": "Name some popular mocking frameworks for .NET.",
    "answer": "Popular mocking frameworks for .NET include Moq, NSubstitute, FakeItEasy, and JustMock."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "Unit Testing",
    "question": "What is the difference between a mock and a stub in unit testing?",
    "options": [
      "Mocks are used for testing state, while stubs are used for testing behavior.",
      "Stubs provide controlled inputs to the system under test, while mocks also verify interactions with dependencies.",
      "Mocks are simpler to create than stubs.",
      "There is no significant difference between them."
    ],
    "correct_answer": "Stubs provide controlled inputs to the system under test, while mocks also verify interactions with dependencies.",
    "answer": "Stubs are objects that provide predefined responses to method calls, often used to set up test conditions. Mocks are more sophisticated and are used to verify that specific interactions occurred with the mocked dependency."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "Unit Testing",
    "question": "Explain the concept of test coverage.",
    "answer": "Test coverage is a metric that indicates the extent to which the source code of a program has been tested by a particular test suite. It's often expressed as a percentage of code that has been executed during testing."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "Unit Testing",
    "question": "What are some common types of test coverage?",
    "options": [
      "Integration coverage, system coverage, acceptance coverage.",
      "Black-box coverage, white-box coverage, gray-box coverage.",
      "Statement coverage, branch coverage, path coverage.",
      "Functional coverage, non-functional coverage, performance coverage."
    ],
    "correct_answer": "Statement coverage, branch coverage, path coverage.",
    "answer": "Common types of test coverage include statement coverage (percentage of statements executed), branch coverage (percentage of branches taken), and path coverage (percentage of execution paths covered)."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "Unit Testing",
    "question": "Why is it important to have good test coverage?",
    "answer": "Good test coverage helps to identify areas of the code that have not been adequately tested, reducing the risk of undetected bugs. However, high test coverage alone does not guarantee the absence of defects; the quality of the tests is also crucial."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "Unit Testing",
    "question": "What is the difference between unit tests and integration tests?",
    "options": [
      "Unit tests test the entire application, while integration tests test individual units.",
      "Unit tests are faster and more isolated than integration tests.",
      "Integration tests are written by developers, while unit tests are written by testers.",
      "There is no significant difference between them."
    ],
    "correct_answer": "Unit tests are faster and more isolated than integration tests.",
    "answer": "Unit tests focus on testing individual components in isolation, while integration tests verify the interactions between different parts of the system."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "Unit Testing",
    "question": "When should you write unit tests?",
    "answer": "Unit tests should ideally be written early and often in the development process. Test-Driven Development (TDD) advocates writing tests before writing the actual code. Writing tests early helps to clarify requirements and design."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "Unit Testing",
    "question": "What are the benefits of Test-Driven Development (TDD)?",
    "options": [
      "Faster development speed, less code written.",
      "Improved code design, better test coverage, reduced bugs.",
      "Lower project costs, fewer developers needed.",
      "Only beneficial for complex projects."
    ],
    "correct_answer": "Improved code design, better test coverage, reduced bugs.",
    "answer": "TDD helps to produce cleaner, more modular code, leads to better test coverage, and can reduce the number of bugs in the software."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "Unit Testing",
    "question": "Explain the red-green-refactor cycle in TDD.",
    "answer": "The red-green-refactor cycle involves: Red (write a failing test), Green (write the minimum code to make the test pass), Refactor (improve the code while ensuring all tests still pass)."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "Unit Testing",
    "question": "What is a 'test double'?",
    "options": [
      "A copy of the production environment used for testing.",
      "A generic term for any substitute for a real dependency in testing.",
      "A type of test that runs twice to ensure consistency.",
      "A tool for measuring code coverage."
    ],
    "correct_answer": "A generic term for any substitute for a real dependency in testing.",
    "answer": "A test double is a generic term used in testing for any kind of stand-in for a dependency. Mocks and stubs are types of test doubles."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "Unit Testing",
    "question": "How do you handle dependencies in your code to make it more unit testable?",
    "answer": "Using Dependency Injection is a key way to make code more unit testable. By injecting dependencies through constructors or properties, you can easily replace real dependencies with test doubles during unit testing."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "Unit Testing",
    "question": "In NUnit, which attribute is used to perform setup actions before all tests in a test fixture?",
    "options": [
      "[SetUp]",
      "[TestFixtureSetup]",
      "[OneTimeSetUp]",
      "[BeforeAll]"
    ],
    "correct_answer": "[OneTimeSetUp]",
    "answer": "In NUnit, the `[OneTimeSetUp]` attribute (or `[TestFixtureSetUp]` in older versions) is used to mark a method that should be executed once before any of the tests in the fixture are run."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "Unit Testing",
    "question": "What is the purpose of the `[SetUp]` attribute in NUnit?",
    "answer": "The `[SetUp]` attribute in NUnit is used to mark a method that should be executed before each test case within a test fixture. This is useful for resetting the state or preparing the environment for each individual test."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "Unit Testing",
    "question": "In NUnit, which attribute is used to perform cleanup actions after all tests in a test fixture?",
    "options": [
      "[TearDown]",
      "[TestFixtureTearDown]",
      "[OneTimeTearDown]",
      "[AfterAll]"
    ],
    "correct_answer": "[OneTimeTearDown]",
    "answer": "In NUnit, the `[OneTimeTearDown]` attribute (or `[TestFixtureTearDown]` in older versions) is used to mark a method that should be executed once after all the tests in the fixture have run."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "Unit Testing",
    "question": "What is the purpose of the `[TearDown]` attribute in NUnit?",
    "answer": "The `[TearDown]` attribute in NUnit is used to mark a method that should be executed after each test case within a test fixture. This is useful for cleaning up resources or resetting the state after each test."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "Unit Testing",
    "question": "What is the role of assertion methods in a unit testing framework?",
    "options": [
      "To set up the test environment.",
      "To execute the code being tested.",
      "To verify whether the actual outcome matches the expected outcome.",
      "To clean up resources after the test."
    ],
    "correct_answer": "To verify whether the actual outcome matches the expected outcome.",
    "answer": "Assertion methods are used to check conditions within a test. If an assertion fails, the test is considered to have failed."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "Unit Testing",
    "question": "Give some examples of common assertion methods in NUnit or xUnit.net.",
    "answer": "Common assertion methods include `Assert.AreEqual()`, `Assert.AreNotEqual()`, `Assert.IsTrue()`, `Assert.IsFalse()`, `Assert.IsNull()`, `Assert.IsNotNull()`, `Assert.Throws()`, and `Assert.That()` (with constraints in NUnit)."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "Unit Testing",
    "question": "What is the purpose of testing exception handling in your code?",
    "options": [
      "To make the tests run longer.",
      "To ensure that your code throws exceptions correctly under expected error conditions and handles them appropriately.",
      "To improve the performance of your application.",
      "To simplify the code logic."
    ],
    "correct_answer": "To ensure that your code throws exceptions correctly under expected error conditions and handles them appropriately.",
    "answer": "Testing exception handling ensures that your application behaves predictably and gracefully when errors occur."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "Unit Testing",
    "question": "How can you test that a specific exception is thrown in your .NET code using NUnit or xUnit.net?",
    "answer": "In NUnit, you can use `Assert.Throws<TException>(delegate)` or `Assert.ThrowsAsync<TException>(async delegate)`. In xUnit.net, you would use `Assert.Throws<TException>(Action)` or `await Assert.ThrowsAsync<TException>(Func<Task>)`."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "Unit Testing",
    "question": "What is the concept of 'boundary testing' in unit testing?",
    "options": [
      "Testing the user interface of the application.",
      "Testing the integration between different modules.",
      "Testing the behavior of the code at the edges of valid input ranges.",
      "Testing the performance of the application under high load."
    ],
    "correct_answer": "Testing the behavior of the code at the edges of valid input ranges.",
    "answer": "Boundary testing involves testing the code with input values that are at the limits of the valid range (e.g., minimum, maximum, just inside, just outside) to identify potential off-by-one errors or other boundary-related issues."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "Unit Testing",
    "question": "Why is it important to write unit tests for edge cases?",
    "answer": "Edge cases represent unusual or extreme conditions that might not be immediately obvious. Writing unit tests for these cases helps to ensure that the code handles these situations correctly and prevents unexpected behavior or crashes."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "Unit Testing",
    "question": "What is the purpose of using data-driven tests (parameterized tests)?",
    "options": [
      "To test different parts of the code with the same test method.",
      "To run the same test logic with multiple sets of input data.",
      "To improve the performance of the tests.",
      "To simplify the test setup process."
    ],
    "correct_answer": "To run the same test logic with multiple sets of input data.",
    "answer": "Data-driven tests allow you to execute the same test method multiple times with different input values and expected results, reducing code duplication and improving test coverage."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "Unit Testing",
    "question": "How can you implement data-driven tests in NUnit or xUnit.net?",
    "answer": "In NUnit, you can use the `[TestCase]` attribute to provide inline data or the `[TestCaseSource]` attribute to specify a method or property that provides the test data. In xUnit.net, you can use the `[Theory]` attribute along with `[InlineData]`, `[MemberData]`, or `[ClassData]`."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "Unit Testing",
    "question": "What is the concept of 'code smells' in relation to unit tests?",
    "options": [
      "Patterns in code that indicate a potential deeper problem.",
      "The smell of coffee in the office while developers are testing.",
      "Metrics used to measure the performance of unit tests.",
      "Specific naming conventions for test methods."
    ],
    "correct_answer": "Patterns in code that indicate a potential deeper problem.",
    "answer": "Code smells in unit tests are patterns that might indicate issues with the tests themselves or the code being tested. Examples include overly long tests, tests with too many assertions, tests that depend on external resources, or tests that are hard to understand."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "Unit Testing",
    "question": "Why is it important to keep your unit tests focused and test only one unit of behavior at a time?",
    "answer": "Focused unit tests are easier to understand, maintain, and debug. If a test fails, it's clearer which specific behavior is broken. Testing multiple behaviors in a single test can make it harder to pinpoint the cause of a failure."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "Unit Testing",
    "question": "What is the role of unit tests in a Continuous Integration/Continuous Deployment (CI/CD) pipeline?",
    "options": [
      "To deploy the application to production.",
      "To monitor the performance of the application in production.",
      "To automatically verify the correctness of code changes before they are integrated into the main codebase.",
      "To manually test the application before each release."
    ],
    "correct_answer": "To automatically verify the correctness of code changes before they are integrated into the main codebase.",
    "answer": "Unit tests are a crucial part of a CI/CD pipeline as they provide automated feedback on the quality of the code. Failing unit tests can prevent broken code from being integrated or deployed."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "Unit Testing",
    "question": "What are some challenges you might face when writing unit tests for legacy code?",
    "answer": "Legacy code often lacks clear separation of concerns and can have tight coupling, making it difficult to isolate units for testing. There might also be a lack of existing tests, making it harder to refactor or modify the code safely."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "Unit Testing",
    "question": "What is the purpose of a 'test runner'?",
    "options": [
      "To write unit tests.",
      "To execute unit tests and report the results.",
      "To create mock objects for unit tests.",
      "To measure code coverage of unit tests."
    ],
    "correct_answer": "To execute unit tests and report the results.",
    "answer": "A test runner is a tool that finds and executes the unit tests in your project and provides a report on which tests passed and which failed. Examples include the NUnit Test Runner, the xUnit.net runner in Visual Studio, and command-line runners."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "Unit Testing",
    "question": "How can you ensure that your unit tests are maintainable over time?",
    "answer": "Maintainable unit tests should be clear, concise, and focused. They should have descriptive names that indicate what they are testing. Avoid testing implementation details and instead focus on testing the observable behavior of the code. Regularly review and refactor your tests as the code changes."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "Asynchronous Programming",
    "question": "What is asynchronous programming?",
    "answer": "Asynchronous programming is a concurrency model that allows a program to perform multiple tasks without blocking the main execution thread. This enables the application to remain responsive while waiting for long-running operations to complete."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "Asynchronous Programming",
    "question": "What are the primary benefits of using asynchronous programming in .NET?",
    "options": [
      "Simplified error handling, reduced memory usage.",
      "Improved application responsiveness, enhanced scalability, better resource utilization.",
      "Faster overall execution time for all types of operations.",
      "Automatic parallel execution of all code."
    ],
    "correct_answer": "Improved application responsiveness, enhanced scalability, better resource utilization.",
    "answer": "Asynchronous programming is particularly beneficial for I/O-bound operations, preventing the application from freezing and allowing it to handle more requests concurrently."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "Asynchronous Programming",
    "question": "What are the `async` and `await` keywords in C# and how are they used?",
    "answer": "The `async` keyword is used to mark a method, lambda expression, or anonymous method as asynchronous. The `await` keyword is used within an `async` method to pause the execution of the method until the awaited task completes. The `await` operator returns the result of the task if it completes successfully."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "Asynchronous Programming",
    "question": "What type of return value is typically used for an `async` method in C# that performs an operation but does not return a value?",
    "options": [
      "void",
      "int",
      "string",
      "Task"
    ],
    "correct_answer": "Task",
    "answer": "An `async` method that does not return a value should typically return a `Task`. This represents the ongoing operation."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "Asynchronous Programming",
    "question": "What type of return value is typically used for an `async` method in C# that returns a value of type `T`?",
    "answer": "An `async` method that returns a value of type `T` should typically return a `Task<T>`. This represents the asynchronous operation that will eventually produce a result of type `T`."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "Asynchronous Programming",
    "question": "What happens when the `await` keyword is encountered in an `async` method?",
    "options": [
      "The program terminates immediately.",
      "The current thread blocks until the awaited task completes.",
      "The rest of the `async` method is scheduled to run when the awaited task finishes, and control returns to the caller.",
      "A new thread is created to execute the awaited task."
    ],
    "correct_answer": "The rest of the `async` method is scheduled to run when the awaited task finishes, and control returns to the caller.",
    "answer": "When `await` is encountered, the current method's execution is suspended, and control is returned to the caller. The rest of the method is resumed asynchronously when the awaited task completes."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "Asynchronous Programming",
    "question": "What is a `Task` in .NET asynchronous programming?",
    "answer": "A `Task` in .NET represents an asynchronous operation. It can represent an operation that is currently running, has completed, or has faulted. `Task<TResult>` represents an asynchronous operation that returns a result of type `TResult`."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "Asynchronous Programming",
    "question": "What is the difference between `Task.Wait()` and `await`?",
    "options": [
      "They both achieve the same result but `Task.Wait()` is preferred.",
      "`Task.Wait()` is asynchronous, while `await` is synchronous.",
      "`Task.Wait()` blocks the calling thread until the task completes, while `await` allows the calling thread to remain responsive.",
      "`await` can only be used in UI applications."
    ],
    "correct_answer": "`Task.Wait()` blocks the calling thread until the task completes, while `await` allows the calling thread to remain responsive.",
    "answer": "Using `Task.Wait()` in an `async` method can lead to deadlocks in UI applications or ASP.NET Core requests. `await` should be preferred as it allows the thread to return to the thread pool and remain responsive."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "Asynchronous Programming",
    "question": "What is the purpose of `Task.Run()`?",
    "answer": "`Task.Run()` is used to queue the specified work to the thread pool and returns a `Task` or `Task<TResult>` that represents that work. It's often used to perform CPU-bound operations asynchronously without blocking the main thread."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "Asynchronous Programming",
    "question": "When should you use `Task.Run()`?",
    "options": [
      "For all asynchronous operations.",
      "Only for I/O-bound operations.",
      "Primarily for CPU-bound operations to avoid blocking the main thread.",
      "When you need to execute code synchronously."
    ],
    "correct_answer": "Primarily for CPU-bound operations to avoid blocking the main thread.",
    "answer": "`Task.Run()` is most useful for offloading CPU-intensive work to a background thread to keep the UI or request processing thread responsive."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "Asynchronous Programming",
    "question": "What is the difference between `Task.FromResult()` and creating a new `Task` and setting its result?",
    "answer": "`Task.FromResult(value)` creates a task that is already in the `RanToCompletion` state with the specified result. It's a more efficient way to return a completed task with a known result than creating a new `Task` and manually setting its result."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "Asynchronous Programming",
    "question": "How do you handle exceptions in `async` methods?",
    "options": [
      "Using a `try-catch` block around the `async` method call.",
      "Exceptions in `async` methods are automatically handled by the framework.",
      "You must use `Task.ContinueWith` to handle exceptions.",
      "Exceptions are ignored in `async` methods."
    ],
    "correct_answer": "Using a `try-catch` block around the `await` call or within the `async` method.",
    "answer": "Exceptions in `async` methods are typically handled using standard `try-catch` blocks around the `await` call or within the `async` method itself. Exceptions that occur within the asynchronous operation are propagated through the returned `Task`."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "Asynchronous Programming",
    "question": "What is the purpose of `Task.WhenAll()`?",
    "answer": "`Task.WhenAll()` takes an array or an `IEnumerable` of tasks and returns a new task that completes when all of the supplied tasks have completed. If any of the tasks fault, the returned task will also fault with the same exception."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "Asynchronous Programming",
    "question": "What is the purpose of `Task.WhenAny()`?",
    "options": [
      "It waits for all provided tasks to complete.",
      "It returns the result of the first task to complete.",
      "It returns a task that completes when any of the provided tasks have completed.",
      "It cancels all provided tasks when the first one completes."
    ],
    "correct_answer": "It returns a task that completes when any of the provided tasks have completed.",
    "answer": "`Task.WhenAny()` takes an array or an `IEnumerable` of tasks and returns a new task that completes when any one of the supplied tasks has completed (regardless of its completion status: ran to completion, faulted, or cancelled)."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "Asynchronous Programming",
    "question": "Explain the concept of `ConfigureAwait(false)` and when you might use it.",
    "answer": "`ConfigureAwait(false)` is used to instruct the `await` operator not to marshal the continuation back to the original synchronization context. This can improve performance and prevent deadlocks, especially in library code or non-UI applications where the synchronization context is not needed for the continuation."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "Asynchronous Programming",
    "question": "In what type of code is it generally recommended to use `ConfigureAwait(false)`?",
    "options": [
      "UI application code (e.g., WPF, WinForms).",
      "ASP.NET Core controller actions.",
      "Library code that is not specific to a UI or ASP.NET Core context.",
      "Any `async` method to improve performance."
    ],
    "correct_answer": "Library code that is not specific to a UI or ASP.NET Core context.",
    "answer": "`ConfigureAwait(false)` is generally recommended in library code to avoid potential deadlocks and improve performance by not unnecessarily marshaling back to the calling context."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "Asynchronous Programming",
    "question": "What is the purpose of `CancellationToken` and `CancellationTokenSource` in asynchronous operations?",
    "answer": "`CancellationToken` and `CancellationTokenSource` provide a way to signal that an asynchronous operation should be cancelled. The `CancellationTokenSource` is used to issue the cancellation request, and the `CancellationToken` is passed to the asynchronous operation, which can periodically check its `IsCancellationRequested` property and stop execution if cancellation has been requested."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "Asynchronous Programming",
    "question": "How do you propagate a `CancellationToken` to an asynchronous operation?",
    "options": [
      "By throwing an exception.",
      "By setting a property on the `Task` object.",
      "By passing the `CancellationToken` as a parameter to the asynchronous method.",
      "CancellationToken is automatically propagated."
    ],
    "correct_answer": "By passing the `CancellationToken` as a parameter to the asynchronous method.",
    "answer": "The `CancellationToken` is typically passed as an argument to the asynchronous method that supports cancellation."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "Asynchronous Programming",
    "question": "What is the difference between parallelism and asynchrony?",
    "answer": "Asynchrony is about performing tasks without blocking the current thread, often by switching between threads or using callbacks. Parallelism is about executing multiple tasks simultaneously, typically by utilizing multiple CPU cores or processors."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "Asynchronous Programming",
    "question": "Which scenario is a good candidate for asynchronous programming?",
    "options": [
      "Performing complex mathematical calculations on a large dataset.",
      "Accessing a local file on disk.",
      "Making a network request to an external API.",
      "Iterating over a small in-memory collection."
    ],
    "correct_answer": "Making a network request to an external API.",
    "answer": "I/O-bound operations like network requests, database queries, and file I/O are good candidates for asynchronous programming because they involve waiting for external resources, during which the CPU can be used for other tasks."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "Asynchronous Programming",
    "question": "What are some potential pitfalls or common mistakes when working with asynchronous programming in .NET?",
    "answer": "Common pitfalls include: blocking on asynchronous code (e.g., using `.Wait()` or `.Result` without understanding the implications), not awaiting tasks, ignoring exceptions in asynchronous operations, potential deadlocks in UI or ASP.NET Core applications, and incorrect use of `ConfigureAwait(false)`."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "Asynchronous Programming",
    "question": "What is an `async void` method and when should it be used?",
    "options": [
      "It's the standard return type for asynchronous methods.",
      "It should be used for all event handlers in UI applications.",
      "It should be avoided whenever possible, except for event handlers.",
      "It's used for asynchronous methods that return no value and do not need to be awaited."
    ],
    "correct_answer": "It should be avoided whenever possible, except for event handlers.",
    "answer": "`async void` methods are typically only used for event handlers because they don't provide a way for the caller to be notified of their completion or any exceptions they might throw. For other asynchronous operations, `Task` or `Task<T>` should be used."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "Asynchronous Programming",
    "question": "How can you execute multiple asynchronous operations in parallel and wait for all of them to complete?",
    "answer": "You can create a collection of `Task` objects representing the asynchronous operations and then use `Task.WhenAll(taskList)` to wait for all of them to finish."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "Asynchronous Programming",
    "question": "What is the role of the thread pool in .NET asynchronous programming?",
    "options": [
      "It's where all `async` methods are executed.",
      "It provides a pool of threads that can be used to execute asynchronous operations, especially those initiated with `Task.Run()`.",
      "It's used to manage the execution of synchronous code.",
      "It's responsible for handling exceptions in asynchronous methods."
    ],
    "correct_answer": "It provides a pool of threads that can be used to execute asynchronous operations, especially those initiated with `Task.Run()`.",
    "answer": "The thread pool provides a set of worker threads that can be used to execute tasks in the background, allowing the main thread to remain responsive."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "Asynchronous Programming",
    "question": "Explain the concept of an `async` stream (`IAsyncEnumerable<T>`) in C#.",
    "answer": "`IAsyncEnumerable<T>` and `await foreach` provide support for asynchronous streams, allowing you to work with sequences of data that are produced asynchronously over time. This is useful for scenarios like reading large files or processing real-time data streams."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "Asynchronous Programming",
    "question": "Which keyword is used to iterate over an `IAsyncEnumerable<T>`?",
    "options": [
      "foreach",
      "while",
      "for",
      "await foreach"
    ],
    "correct_answer": "await foreach",
    "answer": "The `await foreach` keyword is used to asynchronously iterate over the elements of an `IAsyncEnumerable<T>`."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "Asynchronous Programming",
    "question": "How does asynchronous programming relate to scalability in web applications?",
    "answer": "Asynchronous programming allows web servers to handle more concurrent requests without blocking threads for long-running operations. By releasing threads while waiting for I/O, the server can use those threads to serve other incoming requests, leading to better scalability and responsiveness under load."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "Asynchronous Programming",
    "question": "When should you avoid using asynchronous programming?",
    "options": [
      "For all I/O-bound operations.",
      "For short, CPU-bound operations where the overhead of task management might outweigh the benefits.",
      "Whenever you need to perform multiple operations in parallel.",
      "In UI applications to prevent blocking the main thread."
    ],
    "correct_answer": "For short, CPU-bound operations where the overhead of task management might outweigh the benefits.",
    "answer": "For very short, CPU-bound operations, the overhead of creating and managing tasks might be greater than the benefits of asynchrony. In such cases, synchronous execution might be more efficient."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "Asynchronous Programming",
    "question": "What is the difference between a hot task and a cold task?",
    "answer": "A cold task starts its execution only when it is awaited or its `Start()` method is called. A hot task, on the other hand, might have already started its execution at the time of creation or when it is first observed."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "Asynchronous Programming",
    "question": "Which of the following methods typically returns a hot task?",
    "options": [
      "Task.Run()",
      "new Task(() => {})",
      "Task.Delay()",
      "Task.FromResult()"
    ],
    "correct_answer": "Task.Delay()",
    "answer": "`Task.Delay()` returns a hot task that will complete after a specified time delay. `Task.Run()` also returns a hot task as it immediately queues the work to the thread pool."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "Asynchronous Programming",
    "question": "How can you implement a timeout for an asynchronous operation in .NET?",
    "answer": "You can implement a timeout by using `Task.Delay()` in conjunction with `Task.WhenAny()`. You create a delay task with the desired timeout and then await the result of `Task.WhenAny()` with your operation's task and the delay task. If the delay task completes first, the operation has timed out."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "Asynchronous Programming",
    "question": "What is the purpose of the `ValueTask<T>` struct in C#?",
    "options": [
      "It's a replacement for `Task<T>` with more features.",
      "It's a value type that can represent both synchronous and asynchronous results, potentially reducing allocations in certain scenarios.",
      "It's used for asynchronous operations that do not return a value.",
      "It's a way to execute tasks on a specific thread."
    ],
    "correct_answer": "It's a value type that can represent both synchronous and asynchronous results, potentially reducing allocations in certain scenarios.",
    "answer": "`ValueTask<T>` is a struct that can wrap either a `Task<T>` or a result of type `T` directly. It's designed to reduce allocations in scenarios where the result of an asynchronous operation might be available synchronously."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "Design Patterns",
    "question": "What are design patterns?",
    "answer": "Design patterns are reusable solutions to common problems in software design. They are not specific pieces of code but rather general approaches that can be applied in different situations to solve recurring design challenges."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "Design Patterns",
    "question": "What are the main categories of design patterns?",
    "options": [
      "Architectural, Functional, Procedural.",
      "Creational, Structural, Behavioral.",
      "Object-oriented, Aspect-oriented, Service-oriented.",
      "Front-end, Back-end, Full-stack."
    ],
    "correct_answer": "Creational, Structural, Behavioral.",
    "answer": "Design patterns are typically categorized into three main groups: Creational patterns (deal with object creation mechanisms), Structural patterns (deal with the composition of classes and objects), and Behavioral patterns (deal with communication and interaction between objects)."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "Design Patterns",
    "question": "Explain the purpose of Creational design patterns and give a few examples.",
    "answer": "Creational patterns abstract the instantiation process, making the system independent of how its objects are created, composed, and represented. Examples include Singleton, Factory Method, Abstract Factory, Builder, and Prototype."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "Design Patterns",
    "question": "Which Creational design pattern ensures that a class has only one instance and provides a global point of access to it?",
    "options": [
      "Factory Method",
      "Abstract Factory",
      "Singleton",
      "Builder"
    ],
    "correct_answer": "Singleton",
    "answer": "The Singleton pattern restricts the instantiation of a class to one object."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "Design Patterns",
    "question": "Describe a scenario where you might use the Singleton pattern in a .NET application.",
    "answer": "Scenarios include managing a global configuration object, a logging service, or a database connection pool where having only one instance is desired for efficiency or consistency."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "Design Patterns",
    "question": "Which Creational design pattern defines an interface for creating an object but lets subclasses decide which class to instantiate?",
    "options": [
      "Abstract Factory",
      "Builder",
      "Factory Method",
      "Prototype"
    ],
    "correct_answer": "Factory Method",
    "answer": "The Factory Method pattern lets a class defer instantiation to subclasses."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "Design Patterns",
    "question": "Explain the purpose of the Factory Method pattern and how it can be beneficial.",
    "answer": "The Factory Method pattern provides a way to create objects without specifying the exact class to be created. This can decouple the client code from the concrete classes and make the system more flexible and extensible."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "Design Patterns",
    "question": "Which Creational design pattern provides an interface for creating families of related or dependent objects without specifying their concrete classes?",
    "options": [
      "Builder",
      "Prototype",
      "Abstract Factory",
      "Factory Method"
    ],
    "correct_answer": "Abstract Factory",
    "answer": "The Abstract Factory pattern provides an interface for creating families of related objects."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "Design Patterns",
    "question": "Describe a situation where you might use the Abstract Factory pattern.",
    "answer": "You might use it when you need to create different sets of related objects depending on a certain context, such as creating UI elements (buttons, text fields) for different operating systems (Windows, macOS)."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "Design Patterns",
    "question": "Which Creational design pattern separates the construction of a complex object from its representation so that the same construction process can create different representations?",
    "options": [
      "Prototype",
      "Abstract Factory",
      "Factory Method",
      "Builder"
    ],
    "correct_answer": "Builder",
    "answer": "The Builder pattern separates the construction of a complex object from its representation."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "Design Patterns",
    "question": "Explain how the Builder pattern can be useful compared to using constructors with many optional parameters.",
    "answer": "The Builder pattern provides a more readable and maintainable way to construct complex objects with many optional or configurable parts. It avoids the telescoping constructor problem and makes it clearer which options are being set."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "Design Patterns",
    "question": "Which Creational design pattern specifies the kinds of objects to create using a prototypical instance?",
    "options": [
      "Abstract Factory",
      "Factory Method",
      "Builder",
      "Prototype"
    ],
    "correct_answer": "Prototype",
    "answer": "The Prototype pattern creates new objects by copying an existing object, called the prototype."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "Design Patterns",
    "question": "Explain the purpose of Structural design patterns and give a few examples.",
    "answer": "Structural patterns deal with how classes and objects are composed to form larger structures. They focus on relationships between entities. Examples include Adapter, Bridge, Composite, Decorator, Facade, Flyweight, and Proxy."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "Design Patterns",
    "question": "Which Structural design pattern allows objects with incompatible interfaces to collaborate?",
    "options": [
      "Bridge",
      "Composite",
      "Adapter",
      "Decorator"
    ],
    "correct_answer": "Adapter",
    "answer": "The Adapter pattern converts the interface of a class into another interface that clients expect."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "Design Patterns",
    "question": "Describe a scenario where you might use the Adapter pattern in a .NET application.",
    "answer": "You might use it when you need to integrate a third-party library or component that has an interface different from what your application expects."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "Design Patterns",
    "question": "Which Structural design pattern decouples an abstraction from its implementation so that the two can vary independently?",
    "options": [
      "Composite",
      "Decorator",
      "Facade",
      "Bridge"
    ],
    "correct_answer": "Bridge",
    "answer": "The Bridge pattern separates an abstraction from its implementation."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "Design Patterns",
    "question": "Explain the purpose of the Bridge pattern.",
    "answer": "The Bridge pattern is used to avoid a permanent binding between an abstraction and its implementation. This allows both the abstraction and the implementation to be extended independently."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "Design Patterns",
    "question": "Which Structural design pattern composes objects into tree structures to represent part-whole hierarchies?",
    "options": [
      "Decorator",
      "Facade",
      "Bridge",
      "Composite"
    ],
    "correct_answer": "Composite",
    "answer": "The Composite pattern composes objects into tree structures representing part-whole hierarchies."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "Design Patterns",
    "question": "Give an example of where the Composite pattern could be used.",
    "answer": "Examples include representing organizational charts (employees can report to other employees), file systems (directories can contain files and other directories), or UI element hierarchies (containers can contain other UI elements)."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "Design Patterns",
    "question": "Which Structural design pattern dynamically adds responsibilities to an object?",
    "options": [
      "Facade",
      "Bridge",
      "Composite",
      "Decorator"
    ],
    "correct_answer": "Decorator",
    "answer": "The Decorator pattern attaches additional responsibilities to an object dynamically."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "Design Patterns",
    "question": "Explain how the Decorator pattern differs from inheritance for extending functionality.",
    "answer": "The Decorator pattern uses object composition to add functionality at runtime, whereas inheritance adds functionality at compile time and can lead to a large number of subclasses. Decorators can be combined and applied dynamically."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "Design Patterns",
    "question": "Which Structural design pattern provides a simplified interface to a set of interfaces in a subsystem?",
    "options": [
      "Bridge",
      "Composite",
      "Decorator",
      "Facade"
    ],
    "correct_answer": "Facade",
    "answer": "The Facade pattern provides a unified interface to a set of interfaces in a subsystem."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "Design Patterns",
    "question": "Describe a scenario where the Facade pattern might be useful.",
    "answer": "It can be useful for hiding the complexity of a subsystem by providing a simpler, higher-level interface for clients to interact with."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "Design Patterns",
    "question": "Which Structural design pattern uses sharing to support large numbers of fine-grained objects efficiently?",
    "options": [
      "Proxy",
      "Facade",
      "Decorator",
      "Flyweight"
    ],
    "correct_answer": "Flyweight",
    "answer": "The Flyweight pattern uses sharing to support large numbers of fine-grained objects efficiently."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "Design Patterns",
    "question": "Explain the concept of the Flyweight pattern.",
    "answer": "The Flyweight pattern aims to reduce memory usage by sharing as much state as possible among similar objects. It separates the intrinsic (shared) state from the extrinsic (unique) state of an object."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "Design Patterns",
    "question": "Which Structural design pattern provides a surrogate or placeholder for another object to control access to it?",
    "options": [
      "Flyweight",
      "Facade",
      "Decorator",
      "Proxy"
    ],
    "correct_answer": "Proxy",
    "answer": "The Proxy pattern provides a surrogate or placeholder for another object to control access to it."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "Design Patterns",
    "question": "Give an example of where the Proxy pattern could be used.",
    "answer": "Examples include lazy loading (a virtual proxy), controlling access to a resource (a protection proxy), or providing a local representation of a remote object (a remote proxy)."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "Design Patterns",
    "question": "Explain the purpose of Behavioral design patterns and give a few examples.",
    "answer": "Behavioral patterns are concerned with algorithms and the assignment of responsibilities between objects. They describe not just the structure but also the patterns of communication between the objects. Examples include Chain of Responsibility, Command, Interpreter, Iterator, Mediator, Memento, Observer, State, Strategy, Template Method, and Visitor."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "Design Patterns",
    "question": "Which Behavioral design pattern avoids coupling the sender of a request to its receiver by giving multiple objects a chance to handle the request?",
    "options": [
      "Command",
      "Mediator",
      "Observer",
      "Chain of Responsibility"
    ],
    "correct_answer": "Chain of Responsibility",
    "answer": "The Chain of Responsibility pattern passes a request along a chain of handlers."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "Design Patterns",
    "question": "Describe a scenario where the Chain of Responsibility pattern might be useful.",
    "answer": "It can be used for handling different types of requests where the specific handler isn't known in advance, such as processing help requests or handling authentication attempts."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "Design Patterns",
    "question": "Which Behavioral design pattern encapsulates a request as an object, thereby letting you parameterize clients with different requests, queue or log requests, and support undoable operations?",
    "options": [
      "Interpreter",
      "Iterator",
      "Command",
      "Memento"
    ],
    "correct_answer": "Command",
    "answer": "The Command pattern encapsulates a request as an object."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "Design Patterns",
    "question": "Explain how the Command pattern can be used to implement undo/redo functionality.",
    "answer": "Each command performs an action. To support undo, the command can also implement an `Undo()` method that reverses the action. A history of executed commands can be kept to implement both undo and redo."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "Design Patterns",
    "question": "Which Behavioral design pattern defines a grammatical representation for a language and provides an interpreter to deal with this grammar?",
    "options": [
      "Iterator",
      "Mediator",
      "Memento",
      "Interpreter"
    ],
    "correct_answer": "Interpreter",
    "answer": "The Interpreter pattern defines a grammatical representation for a language and an interpreter."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "Design Patterns",
    "question": "Describe a situation where the Interpreter pattern might be applicable.",
    "answer": "It can be used for implementing simple language parsers, such as for evaluating mathematical expressions or processing regular expressions (though often built-in libraries are used for more complex scenarios)."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "Design Patterns",
    "question": "Which Behavioral design pattern provides a way to access the elements of an aggregate object sequentially without exposing its underlying representation?",
    "options": [
      "Mediator",
      "Memento",
      "Observer",
      "Iterator"
    ],
    "correct_answer": "Iterator",
    "answer": "The Iterator pattern provides a way to access the elements of an aggregate object sequentially."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "Design Patterns",
    "question": "Explain how the `IEnumerable` and `IEnumerator` interfaces in .NET relate to the Iterator pattern.",
    "answer": "`IEnumerable` defines a contract for objects that can provide an enumerator, which is an object that allows you to iterate through the collection. `IEnumerator` provides the `MoveNext()`, `Current`, and `Reset()` methods for traversing the elements, effectively implementing the Iterator pattern."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "Design Patterns",
    "question": "Which Behavioral design pattern defines an object that encapsulates how a set of objects interact?",
    "options": [
      "Memento",
      "Observer",
      "Iterator",
      "Mediator"
    ],
    "correct_answer": "Mediator",
    "answer": "The Mediator pattern defines an object that encapsulates how a set of objects interact."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "Design Patterns",
    "question": "Describe a scenario where the Mediator pattern might be useful.",
    "answer": "It can be used to reduce dependencies between a set of objects by centralizing their communication in a mediator object, such as in a chat room application where the mediator handles communication between users."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "Design Patterns",
    "question": "Which Behavioral design pattern provides the ability to restore an object to its previous state?",
    "options": [
      "Observer",
      "Iterator",
      "Mediator",
      "Memento"
    ],
    "correct_answer": "Memento",
    "answer": "The Memento pattern provides the ability to restore an object to its previous state."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "Design Patterns",
    "question": "Explain how the Memento pattern works.",
    "answer": "The Memento pattern involves three objects: the Originator (the object whose state needs to be saved), the Memento (an object that stores the internal state of the Originator), and the Caretaker (an object that manages the mementos). The Originator can create a memento containing its current state, and the Caretaker can store and later retrieve mementos to restore the Originator to a previous state."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "Design Patterns",
    "question": "Which Behavioral design pattern defines a one-to-many dependency between objects so that when one object changes state, all its dependents are notified and updated automatically?",
    "options": [
      "Iterator",
      "Mediator",
      "Memento",
      "Observer"
    ],
    "correct_answer": "Observer",
    "answer": "The Observer pattern defines a one-to-many dependency between objects."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "Design Patterns",
    "question": "Explain how the Observer pattern is often implemented in .NET using events and delegates.",
    "answer": "In .NET, the Observer pattern is commonly implemented using events (the subject) and event handlers (the observers). Delegates are used to define the signature of the event handlers, allowing multiple observers to subscribe to and be notified when an event occurs in the subject."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "Design Patterns",
    "question": "Which Behavioral design pattern allows an object to alter its behavior when its internal state changes?",
    "options": [
      "Strategy",
      "Template Method",
      "State",
      "Visitor"
    ],
    "correct_answer": "State",
    "answer": "The State pattern allows an object to alter its behavior when its internal state changes."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "Design Patterns",
    "question": "Describe a scenario where the State pattern might be useful.",
    "answer": "It can be used to represent the states of an object, such as the different states of a traffic light (red, yellow, green) or the states of an order in an e-commerce system (pending, processing, shipped, delivered)."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "Design Patterns",
    "question": "Which Behavioral design pattern defines a family of algorithms, encapsulates each one, and makes them interchangeable?",
    "options": [
      "Template Method",
      "State",
      "Visitor",
      "Strategy"
    ],
    "correct_answer": "Strategy",
    "answer": "The Strategy pattern defines a family of algorithms and makes them interchangeable."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "Design Patterns",
    "question": "Explain how the Strategy pattern promotes the 'Open/Closed Principle'.",
    "answer": "The Strategy pattern allows you to add new algorithms (strategies) without modifying the client code that uses them. The client code works with an abstraction (an interface or an abstract class), and you can plug in different concrete strategy implementations at runtime, thus opening the system for extension but closing it for modification."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "Design Patterns",
    "question": "Which Behavioral design pattern defines the skeleton of an algorithm in an operation, deferring some steps to subclasses?",
    "options": [
      "State",
      "Visitor",
      "Strategy",
      "Template Method"
    ],
    "correct_answer": "Template Method",
    "answer": "The Template Method pattern defines the skeleton of an algorithm in an operation."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "Design Patterns",
    "question": "Describe a use case for the Template Method pattern.",
    "answer": "It can be used when you have a common algorithm with some steps that vary depending on the specific subclass, such as in generating different types of reports where the overall structure of the report generation is the same, but the specific data retrieval or formatting steps differ."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "Design Patterns",
    "question": "Which Behavioral design pattern represents an operation to be performed on the elements of an object structure?",
    "options": [
      "Strategy",
      "Template Method",
      "State",
      "Visitor"
    ],
    "correct_answer": "Visitor",
    "answer": "The Visitor pattern represents an operation to be performed on the elements of an object structure."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "Design Patterns",
    "question": "Explain the purpose of the Visitor pattern.",
    "answer": "The Visitor pattern allows you to define new operations on a hierarchy of objects without modifying the classes of the objects themselves. It separates the algorithm from the object structure on which it operates."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "Design Patterns",
    "question": "Which design pattern is often used in conjunction with Dependency Injection to manage the creation of dependent objects?",
    "options": [
      "Observer",
      "Singleton",
      "Factory Method",
      "Memento"
    ],
    "correct_answer": "Factory Method",
    "answer": "The Factory Method pattern is often used with Dependency Injection to abstract the creation of dependent objects, allowing the DI container to manage their lifecycle."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "Design Patterns",
    "question": "How can the Observer pattern be beneficial in implementing event-driven architectures?",
    "answer": "The Observer pattern provides a mechanism for loosely coupled communication between components. When an event occurs in a subject, all registered observers are notified, allowing different parts of the system to react to the event without having direct dependencies on each other."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Advanced C# Features",
    "question": "What are generics in C# and why are they useful?",
    "answer": "Generics allow you to define type-safe data structures and algorithms without committing to a specific data type. They provide type safety at compile time, improve performance by avoiding boxing and unboxing, and increase code reusability."
  },
  {
    "type": "mcq",
    "level": "advanced",
    "topic": "Advanced C# Features",
    "question": "Which of the following is an example of a generic type in C#?",
    "options": [
      "string",
      "int",
      "List<T>",
      "Console"
    ],
    "correct_answer": "List<T>",
    "answer": "`List<T>` is a generic collection where `T` is a type parameter that can be specified when the list is instantiated (e.g., `List<int>`, `List<string>`)."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Advanced C# Features",
    "question": "What are type constraints in generics and why would you use them?",
    "answer": "Type constraints in generics restrict the types that can be used as type arguments. They allow you to specify requirements for the type parameter, such as it being a value type (`struct`), a reference type (`class`), implementing a specific interface, having a default constructor (`new()`), or being a base class."
  },
  {
    "type": "mcq",
    "level": "advanced",
    "topic": "Advanced C# Features",
    "question": "Which generic type constraint ensures that the type argument is a reference type?",
    "options": [
      "struct",
      "class",
      "interface",
      "new()"
    ],
    "correct_answer": "class",
    "answer": "The `class` constraint specifies that the type argument must be a reference type."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Advanced C# Features",
    "question": "What are delegates in C#?",
    "answer": "Delegates are type-safe function pointers. They define a method signature and can hold references to methods that match that signature. Delegates enable you to treat methods as first-class citizens, allowing them to be passed as arguments to other methods, stored in variables, and invoked dynamically."
  },
  {
    "type": "mcq",
    "level": "advanced",
    "topic": "Advanced C# Features",
    "question": "Which keyword is used to declare a delegate type in C#?",
    "options": [
      "event",
      "interface",
      "class",
      "delegate"
    ],
    "correct_answer": "delegate",
    "answer": "The `delegate` keyword is used to define a delegate type."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Advanced C# Features",
    "question": "What are events in C# and how are they related to delegates?",
    "answer": "Events provide a way for a class to notify other classes (subscribers) when something of interest happens. They are based on delegates and provide a type-safe way to subscribe to and unsubscribe from notifications. Events help in implementing the Observer pattern."
  },
  {
    "type": "mcq",
    "level": "advanced",
    "topic": "Advanced C# Features",
    "question": "Which keyword is used to declare an event in C#?",
    "options": [
      "delegate",
      "class",
      "interface",
      "event"
    ],
    "correct_answer": "event",
    "answer": "The `event` keyword is used to declare an event member in a class or interface."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Advanced C# Features",
    "question": "What are lambda expressions in C# and how are they related to anonymous methods and delegates?",
    "answer": "Lambda expressions are a concise way to write anonymous methods. They provide a shorthand syntax for creating delegates or expression tree types. They can be used wherever a delegate type is expected."
  },
  {
    "type": "mcq",
    "level": "advanced",
    "topic": "Advanced C# Features",
    "question": "What is the basic syntax of a lambda expression in C#?",
    "options": [
      "() => {}",
      "=> () {}",
      "=> {}",
      "() -> {}"
    ],
    "correct_answer": "() => {}",
    "answer": "The basic syntax of a lambda expression is `(input-parameters) => expression-or-statement-block`."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Advanced C# Features",
    "question": "What are attributes in C#?",
    "answer": "Attributes provide a way to add declarative information to code elements (assemblies, modules, types, members, etc.). This metadata can be used at runtime by reflection or by other tools and compilers."
  },
  {
    "type": "mcq",
    "level": "advanced",
    "topic": "Advanced C# Features",
    "question": "How are attributes applied to code elements in C#?",
    "options": [
      "Using angle brackets `<>` before the code element.",
      "Using curly braces `{}` after the code element.",
      "Using square brackets `[]` before the code element.",
      "Using parentheses `()` after the code element."
    ],
    "correct_answer": "Using square brackets `[]` before the code element.",
    "answer": "Attributes are applied to code elements by placing them within square brackets immediately before the element."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Advanced C# Features",
    "question": "What is reflection in C#?",
    "answer": "Reflection is the ability of a program to inspect and manipulate its own structure (types, members, etc.) at runtime. It allows you to discover and interact with types, fields, properties, methods, and events dynamically, without having prior knowledge of their names or types at compile time."
  },
  {
    "type": "mcq",
    "level": "advanced",
    "topic": "Advanced C# Features",
    "question": "Which namespace in .NET provides the classes for working with reflection?",
    "options": [
      "System.IO",
      "System.Net",
      "System.Reflection",
      "System.Linq"
    ],
    "correct_answer": "System.Reflection",
    "answer": "The `System.Reflection` namespace contains classes like `Type`, `Assembly`, `MethodInfo`, `PropertyInfo`, etc., which are used for reflection."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Advanced C# Features",
    "question": "What are extension methods in C#?",
    "answer": "Extension methods allow you to add new methods to existing types without modifying the original type itself. They are static methods that are called as if they were instance methods of the extended type."
  },
  {
    "type": "mcq",
    "level": "advanced",
    "topic": "Advanced C# Features",
    "question": "How are extension methods declared in C#?",
    "options": [
      "By using the `extends` keyword.",
      "By declaring a method as `static` within a non-static class.",
      "By declaring a `static` method in a `static` class where the first parameter is preceded by the `this` keyword.",
      "By using an attribute on a regular instance method."
    ],
    "correct_answer": "By declaring a `static` method in a `static` class where the first parameter is preceded by the `this` keyword.",
    "answer": "Extension methods are defined as `static` methods in a `static` class, and the first parameter specifies the type being extended, preceded by the `this` keyword."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Advanced C# Features",
    "question": "What are anonymous types in C#?",
    "answer": "Anonymous types provide a way to create simple classes on the fly without explicitly defining their names and properties. They are often used in LINQ queries to project data into a new shape."
  },
  {
    "type": "mcq",
    "level": "advanced",
    "topic": "Advanced C# Features",
    "question": "How are anonymous types typically created in C#?",
    "options": [
      "Using the `new` keyword followed by a type name.",
      "Using the `var` keyword with an object initializer.",
      "By declaring a class without a name.",
      "By using a special attribute on a class."
    ],
    "correct_answer": "Using the `var` keyword with an object initializer.",
    "answer": "Anonymous types are created using the `var` keyword along with an object initializer that defines the properties of the anonymous type."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Advanced C# Features",
    "question": "What are tuples in C#?",
    "answer": "Tuples are lightweight data structures that contain a sequence of elements of different types. They provide a concise way to group multiple values into a single object without creating a specific class or struct."
  },
  {
    "type": "mcq",
    "level": "advanced",
    "topic": "Advanced C# Features",
    "question": "Which of the following is a valid way to declare a tuple in C#?",
    "options": [
      "new Tuple<int, string>(1, \"hello\")",
      "(1, \"hello\")",
      "{ int Item1 = 1, string Item2 = \"hello\" }",
      "[1, \"hello\"]"
    ],
    "correct_answer": "Both `new Tuple<int, string>(1, \"hello\")` (older syntax) and `(1, \"hello\")` (value tuples) are valid.",
    "answer": "Both `System.Tuple<T1, T2, ...>` (older reference type tuples) and value tuples (e.g., `(int age, string name)`) are valid ways to declare tuples in C#."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Advanced C# Features",
    "question": "What is pattern matching in C#?",
    "answer": "Pattern matching is a feature that allows you to test whether an object has a certain structure or certain properties. It provides more concise and readable ways to implement conditional logic based on the shape of data."
  },
  {
    "type": "mcq",
    "level": "advanced",
    "topic": "Advanced C# Features",
    "question": "Which of the following is an example of a pattern matching construct in C#?",
    "options": [
      "for loop",
      "while loop",
      "switch expression",
      "if statement"
    ],
    "correct_answer": "switch expression",
    "answer": "Switch expressions (introduced in C# 8.0) and type patterns in `is` and `switch` statements are examples of pattern matching constructs."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Advanced C# Features",
    "question": "What are LINQ expression trees?",
    "answer": "Expression trees represent code as data. They are data structures that define the structure of C# code, allowing the code to be inspected, transformed, and executed at runtime. They are often used by LINQ providers to translate LINQ queries into the query language of a specific data source (e.g., SQL for databases)."
  },
  {
    "type": "mcq",
    "level": "advanced",
    "topic": "Advanced C# Features",
    "question": "Which namespace in .NET contains the classes for working with expression trees?",
    "options": [
      "System.Linq",
      "System.Linq.Expressions",
      "System.Reflection",
      "System.Data.Linq"
    ],
    "correct_answer": "System.Linq.Expressions",
    "answer": "The `System.Linq.Expressions` namespace contains classes like `Expression`, `ParameterExpression`, `ConstantExpression`, etc., used to build and manipulate expression trees."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Advanced C# Features",
    "question": "What are iterators in C# and how are they implemented?",
    "answer": "Iterators provide a way to implement custom iteration logic for collections. They are typically implemented using the `yield return` statement within a method that returns an `IEnumerable` or `IEnumerator` (or their generic counterparts)."
  },
  {
    "type": "mcq",
    "level": "advanced",
    "topic": "Advanced C# Features",
    "question": "Which keyword is central to the implementation of iterators in C#?",
    "options": [
      "return",
      "break",
      "continue",
      "yield"
    ],
    "correct_answer": "yield",
    "answer": "The `yield return` statement is used within an iterator to return each element of the sequence one at a time."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Advanced C# Features",
    "question": "What are nullable reference types in C# 8.0 and later, and what problem do they solve?",
    "answer": "Nullable reference types introduce the concept of nullability directly into the type system for reference types. They help to prevent null reference exceptions at runtime by allowing developers to explicitly indicate whether a reference type can hold a null value using the `?` suffix (e.g., `string?`). The compiler then provides warnings if code might dereference a potentially null reference."
  },
  {
    "type": "mcq",
    "level": "advanced",
    "topic": "Advanced C# Features",
    "question": "How do you declare a nullable string variable in C# 8.0 and later?",
    "options": [
      "string",
      "string?",
      "nullable<string>",
      "string!nullable"
    ],
    "correct_answer": "string?",
    "answer": "A nullable string variable is declared as `string?`."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Advanced C# Features",
    "question": "What is the null-coalescing operator (`??`) in C#?",
    "answer": "The null-coalescing operator `??` provides a concise way to return the left-hand operand if it is not null, otherwise it returns the right-hand operand. It's often used to provide default values."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Advanced C# Features",
    "question": "What is the null-conditional operator (`?.`) in C#?",
    "answer": "The null-conditional operator `?.` allows you to access members of an object only if the object is not null. If the object is null, the expression evaluates to null, preventing null reference exceptions."
  },
  {
    "type": "mcq",
    "level": "advanced",
    "topic": "Advanced C# Features",
    "question": "If `person` is a nullable `Person` object, what does `person?.Name` return if `person` is null?",
    "options": [
      "An empty string",
      "null",
      "A NullReferenceException",
      "The string \"null\""
    ],
    "correct_answer": "null",
    "answer": "If `person` is null, `person?.Name` will evaluate to `null` without throwing an exception."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Advanced C# Features",
    "question": "What are record types in C# 9.0 and later, and what are their key features?",
    "answer": "Record types provide a concise syntax for creating immutable reference types that are primarily intended to hold data. Key features include value-based equality (based on content, not reference), concise syntax for creating instances with positional or property syntax, automatic implementation of `ToString()`, and support for with-expressions for non-destructive mutation."
  },
  {
    "type": "mcq",
    "level": "advanced",
    "topic": "Advanced C# Features",
    "question": "Which of the following is a characteristic of record types in C#?",
    "options": [
      "Mutable by default",
      "Reference equality by default",
      "Value-based equality by default",
      "Cannot be used with inheritance"
    ],
    "correct_answer": "Value-based equality by default",
    "answer": "Record types in C# have value-based equality by default, meaning two record instances are considered equal if all their property values are the same."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Advanced C# Features",
    "question": "What are primary constructors in C# 9.0 record types?",
    "answer": "Primary constructors provide a concise way to declare properties of a record type directly in the record declaration's parameter list. The parameters become public read-only properties of the record."
  },
  {
    "type": "mcq",
    "level": "advanced",
    "topic": "Advanced C# Features",
    "question": "Consider the record `record Person(string Name, int Age);`. How can you create an instance of this record?",
    "options": [
      "new Person { Name = \"Alice\", Age = 30 };",
      "Person p = new (\"Alice\", 30);",
      "Both options are valid.",
      "Neither option is valid."
    ],
    "correct_answer": "Both options are valid.",
    "answer": "Both property initialization (`new Person { Name = \"Alice\", Age = 30 };`) and positional syntax (`new Person(\"Alice\", 30);`) can be used to create instances of records with primary constructors."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Advanced C# Features",
    "question": "What are with-expressions in C# 9.0 record types?",
    "answer": "With-expressions provide a non-destructive way to create a new record instance that is a copy of an existing one, but with some properties modified. They use the `with` keyword followed by an object initializer specifying the properties to change."
  },
  {
    "type": "mcq",
    "level": "advanced",
    "topic": "Advanced C# Features",
    "question": "If you have a record `Person person = new Person(\"Bob\", 25);`, how can you create a new `Person` record with the same name but a different age using a with-expression?",
    "options": [
      "person.Age = 26;",
      "new Person with { person, Age = 26 };",
      "person with { Age = 26 };",
      "Person newPerson = person.Clone(); newPerson.Age = 26;"
    ],
    "correct_answer": "person with { Age = 26 };",
    "answer": "The correct syntax is `Person newPerson = person with { Age = 26 };`."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Advanced C# Features",
    "question": "What are source generators in C#?",
    "answer": "Source generators are a C# compiler feature that allows developers to write code that runs during compilation and can inspect user code to generate new C# source files that are added to the compilation. This can be used to reduce boilerplate code and improve performance by generating code at compile time instead of using reflection at runtime."
  },
  {
    "type": "mcq",
    "level": "advanced",
    "topic": "Advanced C# Features",
    "question": "When do source generators execute?",
    "options": [
      "During application runtime.",
      "Before the compilation process.",
      "During the compilation process.",
      "After the application is deployed."
    ],
    "correct_answer": "During the compilation process.",
    "answer": "Source generators run as part of the C# compilation process."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Advanced C# Features",
    "question": "What are target-typed new expressions in C# 9.0?",
    "answer": "Target-typed new expressions allow you to omit the type name when creating a new object instance if the type can be inferred from the context (the target type). This simplifies the syntax, especially when the type name is long or redundant."
  },
  {
    "type": "mcq",
    "level": "advanced",
    "topic": "Advanced C# Features",
    "question": "Given `List<string> names = ...;`, which of the following uses a target-typed new expression?",
    "options": [
      "List<string> newList = new List<string>();",
      "var newList = new List<string>();",
      "names.AddRange(new List<string> { \"a\", \"b\" });",
      "names.AddRange(new() { \"a\", \"b\" });"
    ],
    "correct_answer": "names.AddRange(new() { \"a\", \"b\" });",
    "answer": "The expression `new() { \"a\", \"b\" }` is a target-typed new expression because the type `List<string>` can be inferred from the `AddRange` method's parameter type."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Advanced C# Features",
    "question": "What are init-only setters in C# 9.0?",
    "answer": "Init-only setters allow properties to be set only during object initialization. After the object has been created, the property cannot be modified. This helps in creating immutable-like objects with a more convenient initialization syntax than using only constructors."
  },
  {
    "type": "mcq",
    "level": "advanced",
    "topic": "Advanced C# Features",
    "question": "How do you declare an init-only setter for a property in C#?",
    "options": [
      "public string Name { get; set; }",
      "public string Name { get; init; }",
      "public readonly string Name { get; }",
      "public string Name { get; private set; }"
    ],
    "correct_answer": "public string Name { get; init; }",
    "answer": "An init-only setter is declared using the `init` keyword instead of `set`."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Security in .NET",
    "question": "What is authentication and how does it differ from authorization?",
    "answer": "Authentication is the process of verifying the identity of a user or service. It answers the question \"Who are you?\". Authorization, on the other hand, is the process of determining what actions an authenticated user or service is allowed to perform. It answers the question \"What are you allowed to do?\". "
  },
  {
    "type": "mcq",
    "level": "advanced",
    "topic": "Security in .NET",
    "question": "Which of the following is primarily concerned with verifying identity?",
    "options": [
      "Authorization",
      "Authentication",
      "Auditing",
      "Encryption"
    ],
    "correct_answer": "Authentication",
    "answer": "Authentication is the process of verifying the identity of a subject."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Security in .NET",
    "question": "Explain the concept of Claims-Based Identity in .NET.",
    "answer": "Claims-Based Identity is a security model where the identity of a user or service is represented as a set of claims. A claim is a statement about the subject, such as their name, role, or permissions. This model allows for a more flexible and decoupled approach to authentication and authorization."
  },
  {
    "type": "mcq",
    "level": "advanced",
    "topic": "Security in .NET",
    "question": "In Claims-Based Identity, what is a 'claim'?",
    "options": [
      "A unique identifier for a user.",
      "A role assigned to a user.",
      "A statement about a user or subject.",
      "A password used for authentication."
    ],
    "correct_answer": "A statement about a user or subject.",
    "answer": "A claim is a piece of information asserted about a subject by an issuer."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Security in .NET",
    "question": "What is JWT (JSON Web Token) and how is it used in authentication and authorization?",
    "answer": "JWT is an open standard (RFC 7519) that defines a compact and self-contained way for securely transmitting information between parties as a JSON object. In authentication, a JWT is often issued by an authentication server and then used by the client to prove their identity to other services. In authorization, the JWT can contain claims about the user's permissions."
  },
  {
    "type": "mcq",
    "level": "advanced",
    "topic": "Security in .NET",
    "question": "What are the three parts of a JWT?",
    "options": [
      "Header, Body, Signature.",
      "Header, Payload, Signature.",
      "Claims, Credentials, Token.",
      "Issuer, Subject, Audience."
    ],
    "correct_answer": "Header, Payload, Signature.",
    "answer": "A JWT consists of three parts: the Header, the Payload (which contains the claims), and the Signature."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Security in .NET",
    "question": "How does the signature in a JWT ensure its integrity?",
    "answer": "The signature is calculated using the header and payload data along with a secret key (for symmetric algorithms like HMAC) or a private key (for asymmetric algorithms like RSA or ECDSA). This signature allows the recipient of the JWT to verify that the token has not been tampered with."
  },
  {
    "type": "mcq",
    "level": "advanced",
    "topic": "Security in .NET",
    "question": "What is OAuth 2.0 and what problem does it solve?",
    "options": [
      "A protocol for encrypting data in transit.",
      "An authorization framework that enables third-party applications to obtain limited access to an HTTP service.",
      "A method for securely storing passwords.",
      "A standard for web server authentication."
    ],
    "correct_answer": "An authorization framework that enables third-party applications to obtain limited access to an HTTP service.",
    "answer": "OAuth 2.0 allows users to grant third-party applications access to their information on another service without sharing their credentials."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Security in .NET",
    "question": "Explain the different grant types in OAuth 2.0 (e.g., Authorization Code, Implicit, Client Credentials).",
    "answer": "OAuth 2.0 defines several grant types for different scenarios: Authorization Code (for web applications), Implicit (simplified flow for browser-based apps), Client Credentials (for application-to-application authentication), Resource Owner Password Credentials (use with caution), and Refresh Token (for obtaining new access tokens)."
  },
  {
    "type": "mcq",
    "level": "advanced",
    "topic": "Security in .NET",
    "question": "Which OAuth 2.0 grant type is generally recommended for web applications?",
    "options": [
      "Implicit",
      "Client Credentials",
      "Resource Owner Password Credentials",
      "Authorization Code"
    ],
    "correct_answer": "Authorization Code",
    "answer": "The Authorization Code grant type is generally considered the most secure and is recommended for traditional web applications."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Security in .NET",
    "question": "What is OpenID Connect (OIDC) and how does it relate to OAuth 2.0?",
    "answer": "OpenID Connect is an authentication layer built on top of the OAuth 2.0 authorization framework. It provides a standardized way to verify the identity of end-users based on the authentication performed by an Authorization Server, as well as to obtain basic profile information about them in an interoperable and RESTful manner."
  },
  {
    "type": "mcq",
    "level": "advanced",
    "topic": "Security in .NET",
    "question": "What is the primary purpose of OpenID Connect?",
    "options": [
      "Authorization only.",
      "Authentication only.",
      "Both authentication and authorization.",
      "Data encryption."
    ],
    "correct_answer": "Authentication only.",
    "answer": "While built on OAuth 2.0, OpenID Connect's primary goal is to handle user authentication."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Security in .NET",
    "question": "How can you implement authentication and authorization in ASP.NET Core?",
    "answer": "ASP.NET Core provides built-in support for various authentication schemes (e.g., Cookies, JWT Bearer, OpenID Connect) and authorization mechanisms (e.g., Role-based, Policy-based). These are typically configured in the `ConfigureServices` method of `Startup.cs` and used via middleware and attributes on controllers or Razor Pages."
  },
  {
    "type": "mcq",
    "level": "advanced",
    "topic": "Security in .NET",
    "question": "Which middleware component in ASP.NET Core is typically used for authentication?",
    "options": [
      "StaticFilesMiddleware",
      "RoutingMiddleware",
      "AuthenticationMiddleware",
      "AuthorizationMiddleware"
    ],
    "correct_answer": "AuthenticationMiddleware",
    "answer": "The `AuthenticationMiddleware` is responsible for authenticating users based on the configured authentication schemes."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Security in .NET",
    "question": "What is Policy-Based Authorization in ASP.NET Core and what are its benefits over Role-Based Authorization?",
    "answer": "Policy-Based Authorization allows for more complex authorization logic to be defined as policies. A policy can encompass multiple requirements, such as a user having a specific role and a certain claim. This provides greater flexibility and control over authorization compared to just using roles."
  },
  {
    "type": "mcq",
    "level": "advanced",
    "topic": "Security in .NET",
    "question": "How do you register a custom authorization policy in ASP.NET Core?",
    "options": [
      "By adding an attribute to the controller.",
      "In the `Configure` method of `Startup.cs`.",
      "In the `ConfigureServices` method using `services.AddAuthorization()`.",
      "By creating a separate configuration file."
    ],
    "correct_answer": "In the `ConfigureServices` method using `services.AddAuthorization()`. ",
    "answer": "Custom authorization policies are registered within the `ConfigureServices` method using the `services.AddAuthorization()` extension method."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Security in .NET",
    "question": "What is Cross-Site Scripting (XSS) and how can you prevent it in ASP.NET Core?",
    "answer": "XSS is a type of security vulnerability that allows attackers to inject malicious scripts into web pages viewed by other users. In ASP.NET Core, you can prevent XSS by encoding user-provided input when displaying it in views (e.g., using `@Html.Encode()` or Tag Helpers which encode by default) and by using Content Security Policy (CSP)."
  },
  {
    "type": "mcq",
    "level": "advanced",
    "topic": "Security in .NET",
    "question": "Which of the following is a common technique to prevent XSS attacks in ASP.NET Core?",
    "options": [
      "Using HTTPS.",
      "Validating user input on the server-side.",
      "Encoding user-provided output in views.",
      "Implementing rate limiting."
    ],
    "correct_answer": "Encoding user-provided output in views.",
    "answer": "Encoding user-provided output ensures that any potentially malicious scripts are treated as plain text."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Security in .NET",
    "question": "What is Cross-Site Request Forgery (CSRF) and how can you prevent it in ASP.NET Core?",
    "answer": "CSRF is an attack that forces authenticated users to perform unintended actions on a web application. ASP.NET Core provides built-in support for preventing CSRF using anti-forgery tokens. You typically include an anti-forgery token in your forms using the `@Html.AntiForgeryToken()` Tag Helper, and the framework automatically validates these tokens on form submissions."
  },
  {
    "type": "mcq",
    "level": "advanced",
    "topic": "Security in .NET",
    "question": "How does ASP.NET Core help prevent CSRF attacks?",
    "options": [
      "By automatically encrypting all HTTP requests.",
      "By using anti-forgery tokens in forms.",
      "By implementing strong password policies.",
      "By blocking requests from different domains."
    ],
    "correct_answer": "By using anti-forgery tokens in forms.",
    "answer": "ASP.NET Core uses anti-forgery tokens to verify that the request originated from the application itself."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Security in .NET",
    "question": "What is SQL Injection and how can you prevent it when using Entity Framework Core?",
    "answer": "SQL Injection is a code injection technique that might allow an attacker to execute malicious SQL statements. When using Entity Framework Core, you can prevent SQL Injection by using parameterized queries (which is the default behavior when using LINQ or raw SQL with parameters) and avoiding the concatenation of user input directly into SQL strings."
  },
  {
    "type": "mcq",
    "level": "advanced",
    "topic": "Security in .NET",
    "question": "Which of the following practices helps prevent SQL Injection attacks when using Entity Framework Core?",
    "options": [
      "Using stored procedures for all database operations.",
      "Disabling database logging in production.",
      "Using LINQ queries or parameterized raw SQL.",
      "Granting database user full administrative privileges."
    ],
    "correct_answer": "Using LINQ queries or parameterized raw SQL.",
    "answer": "LINQ queries and parameterized raw SQL ensure that user input is treated as data rather than executable code."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Security in .NET",
    "question": "What is data encryption and why is it important for security?",
    "answer": "Data encryption is the process of converting data into an unreadable format (ciphertext) to protect its confidentiality. It's crucial for security to prevent unauthorized access to sensitive information, both in transit and at rest."
  },
  {
    "type": "mcq",
    "level": "advanced",
    "topic": "Security in .NET",
    "question": "What is the difference between symmetric and asymmetric encryption?",
    "options": [
      "Symmetric uses one key for encryption and decryption, while asymmetric uses two separate keys.",
      "Asymmetric is faster than symmetric encryption.",
      "Symmetric is used for data at rest, while asymmetric is for data in transit.",
      "There is no significant difference."
    ],
    "correct_answer": "Symmetric uses one key for encryption and decryption, while asymmetric uses two separate keys.",
    "answer": "Symmetric encryption uses the same key for both encryption and decryption, while asymmetric encryption uses a pair of keys: a public key for encryption and a private key for decryption."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Security in .NET",
    "question": "Explain how you would typically store sensitive data like passwords securely in a .NET application.",
    "answer": "Sensitive data like passwords should never be stored in plain text. Instead, they should be hashed using a strong one-way hashing algorithm (like Argon2, bcrypt, or scrypt) with a unique salt for each password. The hash and salt are stored, and during authentication, the provided password is hashed with the stored salt and compared to the stored hash."
  },
  {
    "type": "mcq",
    "level": "advanced",
    "topic": "Security in .NET",
    "question": "Which of the following is a recommended practice for storing passwords securely?",
    "options": [
      "Storing passwords in plain text.",
      "Hashing passwords without using a salt.",
      "Using a strong one-way hashing algorithm with a unique salt for each password.",
      "Encrypting passwords using a reversible encryption algorithm."
    ],
    "correct_answer": "Using a strong one-way hashing algorithm with a unique salt for each password.",
    "answer": "Hashing with a salt makes it much harder for attackers to crack passwords even if they obtain the password database."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Security in .NET",
    "question": "What is the purpose of salting when hashing passwords?",
    "answer": "Salting involves adding a unique, random value (the salt) to each password before hashing it. This prevents attackers from using pre-computed tables of hashes (rainbow tables) to crack passwords, as each password will have a unique hash even if the passwords are the same."
  },
  {
    "type": "mcq",
    "level": "advanced",
    "topic": "Security in .NET",
    "question": "What is the purpose of the `dotnet user-secrets` tool in ASP.NET Core development?",
    "options": [
      "To manage and store user passwords in a production environment.",
      "To store sensitive configuration data (like API keys or database connection strings) during development outside of the source code.",
      "To encrypt user data in the application database.",
      "To generate JWT tokens for authentication."
    ],
    "correct_answer": "To store sensitive configuration data (like API keys or database connection strings) during development outside of the source code.",
    "answer": "The `dotnet user-secrets` tool helps developers keep sensitive configuration data separate from their project code during development."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Security in .NET",
    "question": "What are the risks associated with storing sensitive information in configuration files (like `appsettings.json`) in a production environment?",
    "answer": "Storing sensitive information directly in configuration files can expose it if the files are accidentally committed to source control, accessed by unauthorized personnel, or if the server is compromised. It's generally recommended to use environment variables, Azure Key Vault, or other secure configuration management solutions for production secrets."
  },
  {
    "type": "mcq",
    "level": "advanced",
    "topic": "Security in .NET",
    "question": "Which of the following is a more secure way to manage sensitive configuration in a production ASP.NET Core application compared to `appsettings.json`?",
    "options": [
      "Using `dotnet user-secrets` in production.",
      "Storing secrets in plain text files on the server.",
      "Using environment variables or a dedicated secret management service like Azure Key Vault.",
      "Hardcoding secrets directly into the application code."
    ],
    "correct_answer": "Using environment variables or a dedicated secret management service like Azure Key Vault.",
    "answer": "Environment variables and secret management services provide more secure ways to handle sensitive configuration in production."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Security in .NET",
    "question": "What is HTTPS and why is it important for web application security?",
    "answer": "HTTPS (HTTP Secure) is a secure version of HTTP, the protocol used for communication over the World Wide Web. It encrypts the communication between the client's browser and the web server, protecting data from being intercepted or tampered with during transmission. This is crucial for protecting sensitive information like login credentials, personal data, and financial details."
  },
  {
    "type": "mcq",
    "level": "advanced",
    "topic": "Security in .NET",
    "question": "How can you enforce the use of HTTPS in an ASP.NET Core application?",
    "options": [
      "By only deploying the application to servers with SSL certificates.",
      "By configuring the web server to redirect HTTP traffic to HTTPS.",
      "By using the `[RequireHttps]` attribute on controllers or actions, or by using the `HttpsRedirectionMiddleware`.",
      "All of the above."
    ],
    "correct_answer": "All of the above.",
    "answer": "Enforcing HTTPS involves server configuration, the `[RequireHttps]` attribute, and the `HttpsRedirectionMiddleware`."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Security in .NET",
    "question": "What is Content Security Policy (CSP) and how can it help improve web application security?",
    "answer": "CSP is an HTTP header that allows web developers to control the resources (like scripts, styles, images) that the user agent is allowed to load for a given page. By defining a strict CSP, you can reduce the risk of XSS attacks by preventing the browser from executing malicious scripts injected by an attacker."
  },
  {
    "type": "mcq",
    "level": "advanced",
    "topic": "Security in .NET",
    "question": "How can you implement Content Security Policy in an ASP.NET Core application?",
    "options": [
      "By adding a `<csp>` tag in the HTML.",
      "By configuring it in the `appsettings.json` file.",
      "By setting the `Content-Security-Policy` HTTP header in middleware or using a library.",
      "It is enabled by default."
    ],
    "correct_answer": "By setting the `Content-Security-Policy` HTTP header in middleware or using a library.",
    "answer": "CSP is implemented by setting the `Content-Security-Policy` HTTP header with directives that specify the allowed sources for different types of resources."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Security in .NET",
    "question": "What is the principle of least privilege and how does it apply to application security?",
    "answer": "The principle of least privilege states that a user, process, or system should have only the minimum level of access (permissions or resources) necessary to perform its intended function. Applying this principle in application security helps to limit the potential damage if an account or system is compromised."
  },
  {
    "type": "mcq",
    "level": "advanced",
    "topic": "Security in .NET",
    "question": "Which of the following aligns with the principle of least privilege?",
    "options": [
      "Granting all users administrative access to the database.",
      "Running the web application process with the root user account.",
      "Granting only the necessary permissions to database users based on their roles.",
      "Storing API keys directly in the client-side code."
    ],
    "correct_answer": "Granting only the necessary permissions to database users based on their roles.",
    "answer": "Granting only the required permissions minimizes the potential impact of a security breach."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Security in .NET",
    "question": "What is input validation and why is it important for security?",
    "answer": "Input validation is the process of ensuring that user-provided data conforms to expected formats, types, lengths, and ranges. It's crucial for security to prevent various attacks like SQL Injection, XSS, buffer overflows, and other issues that can arise from processing unexpected or malicious input."
  },
  {
    "type": "mcq",
    "level": "advanced",
    "topic": "Security in .NET",
    "question": "Where should input validation primarily be performed?",
    "options": [
      "Only on the client-side for better user experience.",
      "Only on the server-side for security.",
      "Both on the client-side for user experience and on the server-side for security.",
      "Neither client-side nor server-side validation is necessary if using a framework."
    ],
    "correct_answer": "Both on the client-side for user experience and on the server-side for security.",
    "answer": "Client-side validation improves user experience, but server-side validation is essential for security as client-side checks can be bypassed."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Security in .NET",
    "question": "What are some common security vulnerabilities to be aware of when developing .NET applications?",
    "answer": "Common vulnerabilities include XSS, CSRF, SQL Injection, insecure password storage, insecure direct object references, broken authentication and session management, security misconfiguration, and using components with known vulnerabilities."
  },
  {
    "type": "mcq",
    "level": "advanced",
    "topic": "Security in .NET",
    "question": "Which of the following is a common security vulnerability in web applications?",
    "options": [
      "Proper error handling.",
      "Using parameterized queries.",
      "Cross-Site Scripting (XSS).",
      "Regular security updates."
    ],
    "correct_answer": "Cross-Site Scripting (XSS).",
    "answer": "XSS is a widely known and exploited web application vulnerability."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Security in .NET",
    "question": "How can you protect against brute-force attacks on login forms?",
    "answer": "Common techniques include implementing rate limiting (restricting the number of login attempts from a specific IP address or user account within a certain time period), using CAPTCHA or similar challenges to distinguish between humans and bots, and potentially implementing account lockout policies after a certain number of failed attempts."
  },
  {
    "type": "mcq",
    "level": "advanced",
    "topic": "Security in .NET",
    "question": "What is rate limiting and how does it help with security?",
    "options": [
      "It encrypts network traffic.",
      "It restricts the number of requests a user or client can make within a certain timeframe, helping to prevent abuse and brute-force attacks.",
      "It validates user input.",
      "It monitors application performance."
    ],
    "correct_answer": "It restricts the number of requests a user or client can make within a certain timeframe, helping to prevent abuse and brute-force attacks.",
    "answer": "Rate limiting is a common security measure to protect against various types of attacks."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Security in .NET",
    "question": "What is the purpose of security auditing and logging in a .NET application?",
    "answer": "Security auditing and logging involve tracking and recording security-related events and activities within an application. This information is crucial for detecting security breaches, analyzing incidents, monitoring for suspicious behavior, and complying with regulatory requirements."
  },
  {
    "type": "mcq",
    "level": "advanced",
    "topic": "Security in .NET",
    "question": "Which of the following is an important aspect of security auditing and logging?",
    "options": [
      "Disabling logging in production to improve performance.",
      "Storing logs in a publicly accessible location.",
      "Including timestamps, user identifiers, and the nature of the event in log entries.",
      "Only logging successful login attempts."
    ],
    "correct_answer": "Including timestamps, user identifiers, and the nature of the event in log entries.",
    "answer": "Comprehensive log entries provide valuable information for security analysis."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Security in .NET",
    "question": "How can you protect against man-in-the-middle (MITM) attacks in a .NET web application?",
    "answer": "Using HTTPS with a valid SSL/TLS certificate is the primary way to protect against MITM attacks. HTTPS encrypts the communication channel, making it difficult for attackers to intercept and eavesdrop on the data being transmitted between the client and the server."
  },
  {
    "type": "mcq",
    "level": "advanced",
    "topic": "Security in .NET",
    "question": "What is the primary defense against Man-in-the-Middle (MITM) attacks for web applications?",
    "options": [
      "Strong password policies.",
      "Input validation.",
      "Using HTTPS.",
      "Regular security updates."
    ],
    "correct_answer": "Using HTTPS.",
    "answer": "HTTPS provides the necessary encryption to secure the communication channel."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Performance Optimization in .NET",
    "question": "What are some key areas to consider when optimizing the performance of a .NET application?",
    "answer": "Key areas include efficient memory management (reducing allocations and garbage collection pressure), optimized algorithms and data structures, minimizing I/O operations, effective use of caching, proper handling of concurrency and parallelism, and profiling to identify bottlenecks."
  },
  {
    "type": "mcq",
    "level": "advanced",
    "topic": "Performance Optimization in .NET",
    "question": "Which of the following is a primary goal of performance optimization?",
    "options": [
      "Reducing the number of lines of code.",
      "Improving application responsiveness and throughput.",
      "Using the latest version of the .NET framework.",
      "Increasing the size of the application to include more features."
    ],
    "correct_answer": "Improving application responsiveness and throughput.",
    "answer": "Performance optimization aims to make the application faster and more efficient in handling requests and tasks."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Performance Optimization in .NET",
    "question": "Explain the role of the Garbage Collector (GC) in .NET and how it impacts performance.",
    "answer": "The Garbage Collector automatically manages memory allocation and deallocation in .NET. While it simplifies memory management, excessive or frequent garbage collections can introduce pauses and impact application performance, especially for latency-sensitive applications."
  },
  {
    "type": "mcq",
    "level": "advanced",
    "topic": "Performance Optimization in .NET",
    "question": "What can cause excessive garbage collection in a .NET application?",
    "options": [
      "Using value types extensively.",
      "Reducing the number of object allocations.",
      "Creating and discarding a large number of objects frequently.",
      "Using the `GC.Collect()` method frequently."
    ],
    "correct_answer": "Creating and discarding a large number of objects frequently.",
    "answer": "High object allocation rates can lead to more frequent garbage collections."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Performance Optimization in .NET",
    "question": "How can you reduce the pressure on the Garbage Collector in a .NET application?",
    "answer": "Strategies include: reusing objects when possible (e.g., using `StringBuilder` for string manipulation), minimizing boxing and unboxing, using structs for small, short-lived value types, and being mindful of collection usage and resizing."
  },
  {
    "type": "mcq",
    "level": "advanced",
    "topic": "Performance Optimization in .NET",
    "question": "Which of the following is generally more memory-efficient for concatenating strings in a loop?",
    "options": [
      "Using the `+` operator repeatedly.",
      "Using the `string.Concat()` method in each iteration.",
      "Using the `StringBuilder` class.",
      "Using string interpolation."
    ],
    "correct_answer": "Using the `StringBuilder` class.",
    "answer": "`StringBuilder` avoids creating new string objects in each concatenation, making it more efficient for repeated string modifications."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Performance Optimization in .NET",
    "question": "What is boxing and unboxing in C# and how can they affect performance?",
    "answer": "Boxing is the process of converting a value type to a reference type (object). Unboxing is the reverse process. These operations involve allocations on the heap and type checks, which can introduce performance overhead, especially in frequently executed code paths."
  },
  {
    "type": "mcq",
    "level": "advanced",
    "topic": "Performance Optimization in .NET",
    "question": "How can you minimize boxing and unboxing in your C# code?",
    "options": [
      "By using `object` type variables more frequently.",
      "By using generics and type-specific collections.",
      "By avoiding the use of value types.",
      "By explicitly casting value types to reference types."
    ],
    "correct_answer": "By using generics and type-specific collections.",
    "answer": "Generics allow you to work with value types directly without the need for boxing."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Performance Optimization in .NET",
    "question": "Explain the benefits of using structs over classes in certain scenarios for performance.",
    "answer": "Structs are value types allocated on the stack (unless boxed), which can lead to faster allocation and deallocation compared to classes, which are reference types allocated on the heap. For small, short-lived data structures that do not require inheritance or polymorphism, structs can offer better performance by reducing GC pressure."
  },
  {
    "type": "mcq",
    "level": "advanced",
    "topic": "Performance Optimization in .NET",
    "question": "In which scenario would using a struct likely provide a performance advantage over a class?",
    "options": [
      "Representing a complex business entity with many properties and methods.",
      "Creating a collection that will hold a large number of items.",
      "Representing a simple 2D point with X and Y coordinates.",
      "Implementing a service with complex lifecycle management."
    ],
    "correct_answer": "Representing a simple 2D point with X and Y coordinates.",
    "answer": "Small, immutable value types like points or simple data transfer objects can benefit from being structs."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Performance Optimization in .NET",
    "question": "What are some common performance pitfalls related to collections in .NET?",
    "answer": "Pitfalls include: excessive resizing of dynamic collections (like `List<T>`), using inappropriate collection types for the task (e.g., using a `List<T>` when a `HashSet<T>` would be more efficient for lookups), and iterating over large collections inefficiently."
  },
  {
    "type": "mcq",
    "level": "advanced",
    "topic": "Performance Optimization in .NET",
    "question": "When adding a known large number of items to a `List<T>`, what can you do to improve performance?",
    "options": [
      "Add items one by one without any initial capacity.",
      "Set the initial capacity of the list to the expected size.",
      "Use a different collection type like `ArrayList`.",
      "Disable range checks on the list."
    ],
    "correct_answer": "Set the initial capacity of the list to the expected size.",
    "answer": "Setting the initial capacity can prevent frequent resizing of the list, which can be an expensive operation."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Performance Optimization in .NET",
    "question": "How can you optimize I/O-bound operations in .NET?",
    "answer": "Use asynchronous programming (`async` and `await`) to avoid blocking threads while waiting for I/O operations to complete. This allows the thread to be used for other tasks, improving application responsiveness and scalability."
  },
  {
    "type": "mcq",
    "level": "advanced",
    "topic": "Performance Optimization in .NET",
    "question": "Which of the following is a good practice for optimizing file I/O operations?",
    "options": [
      "Reading and writing small chunks of data synchronously.",
      "Reading the entire file into memory before processing.",
      "Using buffered streams and asynchronous operations.",
      "Disabling file system caching."
    ],
    "correct_answer": "Using buffered streams and asynchronous operations.",
    "answer": "Buffered streams can reduce the number of system calls, and asynchronous operations prevent blocking."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Performance Optimization in .NET",
    "question": "Explain the concept of caching and its benefits for performance optimization.",
    "answer": "Caching involves storing frequently accessed data in a faster storage medium (like memory) to reduce the need to retrieve it from a slower source (like a database or a remote API) repeatedly. This can significantly improve application performance by reducing latency and increasing throughput."
  },
  {
    "type": "mcq",
    "level": "advanced",
    "topic": "Performance Optimization in .NET",
    "question": "What are some common caching strategies in .NET applications?",
    "options": [
      "Always fetching data directly from the source.",
      "Caching all data indefinitely.",
      "In-memory caching, distributed caching, and response caching.",
      "Only caching static content."
    ],
    "correct_answer": "In-memory caching, distributed caching, and response caching.",
    "answer": "These are common strategies depending on the application's needs and scale."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Performance Optimization in .NET",
    "question": "When should you consider using distributed caching in an ASP.NET Core application?",
    "answer": "Distributed caching is beneficial for applications running across multiple servers (web farms or cloud environments) to ensure that the cache is shared and consistent across all instances. It's also useful for larger datasets that might exceed the memory capacity of a single server."
  },
  {
    "type": "mcq",
    "level": "advanced",
    "topic": "Performance Optimization in .NET",
    "question": "Which of the following is an example of a distributed caching provider in .NET?",
    "options": [
      "MemoryCache",
      "OutputCache",
      "ResponseCache",
      "RedisCache"
    ],
    "correct_answer": "RedisCache",
    "answer": "`RedisCache` and `DistributedSqlServerCache` are examples of distributed cache implementations in .NET."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Performance Optimization in .NET",
    "question": "How can you optimize database interactions in a .NET application?",
    "answer": "Strategies include: writing efficient database queries (using appropriate indexes, avoiding unnecessary data retrieval), using connection pooling, minimizing the number of database round trips, using asynchronous database operations, and considering techniques like eager loading or lazy loading in Entity Framework Core based on the use case."
  },
  {
    "type": "mcq",
    "level": "advanced",
    "topic": "Performance Optimization in .NET",
    "question": "What is the benefit of using connection pooling with ADO.NET or Entity Framework Core?",
    "options": [
      "It reduces the security of the database connection.",
      "It increases the time it takes to establish a database connection for each request.",
      "It reuses existing database connections, reducing the overhead of establishing new connections.",
      "It automatically optimizes database queries."
    ],
    "correct_answer": "It reuses existing database connections, reducing the overhead of establishing new connections.",
    "answer": "Connection pooling can significantly improve performance by avoiding the cost of repeatedly opening and closing database connections."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Performance Optimization in .NET",
    "question": "Explain the difference between eager loading and lazy loading in Entity Framework Core and their performance implications.",
    "answer": "Eager loading involves loading related entities along with the primary entity in a single query (using `Include` or `ThenInclude`). This can reduce the number of database queries but might load more data than needed initially. Lazy loading involves loading related entities only when they are accessed for the first time. This can reduce the initial load time but might result in many small database queries (the N+1 problem)."
  },
  {
    "type": "mcq",
    "level": "advanced",
    "topic": "Performance Optimization in .NET",
    "question": "In Entity Framework Core, which method is typically used to perform eager loading of related entities?",
    "options": [
      "Load()",
      "Find()",
      "Include()",
      "AsNoTracking()"
    ],
    "correct_answer": "Include()",
    "answer": "The `Include()` method specifies the related entities to be loaded eagerly."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Performance Optimization in .NET",
    "question": "What is the N+1 problem in the context of ORM (like Entity Framework Core) and how can you mitigate it?",
    "answer": "The N+1 problem occurs when an application executes one query to retrieve a list of primary entities, and then for each of those entities, it executes an additional query to fetch related data. This can lead to a large number of database queries. It can be mitigated by using eager loading or by using LINQ's `Select` to project the required data in a single query."
  },
  {
    "type": "mcq",
    "level": "advanced",
    "topic": "Performance Optimization in .NET",
    "question": "Which LINQ method can be helpful in projecting data to avoid the N+1 problem in Entity Framework Core?",
    "options": [
      "Where()",
      "OrderBy()",
      "Select()",
      "GroupBy()"
    ],
    "correct_answer": "Select()",
    "answer": "The `Select()` method allows you to shape the data you retrieve and can be used to fetch related data in a more efficient way."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Performance Optimization in .NET",
    "question": "How can you profile a .NET application to identify performance bottlenecks?",
    "answer": "You can use various profiling tools like Visual Studio Profiler, PerfView, or third-party profilers (e.g., JetBrains dotTrace). These tools can collect data on CPU usage, memory allocation, garbage collection, and other performance metrics to help pinpoint areas of the code that are causing performance issues."
  },
  {
    "type": "mcq",
    "level": "advanced",
    "topic": "Performance Optimization in .NET",
    "question": "Which of the following is a common metric to analyze when profiling a .NET application for performance?",
    "options": [
      "Number of lines of code.",
      "Code complexity (cyclomatic complexity).",
      "CPU usage and memory allocation.",
      "Number of comments in the code."
    ],
    "correct_answer": "CPU usage and memory allocation.",
    "answer": "High CPU usage or excessive memory allocation are often indicators of performance bottlenecks."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Performance Optimization in .NET",
    "question": "What are some performance considerations when working with large datasets in .NET?",
    "answer": "Consider using techniques like: pagination or virtualization for UI display, streaming data instead of loading everything into memory at once, using efficient data structures, and parallel processing if the operations are CPU-bound and can be parallelized safely."
  },
  {
    "type": "mcq",
    "level": "advanced",
    "topic": "Performance Optimization in .NET",
    "question": "When processing a very large file, which approach is generally more memory-efficient?",
    "options": [
      "Reading the entire file content into a string.",
      "Reading the file line by line or in chunks.",
      "Using a `MemoryStream`.",
      "Converting the file to a `DataTable`."
    ],
    "correct_answer": "Reading the file line by line or in chunks.",
    "answer": "Reading in chunks or line by line avoids loading the entire file into memory, which can lead to `OutOfMemoryException` for very large files."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Performance Optimization in .NET",
    "question": "How can you leverage parallelism to improve the performance of CPU-bound tasks in .NET?",
    "answer": "You can use the `Task Parallel Library (TPL)` with features like `Task.Run()`, `Parallel.For`, `Parallel.ForEach`, and `async/await` to execute CPU-intensive operations concurrently on multiple threads, potentially reducing the overall execution time."
  },
  {
    "type": "mcq",
    "level": "advanced",
    "topic": "Performance Optimization in .NET",
    "question": "Which of the following is a class in the Task Parallel Library (TPL) used for parallel execution of loop operations?",
    "options": [
      "Thread",
      "Task",
      "Parallel",
      "Semaphore"
    ],
    "correct_answer": "Parallel",
    "answer": "The `Parallel` class provides static methods like `For` and `ForEach` for parallel loop execution."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Performance Optimization in .NET",
    "question": "What are some potential issues to consider when using parallelism for performance optimization?",
    "answer": "Potential issues include: increased complexity, potential for race conditions and deadlocks if shared resources are not handled correctly, and the overhead of task creation and management, which might outweigh the benefits for very short tasks."
  },
  {
    "type": "mcq",
    "level": "advanced",
    "topic": "Performance Optimization in .NET",
    "question": "What is a race condition in concurrent programming?",
    "options": [
      "A situation where multiple threads try to access the same resource at the same time, and the outcome depends on the order in which they access it.",
      "A condition where a thread is waiting for a resource that will never become available.",
      "A state where a program crashes due to an unhandled exception in a background thread.",
      "A scenario where parallel tasks complete in a predictable order."
    ],
    "correct_answer": "A situation where multiple threads try to access the same resource at the same time, and the outcome depends on the order in which they access it.",
    "answer": "Race conditions can lead to unexpected and incorrect behavior in multithreaded applications."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Performance Optimization in .NET",
    "question": "How can you mitigate race conditions when using parallelism in .NET?",
    "answer": "Use synchronization primitives like locks (`lock` keyword, `Mutex`, `Semaphore`), concurrent collections (e.g., `ConcurrentBag`, `ConcurrentDictionary`), and atomic operations to control access to shared resources and ensure thread safety."
  },
  {
    "type": "mcq",
    "level": "advanced",
    "topic": "Performance Optimization in .NET",
    "question": "Which keyword in C# can be used to acquire a lock on an object for thread synchronization?",
    "options": [
      "async",
      "await",
      "lock",
      "volatile"
    ],
    "correct_answer": "lock",
    "answer": "The `lock` keyword provides a convenient way to acquire a mutual exclusion lock on a given object."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Performance Optimization in .NET",
    "question": "What is the purpose of the `AsNoTracking()` method in Entity Framework Core regarding performance?",
    "answer": "The `AsNoTracking()` method is used to instruct Entity Framework Core not to track the entities retrieved from the database. This can improve performance for read-only scenarios as EF Core doesn't need to maintain change tracking information for these entities."
  },
  {
    "type": "mcq",
    "level": "advanced",
    "topic": "Performance Optimization in .NET",
    "question": "When should you consider using `AsNoTracking()` in Entity Framework Core?",
    "options": [
      "When you need to update the retrieved entities later.",
      "For all database queries to improve performance.",
      "When you only need to read data and not modify it in the current context.",
      "When you are performing complex joins and aggregations."
    ],
    "correct_answer": "When you only need to read data and not modify it in the current context.",
    "answer": "`AsNoTracking()` is most beneficial for read-only scenarios."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Performance Optimization in .NET",
    "question": "What are some performance considerations for ASP.NET Core middleware?",
    "answer": "Middleware components are executed in a pipeline for each request. Performance considerations include: the order of middleware (place more frequently executed and efficient middleware earlier in the pipeline), avoiding expensive operations in middleware if possible, and ensuring that middleware short-circuits the pipeline when appropriate."
  },
  {
    "type": "mcq",
    "level": "advanced",
    "topic": "Performance Optimization in .NET",
    "question": "In an ASP.NET Core application, which middleware should typically come early in the pipeline for performance reasons?",
    "options": [
      "AuthenticationMiddleware",
      "AuthorizationMiddleware",
      "StaticFilesMiddleware",
      "RoutingMiddleware"
    ],
    "correct_answer": "StaticFilesMiddleware",
    "answer": "`StaticFilesMiddleware` should be placed early so that requests for static files can be served quickly without going through the rest of the pipeline."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Performance Optimization in .NET",
    "question": "What is response compression in ASP.NET Core and how does it improve performance?",
    "answer": "Response compression reduces the size of the HTTP response sent from the server to the client (e.g., using gzip or Brotli). This results in faster download times for clients, especially over slower network connections, leading to improved perceived performance."
  },
  {
    "type": "mcq",
    "level": "advanced",
    "topic": "Performance Optimization in .NET",
    "question": "How can you enable response compression in an ASP.NET Core application?",
    "options": [
      "It is enabled by default.",
      "By adding the `[ResponseCompression]` attribute to controllers.",
      "By configuring the `ResponseCompressionMiddleware` in the `Configure` method of `Startup.cs`.",
      "By manually compressing the response in each controller action."
    ],
    "correct_answer": "By configuring the `ResponseCompressionMiddleware` in the `Configure` method of `Startup.cs`.",
    "answer": "You need to add and configure the `ResponseCompressionMiddleware` to enable response compression."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Performance Optimization in .NET",
    "question": "What are Tag Helpers in ASP.NET Core and how can they impact rendering performance?",
    "answer": "Tag Helpers are classes that allow you to author server-side code in Razor files using standard HTML tags. They can potentially have a slight performance overhead compared to plain HTML or HTML Helpers as they involve more processing on the server. However, the impact is usually minimal and they often provide a more natural and readable syntax."
  },
  {
    "type": "mcq",
    "level": "advanced",
    "topic": "Performance Optimization in .NET",
    "question": "Compared to HTML Helpers, what is a potential performance consideration of using Tag Helpers?",
    "options": [
      "Tag Helpers generally result in smaller HTML output.",
      "Tag Helpers might have a slightly higher processing overhead on the server.",
      "Tag Helpers are executed on the client-side, improving server performance.",
      "There is no significant performance difference."
    ],
    "correct_answer": "Tag Helpers might have a slightly higher processing overhead on the server.",
    "answer": "The overhead is usually small, but it's a factor to consider in very performance-critical scenarios."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Performance Optimization in .NET",
    "question": "What are some best practices for optimizing the performance of .NET applications running in containers (like Docker)?",
    "answer": "Best practices include: using smaller base images, multi-stage builds to reduce the final image size, optimizing the .NET application itself as discussed earlier, configuring resource limits appropriately for the container, and using health checks and readiness probes for orchestration."
  },
  {
    "type": "mcq",
    "level": "advanced",
    "topic": "Performance Optimization in .NET",
    "question": "Why is using a smaller base image important for containerized .NET applications?",
    "options": [
      "It makes the application code run faster.",
      "It reduces the attack surface and the size of the image, leading to faster deployments and less resource consumption.",
      "It automatically optimizes the .NET runtime.",
      "It simplifies the debugging process."
    ],
    "correct_answer": "It reduces the attack surface and the size of the image, leading to faster deployments and less resource consumption.",
    "answer": "Smaller images are generally more efficient and secure."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Performance Optimization in .NET",
    "question": "What is the role of Just-In-Time (JIT) compilation in .NET performance?",
    "answer": "The JIT compiler translates Intermediate Language (IL) code into native machine code at runtime, just before it's executed. While this allows for platform independence, the compilation process itself takes time. Optimizations performed by the JIT compiler can significantly impact performance."
  },
  {
    "type": "mcq",
    "level": "advanced",
    "topic": "Performance Optimization in .NET",
    "question": "What is Ahead-Of-Time (AOT) compilation in .NET and how does it differ from JIT?",
    "options": [
      "AOT compiles code at runtime, while JIT compiles before runtime.",
      "AOT compiles code to IL, while JIT compiles to native code.",
      "AOT compiles code to native code before the application is executed, while JIT compiles at runtime.",
      "AOT is only used for server-side applications."
    ],
    "correct_answer": "AOT compiles code to native code before the application is executed, while JIT compiles at runtime.",
    "answer": "AOT can improve startup time and reduce runtime overhead but might increase the application size."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Performance Optimization in .NET",
    "question": "When might you consider using Span<T> and Memory<T> in .NET for performance optimization?",
    "answer": "`Span<T>` and `Memory<T>` provide a way to work with contiguous regions of arbitrary memory in a type-safe and efficient manner, avoiding unnecessary allocations and copies. They are particularly useful for high-performance scenarios involving data processing, such as parsing, networking, and image manipulation."
  },
  {
    "type": "mcq",
    "level": "advanced",
    "topic": "Performance Optimization in .NET",
    "question": "What is the primary benefit of using `Span<T>` over traditional array access in performance-critical code?",
    "options": [
      "Automatic memory management.",
      "Ability to resize the memory region dynamically.",
      "Reduced overhead and bounds checking in certain scenarios.",
      "Simplified syntax for array manipulation."
    ],
    "correct_answer": "Reduced overhead and bounds checking in certain scenarios.",
    "answer": "`Span<T>` can offer performance advantages by providing a direct, lightweight view into memory."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Architectural Patterns",
    "question": "What are architectural patterns?",
    "answer": "Architectural patterns are reusable solutions to common problems in software architecture within a specific context. They provide a high-level blueprint for the structure and organization of a software system, defining its components and their relationships."
  },
  {
    "type": "mcq",
    "level": "advanced",
    "topic": "Architectural Patterns",
    "question": "Which of the following is a primary goal of choosing an appropriate architectural pattern?",
    "options": [
      "To write code faster.",
      "To ensure the use of the latest technologies.",
      "To address the system's quality attributes like scalability, maintainability, and security.",
      "To minimize the number of developers needed for the project."
    ],
    "correct_answer": "To address the system's quality attributes like scalability, maintainability, and security.",
    "answer": "Architectural patterns guide the design to meet the desired characteristics of the software system."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Architectural Patterns",
    "question": "Explain the Monolithic architecture pattern.",
    "answer": "A monolithic architecture is a traditional approach where all the components of an application (user interface, business logic, data access) are tightly coupled and deployed as a single unit. While simpler to develop initially, it can become complex to manage, scale, and update as the application grows."
  },
  {
    "type": "mcq",
    "level": "advanced",
    "topic": "Architectural Patterns",
    "question": "What is a key characteristic of a monolithic application?",
    "options": [
      "It consists of independently deployable services.",
      "All components are tightly coupled and deployed as a single unit.",
      "It is highly scalable and resilient.",
      "Different parts of the application can be developed using different technologies."
    ],
    "correct_answer": "All components are tightly coupled and deployed as a single unit.",
    "answer": "Tight coupling and single deployment are defining features of a monolith."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Architectural Patterns",
    "question": "What are the advantages and disadvantages of a Monolithic architecture?",
    "answer": "Advantages include simpler initial development and deployment. Disadvantages include scalability challenges, technology lock-in, difficult maintenance for large applications, and potential for a single point of failure."
  },
  {
    "type": "mcq",
    "level": "advanced",
    "topic": "Architectural Patterns",
    "question": "Which of the following is a common disadvantage of a monolithic architecture?",
    "options": [
      "Easier independent scaling of different components.",
      "Simplified technology diversity.",
      "Increased fault isolation.",
      "Challenges in scaling and maintaining large applications."
    ],
    "correct_answer": "Challenges in scaling and maintaining large applications.",
    "answer": "Monoliths can become unwieldy as they grow."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Architectural Patterns",
    "question": "Explain the Microservices architecture pattern.",
    "answer": "Microservices architecture is an approach where an application is structured as a collection of small, independent services that communicate over a network, often using lightweight protocols like HTTP. Each service focuses on a specific business capability and can be developed, deployed, and scaled independently."
  },
  {
    "type": "mcq",
    "level": "advanced",
    "topic": "Architectural Patterns",
    "question": "What is a key characteristic of a microservices architecture?",
    "options": [
      "Tight coupling between services.",
      "Deployment of the entire application as a single unit.",
      "Independent development, deployment, and scaling of services.",
      "Shared database across all services."
    ],
    "correct_answer": "Independent development, deployment, and scaling of services.",
    "answer": "Autonomy and independence are central to microservices."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Architectural Patterns",
    "question": "What are the advantages and disadvantages of a Microservices architecture?",
    "answer": "Advantages include improved scalability, technology diversity, better fault isolation, and easier maintenance for large applications. Disadvantages include increased complexity in deployment and management, network latency, and challenges in distributed transactions."
  },
  {
    "type": "mcq",
    "level": "advanced",
    "topic": "Architectural Patterns",
    "question": "Which of the following is a common advantage of a microservices architecture?",
    "options": [
      "Simpler initial development.",
      "Reduced operational complexity.",
      "Enhanced scalability and resilience.",
      "Easier management of distributed transactions."
    ],
    "correct_answer": "Enhanced scalability and resilience.",
    "answer": "Microservices are designed for better scaling and fault tolerance."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Architectural Patterns",
    "question": "How do microservices typically communicate with each other?",
    "answer": "Microservices typically communicate using lightweight protocols such as REST over HTTP, gRPC, or message queues (like RabbitMQ or Kafka)."
  },
  {
    "type": "mcq",
    "level": "advanced",
    "topic": "Architectural Patterns",
    "question": "Which communication style is commonly used in microservices architectures?",
    "options": [
      "Direct method calls within the same process.",
      "Shared memory communication.",
      "RESTful APIs over HTTP.",
      "Tight coupling through shared libraries."
    ],
    "correct_answer": "RESTful APIs over HTTP.",
    "answer": "REST is a popular choice for inter-service communication due to its simplicity and widespread support."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Architectural Patterns",
    "question": "Explain the Model-View-Controller (MVC) architectural pattern.",
    "answer": "MVC is a pattern that separates the application into three interconnected parts: the Model (data and business logic), the View (user interface), and the Controller (handles user input and updates the model and view). This separation of concerns improves code organization, testability, and maintainability."
  },
  {
    "type": "mcq",
    "level": "advanced",
    "topic": "Architectural Patterns",
    "question": "In the MVC pattern, which component is responsible for handling user input?",
    "options": [
      "Model",
      "View",
      "Controller",
      "Repository"
    ],
    "correct_answer": "Controller",
    "answer": "The Controller receives and processes user actions."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Architectural Patterns",
    "question": "What are the benefits of using the MVC pattern in web development?",
    "answer": "Benefits include improved separation of concerns, enhanced testability, support for parallel development, and better organization of code for maintainability."
  },
  {
    "type": "mcq",
    "level": "advanced",
    "topic": "Architectural Patterns",
    "question": "Which component in the MVC pattern is responsible for displaying data to the user?",
    "options": [
      "Model",
      "View",
      "Controller",
      "Service"
    ],
    "correct_answer": "View",
    "answer": "The View is responsible for the presentation of the data."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Architectural Patterns",
    "question": "Explain the Model-View-ViewModel (MVVM) architectural pattern.",
    "answer": "MVVM is a pattern commonly used in UI development (like WPF and UWP) that separates the application into three parts: the Model (data), the View (UI), and the ViewModel (an abstraction of the View that exposes data and commands). It uses data binding to enable communication between the View and the ViewModel, reducing code-behind in the View."
  },
  {
    "type": "mcq",
    "level": "advanced",
    "topic": "Architectural Patterns",
    "question": "In the MVVM pattern, what is the role of the ViewModel?",
    "options": [
      "To directly manipulate the UI elements.",
      "To hold the application's data and business logic, and expose it in a way that the View can easily consume.",
      "To handle user input and update the Model.",
      "To define the visual structure of the application."
    ],
    "correct_answer": "To hold the application's data and business logic, and expose it in a way that the View can easily consume.",
    "answer": "The ViewModel acts as an intermediary between the View and the Model."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Architectural Patterns",
    "question": "How does data binding facilitate communication between the View and the ViewModel in the MVVM pattern?",
    "answer": "Data binding allows properties in the View to be directly linked to properties in the ViewModel. When a property in the ViewModel changes, the corresponding UI element in the View is automatically updated, and vice versa, often without requiring manual code to synchronize the two."
  },
  {
    "type": "mcq",
    "level": "advanced",
    "topic": "Architectural Patterns",
    "question": "Which UI framework in .NET heavily utilizes the MVVM pattern?",
    "options": [
      "ASP.NET MVC",
      "ASP.NET Web Forms",
      "WinForms",
      "WPF"
    ],
    "correct_answer": "WPF",
    "answer": "Windows Presentation Foundation (WPF) is a primary example of a .NET UI framework that embraces MVVM."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Architectural Patterns",
    "question": "Explain the Command Query Responsibility Segregation (CQRS) architectural pattern.",
    "answer": "CQRS separates the read and write operations for a data store. Commands are actions that modify the state, while Queries are requests for information that do not change the state. This separation can lead to better performance, scalability, and security, especially for complex applications."
  },
  {
    "type": "mcq",
    "level": "advanced",
    "topic": "Architectural Patterns",
    "question": "What is the primary goal of the CQRS pattern?",
    "options": [
      "To simplify database design.",
      "To improve the performance of write operations.",
      "To separate read and write operations for better scalability and maintainability.",
      "To enforce a strict layered architecture."
    ],
    "correct_answer": "To separate read and write operations for better scalability and maintainability.",
    "answer": "The segregation of commands and queries is the core principle of CQRS."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Architectural Patterns",
    "question": "What are the key components typically involved in a CQRS implementation?",
    "answer": "Key components include Commands (requests to perform an action), Queries (requests to retrieve data), Command Handlers (responsible for executing commands), Query Handlers (responsible for retrieving data), and potentially separate Read and Write Data Stores."
  },
  {
    "type": "mcq",
    "level": "advanced",
    "topic": "Architectural Patterns",
    "question": "In a CQRS architecture, which component is responsible for executing commands and modifying the system's state?",
    "options": [
      "Query Handler",
      "Command",
      "Query",
      "Command Handler"
    ],
    "correct_answer": "Command Handler",
    "answer": "Command Handlers contain the business logic for state changes."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Architectural Patterns",
    "question": "What is eventual consistency and how does it relate to the CQRS pattern?",
    "answer": "Eventual consistency means that the system's data will become consistent over time, but there might be a delay between a write operation and when the updated data is reflected in the read store. This is often a characteristic of CQRS architectures, especially when using separate read and write databases, as it allows for optimization of each store independently."
  },
  {
    "type": "mcq",
    "level": "advanced",
    "topic": "Architectural Patterns",
    "question": "Which of the following is often a trade-off when implementing the CQRS pattern?",
    "options": [
      "Increased security.",
      "Reduced complexity.",
      "Eventual consistency.",
      "Improved performance for both reads and writes."
    ],
    "correct_answer": "Eventual consistency.",
    "answer": "The separation of read and write models can lead to eventual consistency."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Architectural Patterns",
    "question": "Explain the Layered architecture pattern.",
    "answer": "The Layered architecture organizes the system into a hierarchy of layers, where each layer performs a specific role. Common layers include presentation, business logic, and data access. Communication typically flows from higher layers to lower layers, promoting separation of concerns."
  },
  {
    "type": "mcq",
    "level": "advanced",
    "topic": "Architectural Patterns",
    "question": "In a typical layered architecture, which layer would be responsible for interacting with the database?",
    "options": [
      "Presentation Layer",
      "Business Logic Layer",
      "Data Access Layer",
      "Service Layer"
    ],
    "correct_answer": "Data Access Layer",
    "answer": "The Data Access Layer handles the communication with the data store."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Architectural Patterns",
    "question": "What are the benefits of using a Layered architecture?",
    "answer": "Benefits include clear separation of concerns, easier maintenance, and improved testability as each layer can be tested independently."
  },
  {
    "type": "mcq",
    "level": "advanced",
    "topic": "Architectural Patterns",
    "question": "A potential drawback of a strict layered architecture is that:",
    "options": [
      "It enforces strong coupling between layers.",
      "Changes in one layer never affect other layers.",
      "It can lead to unnecessary layers for simple applications.",
      "It makes testing more complex."
    ],
    "correct_answer": "It can lead to unnecessary layers for simple applications.",
    "answer": "For simpler systems, the strict separation might introduce unnecessary overhead."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Architectural Patterns",
    "question": "Explain the Client-Server architecture pattern.",
    "answer": "The Client-Server architecture involves two main components: a server that provides resources or services, and multiple clients that request and consume those resources or services. This is a common pattern for many applications, including web applications where the browser is the client and the web server is the server."
  },
  {
    "type": "mcq",
    "level": "advanced",
    "topic": "Architectural Patterns",
    "question": "In a Client-Server architecture, which component is responsible for providing the requested resources?",
    "options": [
      "Client",
      "Network",
      "Firewall",
      "Server"
    ],
    "correct_answer": "Server",
    "answer": "The Server's role is to serve the clients' requests."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Architectural Patterns",
    "question": "What are some advantages of the Client-Server architecture?",
    "answer": "Advantages include centralized resource management, easier security control on the server side, and the ability for multiple clients to access the same resources."
  },
  {
    "type": "mcq",
    "level": "advanced",
    "topic": "Architectural Patterns",
    "question": "A potential bottleneck in a Client-Server architecture can occur at the:",
    "options": [
      "Client side during request processing.",
      "Network level due to high traffic.",
      "Server side if it's overwhelmed with requests.",
      "All of the above."
    ],
    "correct_answer": "Server side if it's overwhelmed with requests.",
    "answer": "The server can become a bottleneck if not properly scaled."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Architectural Patterns",
    "question": "Explain the Publish-Subscribe (Pub-Sub) architectural pattern.",
    "answer": "Pub-Sub is a messaging pattern where senders of messages (publishers) do not send their messages directly to specific receivers (subscribers). Instead, they categorize messages into topics or channels, and subscribers register their interest in specific topics and receive messages published to those topics. This promotes loose coupling between components."
  },
  {
    "type": "mcq",
    "level": "advanced",
    "topic": "Architectural Patterns",
    "question": "In the Pub-Sub pattern, what is responsible for routing messages from publishers to subscribers?",
    "options": [
      "Publisher",
      "Subscriber",
      "Message Broker",
      "Network"
    ],
    "correct_answer": "Message Broker",
    "answer": "A Message Broker (or event bus) typically handles the routing of messages."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Architectural Patterns",
    "question": "What are the benefits of using the Publish-Subscribe pattern?",
    "answer": "Benefits include loose coupling between publishers and subscribers, improved scalability, and better responsiveness as publishers don't need to wait for subscribers to process messages."
  },
  {
    "type": "mcq",
    "level": "advanced",
    "topic": "Architectural Patterns",
    "question": "Which of the following is an example of a technology that implements the Pub-Sub pattern?",
    "options": [
      "HTTP",
      "SMTP",
      "FTP",
      "Kafka"
    ],
    "correct_answer": "Kafka",
    "answer": "Apache Kafka, RabbitMQ, and Azure Service Bus are examples of message brokers used in Pub-Sub architectures."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Architectural Patterns",
    "question": "Explain the concept of a Service-Oriented Architecture (SOA).",
    "answer": "SOA is an architectural style that structures an application as a collection of loosely coupled services that communicate with each other, often using standard communication protocols (like SOAP or REST). Services are typically discoverable and reusable across different parts of the application or even across different applications."
  },
  {
    "type": "mcq",
    "level": "advanced",
    "topic": "Architectural Patterns",
    "question": "What is a key characteristic of a Service-Oriented Architecture (SOA)?",
    "options": [
      "Tight coupling between services.",
      "Services are typically not reusable.",
      "Services are loosely coupled and communicate using standard protocols.",
      "All services share the same database."
    ],
    "correct_answer": "Services are loosely coupled and communicate using standard protocols.",
    "answer": "Loose coupling and interoperability are defining features of SOA."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Architectural Patterns",
    "question": "How does SOA relate to Microservices?",
    "answer": "Microservices can be seen as a more granular and focused evolution of SOA. While both emphasize services, microservices typically have a smaller scope, are more independently deployable, and often favor lightweight protocols like REST over heavier protocols like SOAP that were common in traditional SOA."
  },
  {
    "type": "mcq",
    "level": "advanced",
    "topic": "Architectural Patterns",
    "question": "Compared to traditional SOA, microservices typically emphasize:",
    "options": [
      "Heavier communication protocols like SOAP.",
      "Larger, more complex services.",
      "Greater independence and smaller service scope.",
      "Shared databases across services."
    ],
    "correct_answer": "Greater independence and smaller service scope.",
    "answer": "Microservices are known for their fine-grained nature and autonomy."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Architectural Patterns",
    "question": "What is the Event-Driven Architecture pattern?",
    "answer": "Event-Driven Architecture (EDA) is an architectural pattern where the application's behavior is driven by events. Components react to events that occur in the system. This pattern often involves publishers emitting events and subscribers consuming those events asynchronously, leading to highly decoupled and scalable systems."
  },
  {
    "type": "mcq",
    "level": "advanced",
    "topic": "Architectural Patterns",
    "question": "In an Event-Driven Architecture, how do components typically communicate?",
    "options": [
      "Through direct synchronous calls.",
      "By sharing a common database.",
      "Through the exchange of events.",
      "Using tightly coupled interfaces."
    ],
    "correct_answer": "Through the exchange of events.",
    "answer": "Events are the primary means of communication in EDA."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Architectural Patterns",
    "question": "What are the benefits of using an Event-Driven Architecture?",
    "answer": "Benefits include high scalability, loose coupling, better fault tolerance (as services can operate independently), and improved responsiveness."
  },
  {
    "type": "mcq",
    "level": "advanced",
    "topic": "Architectural Patterns",
    "question": "Which of the following is a key concept in Event-Driven Architecture?",
    "options": [
      "Centralized synchronous processing.",
      "Tight dependencies between services.",
      "Asynchronous communication through events.",
      "Shared state management."
    ],
    "correct_answer": "Asynchronous communication through events.",
    "answer": "Asynchrony is a fundamental aspect of EDA."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Testing Strategies beyond Unit Testing",
    "question": "Beyond unit testing, what other types of testing are important in a comprehensive .NET testing strategy?",
    "answer": "Important testing types beyond unit testing include integration testing, end-to-end testing, API testing, performance testing, security testing, user acceptance testing (UAT), and exploratory testing."
  },
  {
    "type": "mcq",
    "level": "advanced",
    "topic": "Testing Strategies beyond Unit Testing",
    "question": "Which type of testing focuses on verifying the interactions between different parts of the application or with external systems?",
    "options": [
      "Unit Testing",
      "Integration Testing",
      "End-to-End Testing",
      "Performance Testing"
    ],
    "correct_answer": "Integration Testing",
    "answer": "Integration testing ensures that different components work together correctly."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Testing Strategies beyond Unit Testing",
    "question": "Explain the purpose of integration testing in a .NET application.",
    "answer": "Integration testing verifies the communication and data flow between different modules or services within the application, or between the application and external dependencies like databases, APIs, or file systems. It ensures that these components work together as expected."
  },
  {
    "type": "mcq",
    "level": "advanced",
    "topic": "Testing Strategies beyond Unit Testing",
    "question": "Which of the following scenarios would be best suited for integration testing?",
    "options": [
      "Testing if a single method returns the correct value.",
      "Testing the interaction between a controller and a service layer.",
      "Testing the entire user workflow from login to logout.",
      "Testing the responsiveness of the application under heavy load."
    ],
    "correct_answer": "Testing the interaction between a controller and a service layer.",
    "answer": "Integration testing focuses on the connections between different parts of the application."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Testing Strategies beyond Unit Testing",
    "question": "How can you perform integration testing in a .NET Core application that interacts with a database?",
    "answer": "You can use in-memory databases (like SQLite in-memory mode or `Microsoft.EntityFrameworkCore.InMemory`) for faster tests, or you can set up a test database (e.g., using Docker) with a known state. Frameworks like xUnit or NUnit can be used to write and run the tests, and you might use dependency injection to swap out real dependencies with test doubles or mocks where necessary."
  },
  {
    "type": "mcq",
    "level": "advanced",
    "topic": "Testing Strategies beyond Unit Testing",
    "question": "Which of the following is a common approach for integration testing database interactions in .NET Core?",
    "options": [
      "Using mocks for the database context.",
      "Testing against a production database.",
      "Using an in-memory database.",
      "Skipping database interactions in tests."
    ],
    "correct_answer": "Using an in-memory database.",
    "answer": "In-memory databases provide a lightweight and isolated environment for testing database interactions."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Testing Strategies beyond Unit Testing",
    "question": "Explain the purpose of end-to-end (E2E) testing.",
    "answer": "End-to-end testing simulates real user scenarios by testing the entire application flow from the user's perspective. It verifies that all components of the system, including the UI, backend services, and data storage, work together correctly to achieve a specific business goal."
  },
  {
    "type": "mcq",
    "level": "advanced",
    "topic": "Testing Strategies beyond Unit Testing",
    "question": "Which type of testing would be most suitable for verifying a complete user journey, such as placing an order in an e-commerce application?",
    "options": [
      "Unit Testing",
      "Integration Testing",
      "End-to-End Testing",
      "API Testing"
    ],
    "correct_answer": "End-to-End Testing",
    "answer": "E2E testing covers the entire user workflow."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Testing Strategies beyond Unit Testing",
    "question": "What are some tools or frameworks you might use for end-to-end testing a .NET web application?",
    "answer": "Tools like Selenium WebDriver, Playwright, Cypress, and Puppeteer can be used to automate browser interactions and perform E2E tests for web applications. For .NET-specific applications, you might also use the `TestServer` class in ASP.NET Core to run tests against a hosted application in memory."
  },
  {
    "type": "mcq",
    "level": "advanced",
    "topic": "Testing Strategies beyond Unit Testing",
    "question": "Which of the following tools is commonly used for automating browser interactions in end-to-end testing?",
    "options": [
      "xUnit",
      "Moq",
      "Selenium WebDriver",
      "NSubstitute"
    ],
    "correct_answer": "Selenium WebDriver",
    "answer": "Selenium WebDriver is a popular choice for browser automation."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Testing Strategies beyond Unit Testing",
    "question": "Explain the purpose of API testing.",
    "answer": "API testing focuses on verifying the functionality, reliability, performance, and security of APIs (Application Programming Interfaces). It involves sending requests to API endpoints and validating the responses, including status codes, data formats, and data content, without necessarily interacting with the user interface."
  },
  {
    "type": "mcq",
    "level": "advanced",
    "topic": "Testing Strategies beyond Unit Testing",
    "question": "Which type of testing would you use to ensure that your Web API endpoints return the correct data and status codes?",
    "options": [
      "Unit Testing",
      "Integration Testing",
      "End-to-End Testing",
      "API Testing"
    ],
    "correct_answer": "API Testing",
    "answer": "API testing is specifically designed for testing API endpoints."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Testing Strategies beyond Unit Testing",
    "question": "What are some tools you might use for API testing in a .NET environment?",
    "answer": "Tools like Postman, RestSharp (a .NET library), Swagger/OpenAPI specifications along with tools like Swashbuckle.AspNetCore for generating client libraries, and specialized API testing frameworks like Karate DSL or Pact for contract testing can be used."
  },
  {
    "type": "mcq",
    "level": "advanced",
    "topic": "Testing Strategies beyond Unit Testing",
    "question": "Which of the following is a popular tool for manually and automatically testing RESTful APIs?",
    "options": [
      "MSTest",
      "NUnit",
      "Postman",
      "Moq"
    ],
    "correct_answer": "Postman",
    "answer": "Postman is widely used for API testing."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Testing Strategies beyond Unit Testing",
    "question": "Explain the purpose of performance testing.",
    "answer": "Performance testing evaluates the responsiveness, stability, and scalability of an application under various load conditions. It aims to identify bottlenecks, measure response times, and ensure the application can handle the expected user load and traffic."
  },
  {
    "type": "mcq",
    "level": "advanced",
    "topic": "Testing Strategies beyond Unit Testing",
    "question": "Which type of testing focuses on evaluating the application's behavior under heavy load?",
    "options": [
      "Unit Testing",
      "Integration Testing",
      "Performance Testing",
      "Security Testing"
    ],
    "correct_answer": "Performance Testing",
    "answer": "Performance testing assesses the application's capacity and responsiveness."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Testing Strategies beyond Unit Testing",
    "question": "What are some common types of performance tests?",
    "answer": "Common types include load testing (simulating expected user load), stress testing (pushing the system beyond its limits), soak testing (testing for memory leaks and stability over a prolonged period), and spike testing (evaluating the system's reaction to sudden surges in load)."
  },
  {
    "type": "mcq",
    "level": "advanced",
    "topic": "Testing Strategies beyond Unit Testing",
    "question": "Which type of performance test aims to identify the breaking point of an application by gradually increasing the load?",
    "options": [
      "Load Testing",
      "Stress Testing",
      "Soak Testing",
      "Spike Testing"
    ],
    "correct_answer": "Stress Testing",
    "answer": "Stress testing pushes the system to its limits to find its breaking point."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Testing Strategies beyond Unit Testing",
    "question": "What are some tools you might use for performance testing a .NET application?",
    "answer": "Tools like Apache JMeter, LoadRunner, k6, and for ASP.NET Core, you can use `dotnet-counters` and `dotnet-trace` for profiling and performance analysis. Azure Load Testing is also a cloud-based option."
  },
  {
    "type": "mcq",
    "level": "advanced",
    "topic": "Testing Strategies beyond Unit Testing",
    "question": "Which of the following is a popular open-source tool for performance testing web applications?",
    "options": [
      "NUnit",
      "Moq",
      "Apache JMeter",
      "Selenium IDE"
    ],
    "correct_answer": "Apache JMeter",
    "answer": "Apache JMeter is a widely used tool for performance testing."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Testing Strategies beyond Unit Testing",
    "question": "Explain the purpose of security testing.",
    "answer": "Security testing aims to identify vulnerabilities and weaknesses in an application that could be exploited by attackers. It ensures the confidentiality, integrity, and availability of the application and its data."
  },
  {
    "type": "mcq",
    "level": "advanced",
    "topic": "Testing Strategies beyond Unit Testing",
    "question": "Which type of testing focuses on identifying potential security flaws in an application?",
    "options": [
      "Unit Testing",
      "Integration Testing",
      "Performance Testing",
      "Security Testing"
    ],
    "correct_answer": "Security Testing",
    "answer": "Security testing specifically targets vulnerabilities."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Testing Strategies beyond Unit Testing",
    "question": "What are some common types of security tests?",
    "answer": "Common types include vulnerability scanning, penetration testing, static code analysis for security flaws, and security audits."
  },
  {
    "type": "mcq",
    "level": "advanced",
    "topic": "Testing Strategies beyond Unit Testing",
    "question": "What is penetration testing?",
    "options": [
      "Automated scanning of code for syntax errors.",
      "Simulating real-world attacks to identify vulnerabilities.",
      "Testing the application's performance under extreme load.",
      "Verifying the application's functionality against user requirements."
    ],
    "correct_answer": "Simulating real-world attacks to identify vulnerabilities.",
    "answer": "Penetration testing involves actively trying to exploit vulnerabilities."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Testing Strategies beyond Unit Testing",
    "question": "What are some tools or practices you might use for security testing a .NET application?",
    "answer": "Tools include static analysis tools like SonarQube or Veracode, vulnerability scanners like OWASP ZAP or Nessus, and following secure coding practices and security guidelines like the OWASP Top Ten."
  },
  {
    "type": "mcq",
    "level": "advanced",
    "topic": "Testing Strategies beyond Unit Testing",
    "question": "Which of the following is a well-known list of common web application security risks?",
    "options": [
      "SOLID Principles",
      "DRY Principle",
      "OWASP Top Ten",
      "KISS Principle"
    ],
    "correct_answer": "OWASP Top Ten",
    "answer": "The OWASP Top Ten is a widely recognized list of critical web application security risks."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Testing Strategies beyond Unit Testing",
    "question": "Explain the purpose of User Acceptance Testing (UAT).",
    "answer": "User Acceptance Testing is performed by end-users to validate that the application meets their needs and works as expected in a real-world scenario. It's typically conducted in a staging or pre-production environment and focuses on business requirements and usability."
  },
  {
    "type": "mcq",
    "level": "advanced",
    "topic": "Testing Strategies beyond Unit Testing",
    "question": "Who typically performs User Acceptance Testing (UAT)?",
    "options": [
      "Developers",
      "Testers",
      "End-users or stakeholders",
      "Project managers"
    ],
    "correct_answer": "End-users or stakeholders",
    "answer": "UAT is done by the people who will actually use the application."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Testing Strategies beyond Unit Testing",
    "question": "What is exploratory testing?",
    "answer": "Exploratory testing is a less structured approach to testing where testers simultaneously learn about the application, design tests, and execute them. It's often used when requirements are unclear or to uncover unexpected issues."
  },
  {
    "type": "mcq",
    "level": "advanced",
    "topic": "Testing Strategies beyond Unit Testing",
    "question": "Which of the following best describes exploratory testing?",
    "options": [
      "Following a predefined test plan meticulously.",
      "Automating repetitive test cases.",
      "Simultaneously learning, designing, and executing tests.",
      "Testing individual components in isolation."
    ],
    "correct_answer": "Simultaneously learning, designing, and executing tests.",
    "answer": "Exploratory testing is about discovery and improvisation."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Testing Strategies beyond Unit Testing",
    "question": "What are mutation tests and how do they help improve the quality of your test suite?",
    "answer": "Mutation testing involves introducing small changes (mutations) into the source code and then running your test suite. If the tests fail as a result of the mutation, it indicates that the tests are effective in catching that type of error. If the tests pass despite the mutation, it suggests that your test suite might be missing coverage for that specific scenario."
  },
  {
    "type": "mcq",
    "level": "advanced",
    "topic": "Testing Strategies beyond Unit Testing",
    "question": "What is the primary goal of mutation testing?",
    "options": [
      "To find bugs in the application code.",
      "To measure the performance of the application.",
      "To evaluate the effectiveness of the test suite.",
      "To assess the security vulnerabilities of the application."
    ],
    "correct_answer": "To evaluate the effectiveness of the test suite.",
    "answer": "Mutation testing helps ensure that your tests are actually testing what you think they are."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Testing Strategies beyond Unit Testing",
    "question": "Explain the concept of test-driven development (TDD) and its relationship to different levels of testing.",
    "answer": "TDD is a development approach where you write tests before you write the actual code. It typically starts with writing a failing unit test for a small piece of functionality, then writing the minimum code to make the test pass, and finally refactoring the code. While TDD primarily focuses on unit tests, the principles can also influence integration and even higher-level tests by driving the design and ensuring testability from the beginning."
  },
  {
    "type": "mcq",
    "level": "advanced",
    "topic": "Testing Strategies beyond Unit Testing",
    "question": "In Test-Driven Development (TDD), what is the first step in the cycle?",
    "options": [
      "Write the code.",
      "Refactor the code.",
      "Write a failing test.",
      "Make the test pass."
    ],
    "correct_answer": "Write a failing test.",
    "answer": "The TDD cycle starts with writing a test that should initially fail."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Testing Strategies beyond Unit Testing",
    "question": "What are test doubles and why are they used in different types of testing?",
    "answer": "Test doubles are objects used in place of real dependencies in tests. Common types include mocks (pre-programmed expectations), stubs (provide canned responses), fakes (simplified implementations), spies (record interactions), and dummies (placeholders). They are used to isolate the code under test, control external behavior, and make tests faster and more reliable."
  },
  {
    "type": "mcq",
    "level": "advanced",
    "topic": "Testing Strategies beyond Unit Testing",
    "question": "Which type of test double is characterized by pre-programmed expectations that are verified during the test?",
    "options": [
      "Stub",
      "Fake",
      "Mock",
      "Spy"
    ],
    "correct_answer": "Mock",
    "answer": "Mocks are used to verify interactions with dependencies."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Testing Strategies beyond Unit Testing",
    "question": "How does contract testing help in a microservices architecture?",
    "answer": "Contract testing verifies the agreement (contract) between a service provider and its consumers. It ensures that the provider's API meets the expectations of its clients. This is crucial in microservices where services are developed and deployed independently, preventing breaking changes that could affect consumers."
  },
  {
    "type": "mcq",
    "level": "advanced",
    "topic": "Testing Strategies beyond Unit Testing",
    "question": "What is the primary benefit of contract testing in a microservices environment?",
    "options": [
      "Improving the performance of individual services.",
      "Ensuring that service providers meet the expectations of their consumers.",
      "Enhancing the security of inter-service communication.",
      "Simplifying the deployment process for microservices."
    ],
    "correct_answer": "Ensuring that service providers meet the expectations of their consumers.",
    "answer": "Contract testing focuses on the agreement between services."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Testing Strategies beyond Unit Testing",
    "question": "What are accessibility tests and why are they important?",
    "answer": "Accessibility tests ensure that an application is usable by people with disabilities. This includes testing for compliance with accessibility standards (like WCAG) and verifying that the application is navigable and understandable by users with visual, auditory, motor, or cognitive impairments. Accessibility is important for inclusivity and sometimes a legal requirement."
  },
  {
    "type": "mcq",
    "level": "advanced",
    "topic": "Testing Strategies beyond Unit Testing",
    "question": "Which of the following is a key aspect of accessibility testing?",
    "options": [
      "Testing the application on the latest operating systems.",
      "Ensuring the application is usable by people with disabilities.",
      "Evaluating the application's performance on low-bandwidth connections.",
      "Verifying the application's compliance with security regulations."
    ],
    "correct_answer": "Ensuring the application is usable by people with disabilities.",
    "answer": "Accessibility testing focuses on making the application inclusive."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Testing Strategies beyond Unit Testing",
    "question": "What are the benefits of having a well-defined and comprehensive testing strategy that includes different types of tests?",
    "answer": "A comprehensive testing strategy leads to higher quality software with fewer bugs, improved reliability, better performance, enhanced security, and increased user satisfaction. It also reduces the risk of costly failures in production and makes the application easier to maintain and evolve."
  },
  {
    "type": "mcq",
    "level": "advanced",
    "topic": "Testing Strategies beyond Unit Testing",
    "question": "A comprehensive testing strategy aims to:",
    "options": [
      "Replace manual testing entirely with automation.",
      "Focus solely on unit tests as they are the most important.",
      "Ensure different aspects of the application are tested at various levels, providing confidence in its quality.",
      "Minimize the time and resources spent on testing."
    ],
    "correct_answer": "Ensure different aspects of the application are tested at various levels, providing confidence in its quality.",
    "answer": "A good strategy uses a combination of testing types to cover all bases."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Containerization and Orchestration (.NET, Docker, Kubernetes)",
    "question": "What is containerization and what are its benefits in the context of .NET application deployment?",
    "answer": "Containerization is the process of packaging an application and its dependencies into a self-contained unit called a container. Benefits for .NET applications include consistent deployment across different environments, isolation of applications, improved resource utilization, and simplified scaling and management."
  },
  {
    "type": "mcq",
    "level": "advanced",
    "topic": "Containerization and Orchestration (.NET, Docker, Kubernetes)",
    "question": "Which of the following is a key benefit of using containers for deploying .NET applications?",
    "options": [
      "Directly running .NET code on any operating system without changes.",
      "Ensuring that the application has all its required dependencies packaged together.",
      "Automatically optimizing the performance of the .NET runtime.",
      "Providing a graphical user interface for server management."
    ],
    "correct_answer": "Ensuring that the application has all its required dependencies packaged together.",
    "answer": "Containers bundle the application and its dependencies, ensuring consistent execution."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Containerization and Orchestration (.NET, Docker, Kubernetes)",
    "question": "What is Docker and how does it relate to containerization?",
    "answer": "Docker is a popular platform for building, shipping, and running applications using containers. It provides tools and an ecosystem for creating and managing container images and containers."
  },
  {
    "type": "mcq",
    "level": "advanced",
    "topic": "Containerization and Orchestration (.NET, Docker, Kubernetes)",
    "question": "Which of the following is a core concept in Docker?",
    "options": [
      "Virtual Machine",
      "Hypervisor",
      "Container Image",
      "Operating System Kernel"
    ],
    "correct_answer": "Container Image",
    "answer": "A container image is a lightweight, standalone, executable package of software that includes everything needed to run an application."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Containerization and Orchestration (.NET, Docker, Kubernetes)",
    "question": "Explain the difference between a Docker image and a Docker container.",
    "answer": "A Docker image is a read-only template that contains the instructions for creating a container. A Docker container is a runnable instance of an image. You can have multiple running containers from the same image."
  },
  {
    "type": "mcq",
    "level": "advanced",
    "topic": "Containerization and Orchestration (.NET, Docker, Kubernetes)",
    "question": "What is a Dockerfile?",
    "options": [
      "A configuration file for Docker networking.",
      "A text file that contains instructions for building a Docker image.",
      "A tool for managing multiple Docker containers.",
      "A repository for storing Docker images."
    ],
    "correct_answer": "A text file that contains instructions for building a Docker image.",
    "answer": "The Dockerfile defines the steps to create a container image."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Containerization and Orchestration (.NET, Docker, Kubernetes)",
    "question": "What are some common instructions you might find in a Dockerfile for a .NET application?",
    "answer": "Common instructions include `FROM` (specifying the base image), `WORKDIR` (setting the working directory), `COPY` (copying files and directories), `RUN` (executing commands), `EXPOSE` (declaring network ports), and `ENTRYPOINT` or `CMD` (specifying the command to run when the container starts)."
  },
  {
    "type": "mcq",
    "level": "advanced",
    "topic": "Containerization and Orchestration (.NET, Docker, Kubernetes)",
    "question": "Which Dockerfile instruction is used to specify the base operating system and runtime for your .NET application?",
    "options": [
      "RUN",
      "WORKDIR",
      "COPY",
      "FROM"
    ],
    "correct_answer": "FROM",
    "answer": "The `FROM` instruction sets the base image for subsequent instructions."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Containerization and Orchestration (.NET, Docker, Kubernetes)",
    "question": "How do you build a Docker image from a Dockerfile?",
    "answer": "You use the `docker build` command, specifying the path to the Dockerfile and optionally a tag for the image (e.g., `docker build -t my-dotnet-app .`)."
  },
  {
    "type": "mcq",
    "level": "advanced",
    "topic": "Containerization and Orchestration (.NET, Docker, Kubernetes)",
    "question": "What command is used to run a Docker container from an image?",
    "options": [
      "docker build",
      "docker run",
      "docker push",
      "docker pull"
    ],
    "correct_answer": "docker run",
    "answer": "The `docker run` command creates and starts a container."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Containerization and Orchestration (.NET, Docker, Kubernetes)",
    "question": "What is Docker Compose and when would you use it?",
    "answer": "Docker Compose is a tool for defining and running multi-container Docker applications. You use a `docker-compose.yml` file to configure all the application's services (e.g., web application, database, cache) and then start them all with a single command (`docker-compose up`). It's useful for development, testing, and staging environments."
  },
  {
    "type": "mcq",
    "level": "advanced",
    "topic": "Containerization and Orchestration (.NET, Docker, Kubernetes)",
    "question": "Which file is used to define multi-container applications with Docker Compose?",
    "options": [
      "Dockerfile",
      "docker-compose.yml",
      "Kubernetes.yaml",
      "container.config"
    ],
    "correct_answer": "docker-compose.yml",
    "answer": "The `docker-compose.yml` file specifies the services, networks, and volumes for the application."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Containerization and Orchestration (.NET, Docker, Kubernetes)",
    "question": "How do you manage environment variables and configuration for your .NET application running in a Docker container?",
    "answer": "You can use Docker environment variables (set via the `ENV` instruction in the Dockerfile or the `-e` flag with `docker run`), configuration files mounted as volumes, or external configuration management tools."
  },
  {
    "type": "mcq",
    "level": "advanced",
    "topic": "Containerization and Orchestration (.NET, Docker, Kubernetes)",
    "question": "How can you expose a port from a Docker container to the host machine?",
    "options": [
      "Using the `INTERNAL_PORT` instruction in the Dockerfile.",
      "By default, all ports are exposed.",
      "Using the `-p` flag with the `docker run` command or the `ports` section in `docker-compose.yml`.",
      "By configuring the host machine's firewall."
    ],
    "correct_answer": "Using the `-p` flag with the `docker run` command or the `ports` section in `docker-compose.yml`.",
    "answer": "Port mapping allows access to services running inside the container."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Containerization and Orchestration (.NET, Docker, Kubernetes)",
    "question": "What are Docker volumes and why are they important for stateful applications like databases?",
    "answer": "Docker volumes provide a way to persist data generated by and used by Docker containers. Without volumes, data within a container is ephemeral and will be lost when the container is stopped or deleted. Volumes are crucial for stateful applications to ensure data durability."
  },
  {
    "type": "mcq",
    "level": "advanced",
    "topic": "Containerization and Orchestration (.NET, Docker, Kubernetes)",
    "question": "What is the purpose of Docker volumes?",
    "options": [
      "To define the network configuration for containers.",
      "To persist data beyond the lifecycle of a container.",
      "To specify resource limits for containers.",
      "To manage the logging of container activity."
    ],
    "correct_answer": "To persist data beyond the lifecycle of a container.",
    "answer": "Volumes ensure data persistence."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Containerization and Orchestration (.NET, Docker, Kubernetes)",
    "question": "What is Kubernetes and what problem does it solve in managing containerized applications?",
    "answer": "Kubernetes (also known as K8s) is an open-source container orchestration platform that automates the deployment, scaling, and management of containerized applications. It solves the complexities of managing a large number of containers across multiple hosts, providing features like automated rollouts and rollbacks, self-healing, and service discovery."
  },
  {
    "type": "mcq",
    "level": "advanced",
    "topic": "Containerization and Orchestration (.NET, Docker, Kubernetes)",
    "question": "Which of the following is a core concept in Kubernetes?",
    "options": [
      "Docker Image",
      "Docker Compose File",
      "Pod",
      "Dockerfile"
    ],
    "correct_answer": "Pod",
    "answer": "A Pod is the smallest deployable unit in Kubernetes and represents a single instance of a running process in a cluster."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Containerization and Orchestration (.NET, Docker, Kubernetes)",
    "question": "What is a Kubernetes Pod?",
    "answer": "A Pod is the smallest deployable unit in Kubernetes, which can contain one or more containers that are tightly coupled and share resources like network and storage. It represents a single instance of a running application."
  },
  {
    "type": "mcq",
    "level": "advanced",
    "topic": "Containerization and Orchestration (.NET, Docker, Kubernetes)",
    "question": "How do you typically define and manage Pods in Kubernetes?",
    "options": [
      "Using the `docker run` command.",
      "Directly on the Kubernetes nodes.",
      "Using YAML or JSON manifest files.",
      "Through the Docker Compose CLI."
    ],
    "correct_answer": "Using YAML or JSON manifest files.",
    "answer": "Kubernetes objects are typically defined using declarative configuration files."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Containerization and Orchestration (.NET, Docker, Kubernetes)",
    "question": "What is a Kubernetes Deployment?",
    "answer": "A Kubernetes Deployment is a higher-level abstraction that manages a set of identical Pods. It provides declarative updates for Pods and ReplicaSets, enabling features like rolling updates and rollbacks."
  },
  {
    "type": "mcq",
    "level": "advanced",
    "topic": "Containerization and Orchestration (.NET, Docker, Kubernetes)",
    "question": "What is the primary purpose of a Kubernetes Deployment?",
    "options": [
      "To define the network routing rules for Pods.",
      "To manage the lifecycle and scaling of a set of identical Pods.",
      "To define the storage volumes available to Pods.",
      "To configure the security context for containers."
    ],
    "correct_answer": "To manage the lifecycle and scaling of a set of identical Pods.",
    "answer": "Deployments ensure the desired number of Pod replicas are running and provide update strategies."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Containerization and Orchestration (.NET, Docker, Kubernetes)",
    "question": "What is a Kubernetes Service?",
    "answer": "A Kubernetes Service provides a stable IP address and DNS name to access a set of Pods, providing load balancing and service discovery within the cluster. It abstracts away the individual Pod IPs, which can be ephemeral."
  },
  {
    "type": "mcq",
    "level": "advanced",
    "topic": "Containerization and Orchestration (.NET, Docker, Kubernetes)",
    "question": "How do clients typically access applications running in Kubernetes Pods?",
    "options": [
      "Directly using the Pod's IP address.",
      "Through a Kubernetes Service.",
      "Using the Docker host's IP address and exposed port.",
      "By SSHing into the Kubernetes nodes."
    ],
    "correct_answer": "Through a Kubernetes Service.",
    "answer": "Services provide a stable endpoint for accessing Pods."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Containerization and Orchestration (.NET, Docker, Kubernetes)",
    "question": "What are the different types of Kubernetes Services?",
    "answer": "Common service types include ClusterIP (internal IP within the cluster), NodePort (exposes the service on each Node's IP at a static port), LoadBalancer (provisions an external load balancer), and ExternalName (maps a service to a DNS name)."
  },
  {
    "type": "mcq",
    "level": "advanced",
    "topic": "Containerization and Orchestration (.NET, Docker, Kubernetes)",
    "question": "Which Kubernetes Service type exposes the service on each Node's IP at a static port?",
    "options": [
      "ClusterIP",
      "LoadBalancer",
      "ExternalName",
      "NodePort"
    ],
    "correct_answer": "NodePort",
    "answer": "NodePort makes the service accessible on each node's IP and a specific port."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Containerization and Orchestration (.NET, Docker, Kubernetes)",
    "question": "What is `kubectl`?",
    "answer": "`kubectl` is the command-line tool for interacting with a Kubernetes cluster. It allows you to run commands against Kubernetes clusters, including deploying applications, inspecting resources, and viewing logs."
  },
  {
    "type": "mcq",
    "level": "advanced",
    "topic": "Containerization and Orchestration (.NET, Docker, Kubernetes)",
    "question": "Which command is used to apply a Kubernetes manifest file (e.g., a YAML file) to the cluster?",
    "options": [
      "kubectl run",
      "kubectl create",
      "kubectl apply -f",
      "kubectl get"
    ],
    "correct_answer": "kubectl apply -f",
    "answer": "`kubectl apply -f <filename.yaml>` is used to apply the configuration defined in the manifest file."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Containerization and Orchestration (.NET, Docker, Kubernetes)",
    "question": "How do you scale a .NET application running in Kubernetes?",
    "answer": "You can scale a Kubernetes Deployment by increasing the number of replicas, either manually using `kubectl scale` or automatically using Horizontal Pod Autoscaling (HPA) based on metrics like CPU utilization or custom metrics."
  },
  {
    "type": "mcq",
    "level": "advanced",
    "topic": "Containerization and Orchestration (.NET, Docker, Kubernetes)",
    "question": "What Kubernetes feature allows for automatic scaling of Pods based on resource utilization?",
    "options": [
      "Horizontal Pod Autoscaler (HPA)",
      "Vertical Pod Autoscaler (VPA)",
      "Cluster Autoscaler",
      "ReplicaSet"
    ],
    "correct_answer": "Horizontal Pod Autoscaler (HPA)",
    "answer": "HPA automatically adjusts the number of Pod replicas."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Containerization and Orchestration (.NET, Docker, Kubernetes)",
    "question": "How do you handle configuration and secrets in Kubernetes for your .NET application?",
    "answer": "Kubernetes provides ConfigMaps for storing non-sensitive configuration data and Secrets for storing sensitive information like passwords and API keys. These can be mounted as environment variables or files within the Pods."
  },
  {
    "type": "mcq",
    "level": "advanced",
    "topic": "Containerization and Orchestration (.NET, Docker, Kubernetes)",
    "question": "Which Kubernetes object is used to store sensitive information like passwords?",
    "options": [
      "ConfigMap",
      "Deployment",
      "Service",
      "Secret"
    ],
    "correct_answer": "Secret",
    "answer": "Secrets are designed to securely store sensitive data."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Containerization and Orchestration (.NET, Docker, Kubernetes)",
    "question": "What are Kubernetes Namespaces and why are they useful?",
    "answer": "Namespaces provide a way to logically partition a Kubernetes cluster, allowing you to organize and isolate resources (like Pods, Deployments, and Services) for different teams, projects, or environments within the same physical cluster."
  },
  {
    "type": "mcq",
    "level": "advanced",
    "topic": "Containerization and Orchestration (.NET, Docker, Kubernetes)",
    "question": "What is the purpose of Kubernetes Namespaces?",
    "options": [
      "To manage the network configuration of the cluster.",
      "To provide a way to isolate and organize resources within a cluster.",
      "To define the security policies for the cluster.",
      "To control the resource allocation for individual Pods."
    ],
    "correct_answer": "To provide a way to isolate and organize resources within a cluster.",
    "answer": "Namespaces help in managing resources in a multi-tenant environment."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Containerization and Orchestration (.NET, Docker, Kubernetes)",
    "question": "How can you monitor the health and logs of your .NET application running in a Kubernetes cluster?",
    "answer": "Kubernetes provides health checks (Liveness and Readiness probes) that can be configured for Pods. For logs, you can use `kubectl logs <pod-name>` or integrate with centralized logging systems like Elasticsearch, Fluentd, and Kibana (EFK stack) or Prometheus and Grafana for metrics."
  },
  {
    "type": "mcq",
    "level": "advanced",
    "topic": "Containerization and Orchestration (.NET, Docker, Kubernetes)",
    "question": "What type of Kubernetes probe is used to determine if a container is ready to start serving traffic?",
    "options": [
      "Liveness Probe",
      "Readiness Probe",
      "Startup Probe",
      "Health Probe"
    ],
    "correct_answer": "Readiness Probe",
    "answer": "Readiness probes indicate when a container is ready to receive requests."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Containerization and Orchestration (.NET, Docker, Kubernetes)",
    "question": "What is a Helm chart in Kubernetes?",
    "answer": "Helm is a package manager for Kubernetes. A Helm chart is a package that contains all the necessary resource definitions (YAML files) for deploying an application, tool, or service on Kubernetes. It simplifies the process of installing, upgrading, and managing Kubernetes applications."
  },
  {
    "type": "mcq",
    "level": "advanced",
    "topic": "Containerization and Orchestration (.NET, Docker, Kubernetes)",
    "question": "What is the purpose of Helm in Kubernetes?",
    "options": [
      "To manage the networking configuration of the cluster.",
      "To serve as a package manager for Kubernetes applications.",
      "To provide a graphical user interface for Kubernetes management.",
      "To automate the creation of Docker images."
    ],
    "correct_answer": "To serve as a package manager for Kubernetes applications.",
    "answer": "Helm simplifies the deployment and management of applications on Kubernetes."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Containerization and Orchestration (.NET, Docker, Kubernetes)",
    "question": "How can you integrate your .NET application's health checks with Kubernetes?",
    "answer": "You can expose health check endpoints in your .NET application (e.g., using the `AspNetCore.HealthChecks` library) and configure Liveness and Readiness probes in your Kubernetes Pod definitions to call these endpoints. Kubernetes will then use these probes to determine the health of your application instances."
  },
  {
    "type": "mcq",
    "level": "advanced",
    "topic": "Containerization and Orchestration (.NET, Docker, Kubernetes)",
    "question": "What is the benefit of configuring health checks in Kubernetes for your .NET application?",
    "options": [
      "It automatically fixes bugs in your application code.",
      "It allows Kubernetes to automatically restart unhealthy containers and prevent traffic from being sent to them.",
      "It improves the performance of your application.",
      "It reduces the resource consumption of your application."
    ],
    "correct_answer": "It allows Kubernetes to automatically restart unhealthy containers and prevent traffic from being sent to them.",
    "answer": "Health checks enable self-healing and improved availability."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Containerization and Orchestration (.NET, Docker, Kubernetes)",
    "question": "What are some considerations for deploying stateful .NET applications (like those using a database) in Kubernetes?",
    "answer": "Considerations include using Persistent Volumes for data storage, StatefulSets to manage the deployment and scaling of stateful applications with stable network identities and persistent storage, and potentially using operators for managing complex stateful workloads like databases."
  },
  {
    "type": "mcq",
    "level": "advanced",
    "topic": "Containerization and Orchestration (.NET, Docker, Kubernetes)",
    "question": "Which Kubernetes resource is designed for managing stateful applications?",
    "options": [
      "Deployment",
      "ReplicaSet",
      "StatefulSet",
      "Service"
    ],
    "correct_answer": "StatefulSet",
    "answer": "StatefulSets provide stable network identities and persistent storage for stateful applications."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Containerization and Orchestration (.NET, Docker, Kubernetes)",
    "question": "How can you manage migrations for your .NET application's database when deploying with Docker and Kubernetes?",
    "answer": "Common approaches include running database migrations as part of the container startup process (e.g., using an entrypoint script), using Kubernetes Jobs to run migration tasks separately, or employing CI/CD pipelines to apply migrations before deploying new application versions."
  },
  {
    "type": "mcq",
    "level": "advanced",
    "topic": "Containerization and Orchestration (.NET, Docker, Kubernetes)",
    "question": "Which Kubernetes resource could you use to run a one-off database migration task?",
    "options": [
      "Deployment",
      "Service",
      "Job",
      "CronJob"
    ],
    "correct_answer": "Job",
    "answer": "A Job creates one or more Pods and ensures that a specified number of them successfully terminate."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Containerization and Orchestration (.NET, Docker, Kubernetes)",
    "question": "What are some best practices for optimizing Docker images for .NET applications?",
    "answer": "Best practices include using multi-stage builds to reduce image size, using specific base images tailored for .NET, minimizing the number of layers in the image, ordering instructions in the Dockerfile to leverage caching, and avoiding installing unnecessary tools in the final image."
  },
  {
    "type": "mcq",
    "level": "advanced",
    "topic": "Containerization and Orchestration (.NET, Docker, Kubernetes)",
    "question": "What is the benefit of using multi-stage builds in Docker for .NET applications?",
    "options": [
      "It allows you to run multiple containers from a single image.",
      "It helps in reducing the final image size by only including necessary artifacts.",
      "It automatically optimizes the performance of the application at build time.",
      "It simplifies the process of writing the Dockerfile."
    ],
    "correct_answer": "It helps in reducing the final image size by only including necessary artifacts.",
    "answer": "Multi-stage builds help create leaner and more efficient images."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Containerization and Orchestration (.NET, Docker, Kubernetes)",
    "question": "How can you handle logging from your .NET application running in a Docker container?",
    "answer": "Common approaches include writing logs to standard output and standard error (which Docker captures), using logging libraries that can forward logs to a centralized logging system, or mounting volumes to persist log files."
  },
  {
    "type": "mcq",
    "level": "advanced",
    "topic": "Containerization and Orchestration (.NET, Docker, Kubernetes)",
    "question": "Where do logs from a Docker container typically go by default?",
    "options": [
      "To a local file on the host machine.",
      "To a centralized logging server.",
      "To the standard output and standard error streams of the container.",
      "They are discarded automatically."
    ],
    "correct_answer": "To the standard output and standard error streams of the container.",
    "answer": "Docker captures these streams, which can then be accessed using `docker logs` or integrated with logging drivers."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "Object-Oriented Programming (OOP)",
    "question": "What are the four fundamental principles of Object-Oriented Programming (OOP)?",
    "answer": "The four fundamental principles of OOP are Encapsulation, Inheritance, Polymorphism, and Abstraction."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "Object-Oriented Programming (OOP)",
    "question": "Which of the following is NOT one of the four fundamental principles of OOP?",
    "options": [
      "Encapsulation",
      "Inheritance",
      "Polymorphism",
      "Composition"
    ],
    "correct_answer": "Composition",
    "answer": "While composition is a key OOP concept, the four fundamental principles are typically listed as Encapsulation, Inheritance, Polymorphism, and Abstraction."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "Object-Oriented Programming (OOP)",
    "question": "Explain the principle of Encapsulation in OOP.",
    "answer": "Encapsulation is the mechanism of bundling data (attributes or properties) and the methods (behavior or functions) that operate on that data into a single unit, or 'class'. It also involves controlling the access to the internal details of an object, often using access modifiers like `public`, `private`, `protected`, and `internal` in C#."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "Object-Oriented Programming (OOP)",
    "question": "What is the primary benefit of encapsulation?",
    "options": [
      "It allows objects to directly access each other's data.",
      "It hides the internal implementation details of an object and protects its integrity.",
      "It makes code run faster.",
      "It reduces the size of the compiled code."
    ],
    "correct_answer": "It hides the internal implementation details of an object and protects its integrity.",
    "answer": "Encapsulation promotes data hiding and controlled access."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "Object-Oriented Programming (OOP)",
    "question": "How are access modifiers used to achieve encapsulation in C#?",
    "answer": "Access modifiers like `private` restrict access to members within the same class, `protected` allows access within the class and its derived classes, `internal` allows access within the same assembly, and `public` allows access from anywhere."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "Object-Oriented Programming (OOP)",
    "question": "Which access modifier in C# provides the most restrictive access?",
    "options": [
      "public",
      "private",
      "protected",
      "internal"
    ],
    "correct_answer": "private",
    "answer": "`private` members are only accessible within the class where they are declared."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "Object-Oriented Programming (OOP)",
    "question": "What is the main purpose of inheritance?",
    "options": [
      "To create objects.",
      "To reuse code and establish relationships between classes.",
      "To hide data within a class.",
      "To allow objects of different classes to be treated in a uniform way."
    ],
    "correct_answer": "To reuse code and establish relationships between classes.",
    "answer": "Inheritance facilitates code reuse and hierarchical class structures."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "Object-Oriented Programming (OOP)",
    "question": "How is inheritance implemented in C#?",
    "answer": "Inheritance is implemented in C# using the colon (`:`) followed by the name of the base class in the class declaration of the derived class (e.g., `public class Dog : Animal`)."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "Object-Oriented Programming (OOP)",
    "question": "In C#, which symbol is used to indicate that a class inherits from another class?",
    "options": [
      ".",
      ",",
      ":",
      "->"
    ],
    "correct_answer": ":",
    "answer": "The colon (`:`) is used to specify the base class in C# inheritance."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "Object-Oriented Programming (OOP)",
    "question": "What is the difference between single inheritance and multiple inheritance? Does C# support multiple inheritance of classes?",
    "answer": "Single inheritance means a class can inherit from only one direct parent class. Multiple inheritance means a class can inherit from more than one direct parent class. C# does not support multiple inheritance of classes directly. However, it achieves similar functionality through interfaces."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "Object-Oriented Programming (OOP)",
    "question": "Does C# support multiple inheritance of classes?",
    "options": [
      "Yes",
      "No",
      "Only for abstract classes",
      "Only for static classes"
    ],
    "correct_answer": "No",
    "answer": "C# only supports single inheritance of classes."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "Object-Oriented Programming (OOP)",
    "question": "Explain the principle of Polymorphism in OOP.",
    "answer": "Polymorphism (meaning 'many forms') is the ability of objects of different classes to respond to the same method call in their own way. It allows you to treat objects of different types uniformly if they share a common interface or base class."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "Object-Oriented Programming (OOP)",
    "question": "What is the primary benefit of polymorphism?",
    "options": [
      "It reduces code complexity by limiting the number of classes.",
      "It allows for more flexible and extensible code by enabling objects of different types to be treated interchangeably.",
      "It improves the security of the application by hiding data.",
      "It makes the application run on multiple platforms without modification."
    ],
    "correct_answer": "It allows for more flexible and extensible code by enabling objects of different types to be treated interchangeably.",
    "answer": "Polymorphism enhances flexibility and extensibility in OOP."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "Object-Oriented Programming (OOP)",
    "question": "What are the two main types of polymorphism in C#?",
    "answer": "The two main types of polymorphism in C# are Compile-time polymorphism (achieved through method overloading and operator overloading) and Run-time polymorphism (achieved through method overriding using virtual and override keywords)."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "Object-Oriented Programming (OOP)",
    "question": "Method overloading is an example of which type of polymorphism?",
    "options": [
      "Run-time polymorphism",
      "Compile-time polymorphism",
      "Inheritance polymorphism",
      "Abstraction polymorphism"
    ],
    "correct_answer": "Compile-time polymorphism",
    "answer": "The correct method to call is determined at compile time based on the method signature."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "Object-Oriented Programming (OOP)",
    "question": "Explain method overriding in C# and how it relates to run-time polymorphism.",
    "answer": "Method overriding allows a derived class to provide a specific implementation for a method that is already defined in its base class. To enable overriding, the base class method must be declared as `virtual`, and the derived class method must use the `override` keyword. The actual method to be executed is determined at run time based on the object's actual type."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "Object-Oriented Programming (OOP)",
    "question": "Which keywords in C# are used to support method overriding for run-time polymorphism?",
    "options": [
      "new and override",
      "static and virtual",
      "virtual and override",
      "abstract and sealed"
    ],
    "correct_answer": "virtual and override",
    "answer": "The `virtual` keyword in the base class allows overriding, and `override` in the derived class provides the specific implementation."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "Object-Oriented Programming (OOP)",
    "question": "Explain the principle of Abstraction in OOP.",
    "answer": "Abstraction is the process of hiding complex implementation details and showing only the essential information to the user. It focuses on 'what' an object does rather than 'how' it does it. In C#, abstraction can be achieved using abstract classes and interfaces."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "Object-Oriented Programming (OOP)",
    "question": "What is the main goal of abstraction in OOP?",
    "options": [
      "To increase code complexity.",
      "To hide unnecessary implementation details and simplify the view for the user.",
      "To enable code reuse through inheritance.",
      "To allow objects of different classes to be treated uniformly."
    ],
    "correct_answer": "To hide unnecessary implementation details and simplify the view for the user.",
    "answer": "Abstraction simplifies the interaction with objects by focusing on essential details."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "Object-Oriented Programming (OOP)",
    "question": "How are abstract classes used to achieve abstraction in C#?",
    "answer": "An abstract class cannot be instantiated directly and may contain abstract methods (methods without implementation) and concrete methods (methods with implementation). Derived classes must provide implementations for all abstract methods. Abstract classes define a common base and enforce certain behaviors in their subclasses."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "Object-Oriented Programming (OOP)",
    "question": "Which keyword is used to declare an abstract class in C#?",
    "options": [
      "class",
      "interface",
      "sealed",
      "abstract"
    ],
    "correct_answer": "abstract",
    "answer": "The `abstract` keyword is used to define abstract classes."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "Object-Oriented Programming (OOP)",
    "question": "How are interfaces used to achieve abstraction in C#?",
    "answer": "An interface defines a contract that specifies a set of methods, properties, events, and indexers that implementing classes must provide. Interfaces only declare members (without implementation) and allow a class to implement multiple interfaces, thus achieving a form of multiple inheritance of behavior."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "Object-Oriented Programming (OOP)",
    "question": "Which keyword is used to declare an interface in C#?",
    "options": [
      "class",
      "struct",
      "interface",
      "delegate"
    ],
    "correct_answer": "interface",
    "answer": "The `interface` keyword is used to define interfaces."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Object-Oriented Programming (OOP)",
    "question": "What are the key differences between abstract classes and interfaces in C#?",
    "answer": "Abstract classes can have both abstract and concrete members, can have constructors, and a class can inherit from only one abstract class. Interfaces can only have abstract members (until C# 8.0 introduced default interface methods), cannot have constructors, and a class can implement multiple interfaces. Abstract classes represent an 'is-a' relationship with potential implementation, while interfaces represent a 'can-do' contract."
  },
  {
    "type": "mcq",
    "level": "advanced",
    "topic": "Object-Oriented Programming (OOP)",
    "question": "Which of the following is true about abstract classes in C#?",
    "options": [
      "They cannot have any methods with implementation.",
      "A class can inherit from multiple abstract classes.",
      "They can have constructors.",
      "They can be directly instantiated."
    ],
    "correct_answer": "They can have constructors.",
    "answer": "Abstract classes can have constructors, although they cannot be directly instantiated."
  },
  {
    "type": "mcq",
    "level": "advanced",
    "topic": "Object-Oriented Programming (OOP)",
    "question": "Which of the following is true about interfaces in C#?",
    "options": [
      "They can have private members.",
      "They can have fields.",
      "A class can implement multiple interfaces.",
      "They can have constructors."
    ],
    "correct_answer": "A class can implement multiple interfaces.",
    "answer": "Implementing multiple interfaces allows for a form of multiple inheritance of behavior."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "Object-Oriented Programming (OOP)",
    "question": "What is the concept of a 'class' in OOP?",
    "answer": "A class is a blueprint or template for creating objects. It defines the attributes (data members) and behaviors (methods) that objects of that class will have."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "Object-Oriented Programming (OOP)",
    "question": "What is an 'object' in OOP?",
    "options": [
      "A blueprint for creating instances.",
      "A collection of related classes.",
      "An instance of a class.",
      "A set of rules governing class behavior."
    ],
    "correct_answer": "An instance of a class.",
    "answer": "An object is a concrete realization of a class."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "Object-Oriented Programming (OOP)",
    "question": "Explain the concept of 'constructors' in OOP and their purpose.",
    "answer": "A constructor is a special method within a class that is automatically called when an object of that class is created. Its primary purpose is to initialize the object's state (e.g., set initial values to its properties or fields)."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "Object-Oriented Programming (OOP)",
    "question": "What is the name of a constructor in C#?",
    "options": [
      "It can be any valid method name.",
      "It must be named 'Constructor'.",
      "It has the same name as the class.",
      "It must be named 'Initialize'."
    ],
    "correct_answer": "It has the same name as the class.",
    "answer": "Constructors in C# have the same name as the class they belong to."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "Object-Oriented Programming (OOP)",
    "question": "What is method overloading?",
    "answer": "Method overloading allows a class to have multiple methods with the same name but different parameter lists (different number, types, or order of parameters). The compiler determines which method to call based on the arguments passed during the method invocation."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "Object-Oriented Programming (OOP)",
    "question": "What is the key requirement for method overloading?",
    "options": [
      "Methods must have the same return type.",
      "Methods must have different access modifiers.",
      "Methods must have different parameter lists.",
      "Methods must be defined in different classes."
    ],
    "correct_answer": "Methods must have different parameter lists.",
    "answer": "The parameter list (signature) is what distinguishes overloaded methods."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "Object-Oriented Programming (OOP)",
    "question": "What is method overriding?",
    "answer": "Method overriding occurs when a derived class provides a specific implementation for a method that is already defined in its base class. This is used to customize or extend the behavior inherited from the base class."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "Object-Oriented Programming (OOP)",
    "question": "Method overriding is primarily related to which OOP principle?",
    "options": [
      "Encapsulation",
      "Inheritance",
      "Polymorphism",
      "Abstraction"
    ],
    "correct_answer": "Polymorphism",
    "answer": "Overriding enables run-time polymorphism."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Object-Oriented Programming (OOP)",
    "question": "Explain the concept of 'Composition' in OOP and how it differs from Inheritance.",
    "answer": "Composition is a design principle where a class holds references to instances of other classes. It represents a 'has-a' relationship. Inheritance represents an 'is-a' relationship. Composition often leads to more flexible and maintainable designs as it promotes loose coupling and allows for easier changes in behavior by swapping out composed objects."
  },
  {
    "type": "mcq",
    "level": "advanced",
    "topic": "Object-Oriented Programming (OOP)",
    "question": "Which of the following best describes a 'has-a' relationship in OOP?",
    "options": [
      "Inheritance",
      "Polymorphism",
      "Encapsulation",
      "Composition"
    ],
    "correct_answer": "Composition",
    "answer": "Composition models relationships where one object contains another."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Object-Oriented Programming (OOP)",
    "question": "What is the Liskov Substitution Principle (LSP) and why is it important in OOP?",
    "answer": "The Liskov Substitution Principle states that subtypes must be substitutable for their base types without altering the correctness of the program. This principle is crucial for maintaining the integrity of inheritance hierarchies and ensuring that polymorphism works as expected. Violating LSP can lead to unexpected behavior and make code harder to maintain."
  },
  {
    "type": "mcq",
    "level": "advanced",
    "topic": "Object-Oriented Programming (OOP)",
    "question": "The Liskov Substitution Principle is most closely related to which OOP principle?",
    "options": [
      "Encapsulation",
      "Inheritance",
      "Polymorphism",
      "Abstraction"
    ],
    "correct_answer": "Inheritance",
    "answer": "LSP provides guidelines for proper inheritance relationships."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Object-Oriented Programming (OOP)",
    "question": "Explain the concept of 'Coupling' and 'Cohesion' in the context of OOP design.",
    "answer": "Coupling refers to the degree of interdependence between software modules. Low coupling is desirable as it means changes in one module are less likely to affect others. Cohesion refers to the degree to which the elements within a module belong together. High cohesion is desirable as it indicates that the module performs a well-defined task."
  },
  {
    "type": "mcq",
    "level": "advanced",
    "topic": "Object-Oriented Programming (OOP)",
    "question": "In OOP design, which is generally considered better: high coupling or low coupling?",
    "options": [
      "High coupling",
      "Low coupling",
      "It depends on the situation",
      "There is no significant difference"
    ],
    "correct_answer": "Low coupling",
    "answer": "Low coupling makes the system more flexible and easier to maintain."
  },
  {
    "type": "mcq",
    "level": "advanced",
    "topic": "Object-Oriented Programming (OOP)",
    "question": "In OOP design, which is generally considered better: high cohesion or low cohesion?",
    "options": [
      "High cohesion",
      "Low cohesion",
      "It depends on the situation",
      "There is no significant difference"
    ],
    "correct_answer": "High cohesion",
    "answer": "High cohesion indicates that a module has a clear and focused responsibility."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Object-Oriented Programming (OOP)",
    "question": "What is the Single Responsibility Principle (SRP) and how does it relate to OOP design?",
    "answer": "The Single Responsibility Principle states that a class should have only one reason to change, meaning it should have only one responsibility. Adhering to SRP leads to more robust and maintainable code by making classes focused and easier to understand and modify."
  },
  {
    "type": "mcq",
    "level": "advanced",
    "topic": "Object-Oriented Programming (OOP)",
    "question": "The Single Responsibility Principle suggests that a class should have:",
    "options": [
      "Multiple reasons to change.",
      "Only one reason to change.",
      "No reason to change once created.",
      "As many responsibilities as it can handle."
    ],
    "correct_answer": "Only one reason to change.",
    "answer": "SRP promotes focused and maintainable classes."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Object-Oriented Programming (OOP)",
    "question": "What is the Open/Closed Principle (OCP) and how does it relate to OOP design?",
    "answer": "The Open/Closed Principle states that software entities (classes, modules, functions, etc.) should be open for extension but closed for modification. This means you should be able to add new functionality without altering the existing code, often achieved through inheritance and polymorphism."
  },
  {
    "type": "mcq",
    "level": "advanced",
    "topic": "Object-Oriented Programming (OOP)",
    "question": "The Open/Closed Principle encourages designing software entities that are:",
    "options": [
      "Open for modification and closed for extension.",
      "Closed for both modification and extension.",
      "Open for extension but closed for modification.",
      "Open for both modification and extension."
    ],
    "correct_answer": "Open for extension but closed for modification.",
    "answer": "OCP aims to make software more adaptable to new requirements without introducing regressions."
  },
  {
    "type": "behavioral",
    "level": "all",
    "topic": "Interview Specific",
    "question": "Tell me about a challenging technical problem you faced in a recent .NET project and how you solved it.",
    "answer": "This question assesses problem-solving skills. Look for a clear explanation of the problem, the candidate's approach to diagnosis, the steps taken to resolve it, and what they learned from the experience. Bonus points for mentioning tools used (e.g., profilers, debuggers)."
  },
  {
    "type": "behavioral",
    "level": "all",
    "topic": "Interview Specific",
    "question": "Describe a time when you had to work with a tight deadline on a .NET project. How did you manage your time and prioritize tasks?",
    "answer": "This assesses time management and prioritization. Look for strategies like breaking down tasks, identifying critical paths, communicating proactively about potential roadblocks, and focusing on delivering core functionality first."
  },
  {
    "type": "behavioral",
    "level": "all",
    "topic": "Interview Specific",
    "question": "Have you ever disagreed with a technical decision made by your team? How did you handle that situation?",
    "answer": "This assesses communication and teamwork. Look for a response that shows the candidate can articulate their concerns respectfully, listen to others' perspectives, and ultimately support the team's decision, even if they still disagree."
  },
  {
    "type": "behavioral",
    "level": "all",
    "topic": "Interview Specific",
    "question": "Tell me about a .NET project where you had to learn a new technology or framework quickly. What was your approach?",
    "answer": "This assesses learning agility. Look for strategies like using online resources, documentation, tutorials, asking for help from colleagues, and focusing on practical application to learn effectively."
  },
  {
    "type": "behavioral",
    "level": "all",
    "topic": "Interview Specific",
    "question": "Describe a time when you made a mistake in your code that caused an issue in production. What did you learn from it and what steps did you take to prevent it from happening again?",
    "answer": "This assesses accountability and learning from mistakes. Look for honesty, an understanding of the root cause, and mention of preventative measures like better testing, code reviews, or improved monitoring."
  },
  {
    "type": "behavioral",
    "level": "all",
    "topic": "Interview Specific",
    "question": "How do you stay up-to-date with the latest trends and technologies in the .NET ecosystem?",
    "answer": "This assesses the candidate's commitment to continuous learning. Look for mentions of blogs, conferences, online courses, open-source contributions, or personal projects."
  },
  {
    "type": "scenario",
    "level": "intermediate",
    "topic": "Interview Specific",
    "question": "Imagine you've deployed a new .NET Web API to production, and users are reporting slow response times. What would be your first steps to diagnose the issue?",
    "answer": "This assesses troubleshooting skills in a real-world scenario. Look for steps like checking server logs, monitoring performance metrics (CPU, memory, network), using profiling tools (if possible), checking database performance, and potentially rolling back to a previous version if the issue is critical."
  },
  {
    "type": "scenario",
    "level": "intermediate",
    "topic": "Interview Specific",
    "question": "You are working on an ASP.NET Core MVC application, and you need to implement a new feature that involves complex business logic and interaction with multiple external APIs. How would you approach the design and implementation of this feature?",
    "answer": "This assesses design and implementation skills. Look for considerations like breaking down the problem, identifying necessary components (controllers, services, repositories), handling API interactions (error handling, retries), considering dependency injection, and writing unit tests."
  },
  {
    "type": "scenario",
    "level": "advanced",
    "topic": "Interview Specific",
    "question": "Your team is considering migrating a large, legacy .NET Framework application to .NET 8. What are some key factors you would consider and what steps would you recommend for a successful migration?",
    "answer": "This assesses understanding of migration challenges. Look for considerations like assessing the application's complexity, identifying dependencies, choosing a migration strategy (incremental vs. big bang), updating NuGet packages, addressing breaking changes, and thorough testing in different environments."
  },
  {
    "type": "scenario",
    "level": "advanced",
    "topic": "Interview Specific",
    "question": "You are tasked with improving the performance of a high-traffic ASP.NET Core Web API. What are some specific optimization techniques you would investigate and implement?",
    "answer": "This assesses performance optimization knowledge. Look for mentions of caching strategies, asynchronous programming, efficient database queries (including indexing), minimizing object allocations, using `StringBuilder`, response compression, and profiling to identify bottlenecks."
  },
  {
    "type": "scenario",
    "level": "intermediate",
    "topic": "Interview Specific",
    "question": "You need to implement authentication and authorization in a new ASP.NET Core Web API. What are the different approaches you could take, and which one would you recommend for a public-facing API?",
    "answer": "This assesses security knowledge. Look for understanding of approaches like Cookie-based authentication, JWT (JSON Web Tokens), OAuth 2.0, and OpenID Connect. For a public-facing API, JWT or OAuth 2.0 are generally recommended."
  },
  {
    "type": "scenario",
    "level": "intermediate",
    "topic": "Interview Specific",
    "question": "Your team is adopting microservices architecture. What are some of the challenges you anticipate and how would you address them in the context of a .NET development team?",
    "answer": "This assesses understanding of microservices challenges. Look for mentions of increased complexity in deployment and management, inter-service communication, distributed transactions, monitoring, and the need for a different team structure and culture."
  },
  {
    "type": "scenario",
    "level": "intermediate",
    "topic": "Interview Specific",
    "question": "You've written a piece of code in C#, and your unit tests are passing. However, you're not confident that it's robust enough. What other types of testing would you consider to ensure its quality?",
    "answer": "This assesses understanding of different testing levels. Look for mentions of integration testing, end-to-end testing (if applicable), and perhaps even exploratory testing or performance considerations."
  },
  {
    "type": "scenario",
    "level": "intermediate",
    "topic": "Interview Specific",
    "question": "You need to integrate with a third-party API in your .NET application. What are some important considerations when working with external APIs?",
    "answer": "This assesses understanding of API integration best practices. Look for mentions of error handling, rate limiting, authentication, data transformation, logging, and potentially using libraries like `HttpClient` or specific SDKs."
  },
  {
    "type": "scenario",
    "level": "intermediate",
    "topic": "Interview Specific",
    "question": "Your team is using Entity Framework Core for data access, and you notice that certain database queries are performing poorly. How would you identify the slow queries and what steps would you take to optimize them?",
    "answer": "This assesses EF Core and performance knowledge. Look for mentioning tools like SQL Server Profiler or EF Core logging, analyzing query plans, adding indexes, using `AsNoTracking()` where appropriate, and considering techniques like eager loading or raw SQL."
  },
  {
    "type": "scenario",
    "level": "intermediate",
    "topic": "Interview Specific",
    "question": "You are working on a Blazor WebAssembly application, and you need to manage the application state across different components. What are some state management patterns or techniques you could use?",
    "answer": "This assesses knowledge of Blazor state management. Look for mentions of using `StateHasChanged()`, passing parameters, cascading parameters, using a service for state, or more advanced patterns like Flux/Redux implementations (e.g., Fluxor, Blazor State)."
  },
  {
    "type": "scenario",
    "level": "intermediate",
    "topic": "Interview Specific",
    "question": "You are using Docker to containerize your .NET application. How would you ensure that sensitive configuration data, like database connection strings, are not hardcoded in your Docker image?",
    "answer": "This assesses knowledge of Docker security. Look for mentions of using environment variables, Docker Secrets, or mounting configuration files from the host or an external configuration provider."
  },
  {
    "type": "scenario",
    "level": "advanced",
    "topic": "Interview Specific",
    "question": "Your team wants to implement CI/CD for your .NET application using Azure DevOps. Describe the typical pipeline stages you would set up and the key tasks you would include in each stage.",
    "answer": "This assesses knowledge of DevOps practices. Look for stages like Build (compilation, unit tests), Test (integration tests, code analysis), Package (creating artifacts), Release (deployment to environments), and potentially approval gates and infrastructure provisioning steps."
  },
  {
    "type": "scenario",
    "level": "advanced",
    "topic": "Interview Specific",
    "question": "You are working on a project that requires high concurrency and low latency. What .NET features or techniques would you leverage to achieve these requirements?",
    "answer": "This assesses knowledge of concurrency and performance. Look for mentions of asynchronous programming (`async/await`), the Task Parallel Library (TPL), using appropriate data structures (e.g., concurrent collections), and potentially exploring technologies like SignalR or gRPC for real-time communication."
  },
  {
    "type": "scenario",
    "level": "intermediate",
    "topic": "Interview Specific",
    "question": "You need to implement logging in your .NET application. What are some popular logging frameworks in .NET, and what are some best practices for effective logging?",
    "answer": "This assesses knowledge of logging. Look for mentions of `Microsoft.Extensions.Logging`, Serilog, NLog, and best practices like including sufficient context, using structured logging, logging at appropriate levels, and centralizing logs."
  },
  {
    "type": "opinion",
    "level": "intermediate",
    "topic": "Interview Specific",
    "question": "In your opinion, what are some of the biggest challenges facing .NET developers today?",
    "answer": "This assesses awareness of the current landscape. Look for thoughtful responses that might include the rapid evolution of the framework, choosing between different .NET runtimes, managing cross-platform development, or keeping up with security best practices."
  },
  {
    "type": "opinion",
    "level": "intermediate",
    "topic": "Interview Specific",
    "question": "What are some of the .NET features or capabilities that you find most exciting or valuable?",
    "answer": "This can reveal the candidate's interests and understanding of the framework's strengths. Look for mentions of specific features like ASP.NET Core's performance, Blazor's capabilities, C# language features, or the cross-platform nature of .NET."
  },
  {
    "type": "behavioral",
    "level": "all",
    "topic": "Interview Specific",
    "question": "Tell me about a time you had to explain a complex technical concept to someone with a non-technical background. How did you approach it?",
    "answer": "This assesses communication skills. Look for strategies like using analogies, avoiding jargon, focusing on the benefits, and tailoring the explanation to the audience's level of understanding."
  },
  {
    "type": "behavioral",
    "level": "all",
    "topic": "Interview Specific",
    "question": "Describe your experience working in an Agile development environment. What aspects of Agile do you find most beneficial?",
    "answer": "This assesses familiarity with Agile methodologies. Look for mentions of concepts like sprints, stand-ups, retrospectives, user stories, and the benefits of iterative development and collaboration."
  },
  {
    "type": "behavioral",
    "level": "all",
    "topic": "Interview Specific",
    "question": "How do you handle receiving constructive criticism on your code or your work?",
    "answer": "This assesses self-awareness and openness to feedback. Look for a positive attitude, willingness to learn and improve, and examples of how they've used feedback in the past."
  },
  {
    "type": "behavioral",
    "level": "all",
    "topic": "Interview Specific",
    "question": "Tell me about a time you had to take ownership of a problem or task that was outside of your direct responsibilities.",
    "answer": "This assesses initiative and proactiveness. Look for examples where the candidate went above and beyond to ensure something was completed successfully."
  },
  {
    "type": "behavioral",
    "level": "all",
    "topic": "Interview Specific",
    "question": "How do you ensure the quality of the code you write?",
    "answer": "This assesses attention to detail and commitment to quality. Look for mentions of writing unit tests, following coding standards, participating in code reviews, and using static analysis tools."
  },
  {
    "type": "behavioral",
    "level": "all",
    "topic": "Interview Specific",
    "question": "Describe your experience with code reviews. What makes a code review effective?",
    "answer": "This assesses understanding of code review best practices. Look for mentions of providing constructive feedback, focusing on potential issues and improvements, maintaining a positive and collaborative tone, and ensuring the review is thorough but efficient."
  },
  {
    "type": "scenario",
    "level": "intermediate",
    "topic": "Interview Specific",
    "question": "You are working on a feature with another developer, and you have different ideas on the best way to implement it. How would you resolve this disagreement?",
    "answer": "This assesses collaboration and conflict resolution skills. Look for approaches like discussing the pros and cons of each approach, considering technical trade-offs, potentially prototyping both solutions, and ultimately agreeing on a path forward as a team."
  },
  {
    "type": "scenario",
    "level": "intermediate",
    "topic": "Interview Specific",
    "question": "You discover a critical security vulnerability in a .NET application you are working on. What steps would you take?",
    "answer": "This assesses understanding of security protocols. Look for immediate reporting to the appropriate team members (security team, lead), understanding the severity and potential impact, and following established security incident response procedures."
  },
  {
    "type": "scenario",
    "level": "intermediate",
    "topic": "Interview Specific",
    "question": "You are asked to estimate the time it will take to implement a new feature in your .NET application. What factors would you consider in your estimation?",
    "answer": "This assesses estimation skills. Look for considerations like the complexity of the feature, the number of dependencies, the team's familiarity with the required technologies, testing effort, and potential risks or unknowns."
  },
  {
    "type": "scenario",
    "level": "intermediate",
    "topic": "Interview Specific",
    "question": "A customer reports a bug in a .NET application that you developed. How would you approach debugging and resolving this issue?",
    "answer": "This assesses debugging skills. Look for steps like gathering information about the bug, reproducing it locally, using debugging tools, analyzing logs, identifying the root cause, implementing a fix, writing a test to prevent recurrence, and deploying the fix."
  },
  {
    "type": "opinion",
    "level": "intermediate",
    "topic": "Interview Specific",
    "question": "What are some key principles of writing clean and maintainable .NET code?",
    "answer": "This assesses understanding of good coding practices. Look for mentions of concepts like meaningful naming, following coding conventions, keeping methods and classes small and focused (SRP), avoiding magic strings, and writing clear and concise code."
  },
  {
    "type": "opinion",
    "level": "intermediate",
    "topic": "Interview Specific",
    "question": "How do you think the role of a .NET developer has evolved in recent years?",
    "answer": "This assesses awareness of industry trends. Look for mentions of the shift towards .NET Core/.NET, cloud-native development, microservices, DevOps practices, and the increasing importance of cross-platform development."
  },
  {
    "type": "behavioral",
    "level": "all",
    "topic": "Interview Specific",
    "question": "Tell me about a .NET project you are particularly proud of and why.",
    "answer": "This allows the candidate to showcase their achievements and passion. Look for a clear explanation of their role, the impact of the project, and what aspects they found rewarding."
  },
  {
    "type": "behavioral",
    "level": "all",
    "topic": "Interview Specific",
    "question": "What are your career goals as a .NET developer?",
    "answer": "This helps understand the candidate's aspirations and whether they align with the company's opportunities. Look for realistic and ambitious goals, and a sense of direction."
  },
  {
    "type": "behavioral",
    "level": "all",
    "topic": "Interview Specific",
    "question": "Why are you interested in this particular role and our company?",
    "answer": "This assesses the candidate's motivation and research. Look for specific reasons related to the role, the company's technology stack, culture, or mission."
  },
  {
    "type": "behavioral",
    "level": "all",
    "topic": "Interview Specific",
    "question": "What are your strengths as a .NET developer?",
    "answer": "Look for strengths that are relevant to the role and are backed up with examples from their experience."
  },
  {
    "type": "behavioral",
    "level": "all",
    "topic": "Interview Specific",
    "question": "What are your weaknesses as a .NET developer?",
    "answer": "Look for self-awareness and a commitment to improvement. The candidate should acknowledge a weakness and describe steps they are taking to address it."
  },
  {
    "type": "behavioral",
    "level": "all",
    "topic": "Interview Specific",
    "question": "Where do you see yourself in five years as a .NET professional?",
    "answer": "This helps gauge the candidate's long-term vision and ambition."
  },
  {
    "type": "behavioral",
    "level": "all",
    "topic": "Interview Specific",
    "question": "How do you handle stress and pressure in a fast-paced development environment?",
    "answer": "Look for healthy coping mechanisms and strategies for staying productive under pressure."
  },
  {
    "type": "behavioral",
    "level": "all",
    "topic": "Interview Specific",
    "question": "Tell me about a time you had to learn something new outside of your comfort zone for a project.",
    "answer": "This assesses adaptability and willingness to learn."
  },
  {
    "type": "behavioral",
    "level": "all",
    "topic": "Interview Specific",
    "question": "Describe a situation where you had to advocate for a particular technical solution.",
    "answer": "This assesses communication and persuasion skills."
  },
  {
    "type": "behavioral",
    "level": "all",
    "topic": "Interview Specific",
    "question": "Tell me about a time you had to deal with a difficult teammate or client.",
    "answer": "This assesses interpersonal and conflict resolution skills."
  },
  {
    "type": "behavioral",
    "level": "all",
    "topic": "Interview Specific",
    "question": "How do you measure your success as a .NET developer?",
    "answer": "Look for metrics beyond just writing code, such as delivering working software, meeting requirements, and contributing to the team's success."
  },
  {
    "type": "scenario",
    "level": "advanced",
    "topic": "Interview Specific",
    "question": "Your team is experiencing frequent build failures in your CI/CD pipeline. How would you approach diagnosing and resolving this issue?",
    "answer": "Look for systematic troubleshooting steps, including checking logs, analyzing error messages, identifying the failing step, and potentially rolling back recent changes."
  },
  {
    "type": "scenario",
    "level": "advanced",
    "topic": "Interview Specific",
    "question": "You need to design a scalable solution for handling a large number of concurrent users for a .NET web application. What architectural considerations would you keep in mind?",
    "answer": "Look for mentions of load balancing, horizontal scaling, caching, asynchronous operations, and potentially using a microservices architecture."
  },
  {
    "type": "scenario",
    "level": "intermediate",
    "topic": "Interview Specific",
    "question": "You are asked to refactor a large, complex piece of legacy .NET code. What steps would you take to ensure the refactoring process is successful and doesn't introduce new bugs?",
    "answer": "Look for steps like writing unit tests for the existing code, breaking down the refactoring into smaller steps, performing frequent testing, and potentially using design patterns to improve the code's structure."
  },
  {
    "type": "scenario",
    "level": "intermediate",
    "topic": "Interview Specific",
    "question": "Your team is adopting a new coding standard for your .NET projects. How would you ensure that all team members adhere to it?",
    "answer": "Look for strategies like providing clear documentation, conducting code reviews with a focus on the new standards, using static analysis tools or linters, and providing training or mentorship."
  },
  {
    "type": "scenario",
    "level": "intermediate",
    "topic": "Interview Specific",
    "question": "You are working on a .NET project that needs to integrate with a database that has a complex schema and limited documentation. How would you approach understanding and working with this database?",
    "answer": "Look for strategies like examining the database schema, writing sample queries, using database tools, collaborating with database administrators, and documenting findings."
  },
  {
    "type": "opinion",
    "level": "intermediate",
    "topic": "Interview Specific",
    "question": "What are your thoughts on the importance of writing unit tests for .NET applications?",
    "answer": "Look for a strong understanding of the benefits of unit testing, such as catching bugs early, improving code quality, and facilitating refactoring."
  },
  {
    "type": "opinion",
    "level": "intermediate",
    "topic": "Interview Specific",
    "question": "How do you see the future of .NET development?",
    "answer": "This assesses the candidate's vision and awareness of the platform's direction."
  },
  {
    "type": "behavioral",
    "level": "all",
    "topic": "Interview Specific",
    "question": "Is there anything else you would like to share with us about your experience or skills as a .NET developer?",
    "answer": "This provides an opportunity for the candidate to highlight any relevant information not yet covered."
  },
  {
    "type": "behavioral",
    "level": "all",
    "topic": "Interview Specific",
    "question": "Do you have any questions for us?",
    "answer": "A good candidate will have thoughtful questions about the role, the team, the company, or the projects they might be working on. This shows engagement and interest."
  },
  {
    "type": "descriptive",
    "level": "basic",
    "topic": ".NET Fundamentals",
    "question": "What is the Common Language Runtime (CLR) in .NET?",
    "answer": "The CLR is the virtual machine component of Microsoft's .NET framework. It manages the execution of .NET programs, providing services like memory management, type safety, exception handling, and more."
  },
  {
    "type": "mcq",
    "level": "basic",
    "topic": ".NET Fundamentals",
    "question": "Which of the following is the language most commonly associated with the .NET platform?",
    "options": [
      "Java",
      "Python",
      "C#",
      "JavaScript"
    ],
    "correct_answer": "C#",
    "answer": "C# is the primary programming language for the .NET ecosystem."
  },
  {
    "type": "descriptive",
    "level": "basic",
    "topic": ".NET Fundamentals",
    "question": "What is the difference between value types and reference types in C# (.NET)?",
    "answer": "Value types (like `int`, `bool`, `struct`) hold their actual data within their own memory allocation and are typically stored on the stack. Reference types (like `class`, `string`, `object`) hold a reference to the memory location where the data is stored and are typically stored on the heap."
  },
  {
    "type": "mcq",
    "level": "basic",
    "topic": ".NET Fundamentals",
    "question": "Which of the following is a value type in C#?",
    "options": [
      "string",
      "class",
      "int",
      "object"
    ],
    "correct_answer": "int",
    "answer": "`int` is a primitive value type in C#."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "Delegates and Events",
    "question": "What is a delegate in C#?",
    "answer": "A delegate is a type that represents references to methods with a particular parameter list and return type. It allows you to treat methods as first-class citizens, meaning they can be passed as arguments to other methods, stored in data structures, and more."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "Delegates and Events",
    "question": "Which keyword is used to declare a delegate in C#?",
    "options": [
      "class",
      "interface",
      "delegate",
      "event"
    ],
    "correct_answer": "delegate",
    "answer": "The `delegate` keyword is used to define delegate types."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "Delegates and Events",
    "question": "What is an event in C# and how is it related to delegates?",
    "answer": "An event is a member of a class that enables an object to notify other interested objects when something of significance happens. Events are based on delegates; they provide a type-safe way to subscribe to and unsubscribe from notifications."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "Delegates and Events",
    "question": "Which keyword is used to declare an event in C#?",
    "options": [
      "delegate",
      "event",
      "action",
      "func"
    ],
    "correct_answer": "event",
    "answer": "The `event` keyword is used to declare events in C#."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Delegates and Events",
    "question": "Explain the difference between `Action`, `Func`, and `Predicate` delegates in C#.",
    "answer": "`Action` delegates encapsulate a method that takes zero or more input parameters and does not return a value. `Func` delegates encapsulate a method that takes zero or more input parameters and returns a value. `Predicate` delegates represent a method that takes one input parameter of a specified type and returns a boolean value."
  },
  {
    "type": "mcq",
    "level": "advanced",
    "topic": "Delegates and Events",
    "question": "Which of the following delegate types in C# is used to represent a method that takes an input parameter and returns a boolean?",
    "options": [
      "Action",
      "Func",
      "Predicate",
      "EventHandler"
    ],
    "correct_answer": "Predicate",
    "answer": "`Predicate<T>` represents a method that checks if an object of type `T` meets certain criteria."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "Generics",
    "question": "What are generics in C# and what are their benefits?",
    "answer": "Generics allow you to define type-safe data structures and algorithms without committing to a specific data type. Benefits include increased type safety, improved performance (by avoiding boxing and unboxing for value types), and code reusability."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "Generics",
    "question": "Which symbol is used to denote a generic type parameter in C#?",
    "options": [
      "<>",
      "()",
      "[]",
      "{}"
    ],
    "correct_answer": "<>",
    "answer": "Angle brackets `<>` are used to define generic type parameters (e.g., `List<T>`)."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "Generics",
    "question": "Explain the concept of type constraints in generics.",
    "answer": "Type constraints allow you to restrict the types that can be used as type arguments for a generic type parameter. This enables you to call specific methods or access specific properties of the type argument within your generic code."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "Generics",
    "question": "Which keyword is used to specify a constraint that a generic type parameter must be a reference type?",
    "options": [
      "struct",
      "class",
      "new()",
      "interface"
    ],
    "correct_answer": "class",
    "answer": "The `where T : class` constraint specifies that `T` must be a reference type."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Reflection",
    "question": "What is reflection in .NET and when might you use it?",
    "answer": "Reflection is the ability of code to examine and manipulate the metadata of assemblies, modules, and types at runtime. You might use it for tasks like dynamically loading and executing assemblies, inspecting types and their members, creating instances of types at runtime, and building extensible applications."
  },
  {
    "type": "mcq",
    "level": "advanced",
    "topic": "Reflection",
    "question": "Which namespace in .NET contains classes for performing reflection?",
    "options": [
      "System.IO",
      "System.Net",
      "System.Reflection",
      "System.Linq"
    ],
    "correct_answer": "System.Reflection",
    "answer": "The `System.Reflection` namespace provides the necessary types for reflection operations."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Reflection",
    "question": "What are some potential drawbacks of using reflection?",
    "answer": "Potential drawbacks include reduced performance (as operations are performed at runtime), increased complexity, and potential security risks if not used carefully (e.g., loading and executing arbitrary code)."
  },
  {
    "type": "mcq",
    "level": "advanced",
    "topic": "Reflection",
    "question": "Which of the following is a common use case for reflection in .NET?",
    "options": [
      "Improving application startup time.",
      "Enforcing compile-time type checking.",
      "Dynamically discovering and loading plugins.",
      "Optimizing memory usage."
    ],
    "correct_answer": "Dynamically discovering and loading plugins.",
    "answer": "Reflection is often used in scenarios requiring dynamic behavior and extensibility."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "LINQ to SQL/Entities",
    "question": "What is LINQ to SQL (or LINQ to Entities in the context of EF Core)?",
    "answer": "LINQ to SQL (or LINQ to Entities) is a component of LINQ that allows you to write queries against relational databases using LINQ syntax. It translates LINQ queries into SQL queries that are executed by the database."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "LINQ to SQL/Entities",
    "question": "Which of the following is a benefit of using LINQ to query databases?",
    "options": [
      "It always results in the most optimized SQL queries.",
      "It allows you to write database queries directly in SQL within your C# code.",
      "It provides a type-safe way to query data, reducing the risk of SQL syntax errors.",
      "It eliminates the need for a database connection."
    ],
    "correct_answer": "It provides a type-safe way to query data, reducing the risk of SQL syntax errors.",
    "answer": "LINQ offers compile-time checking of your database queries."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "LINQ to SQL/Entities",
    "question": "Explain the concept of deferred execution in LINQ.",
    "answer": "Deferred execution means that a LINQ query is not executed immediately when it is defined. Instead, the query is executed only when the results are actually needed, such as when you iterate over the results using a `foreach` loop or call a method like `ToList()` or `FirstOrDefault()`."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "LINQ to SQL/Entities",
    "question": "Which LINQ method forces immediate execution of a query?",
    "options": [
      "Where()",
      "Select()",
      "OrderBy()",
      "ToList()"
    ],
    "correct_answer": "ToList()",
    "answer": "Methods like `ToList()`, `ToArray()`, `FirstOrDefault()`, etc., trigger immediate execution."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Threading and Synchronization",
    "question": "What is the difference between a process and a thread in .NET?",
    "answer": "A process is an instance of a running application. It has its own memory space and resources. A thread is a lightweight unit of execution within a process. A single process can have multiple threads running concurrently, sharing the process's memory and resources."
  },
  {
    "type": "mcq",
    "level": "advanced",
    "topic": "Threading and Synchronization",
    "question": "Which of the following is the smallest unit of execution that can be scheduled by the operating system?",
    "options": [
      "Application",
      "Process",
      "Thread",
      "Domain"
    ],
    "correct_answer": "Thread",
    "answer": "Threads are the basic units of CPU utilization."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Threading and Synchronization",
    "question": "Explain the concept of thread synchronization and why it's important.",
    "answer": "Thread synchronization is the process of coordinating the execution of multiple threads to prevent race conditions and ensure data integrity when multiple threads access shared resources. It's important to avoid unpredictable behavior and maintain the correctness of concurrent applications."
  },
  {
    "type": "mcq",
    "level": "advanced",
    "topic": "Threading and Synchronization",
    "question": "Which of the following is a common mechanism for thread synchronization in C#?",
    "options": [
      "Garbage Collection",
      "Just-In-Time Compilation",
      "Locking (using `lock` keyword or `Monitor` class)",
      "Reflection"
    ],
    "correct_answer": "Locking (using `lock` keyword or `Monitor` class)",
    "answer": "Locking mechanisms help ensure that only one thread can access a critical section of code at a time."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Threading and Synchronization",
    "question": "What is the difference between `async` and `await` keywords in C# and how do they relate to threading?",
    "answer": "The `async` keyword marks a method as asynchronous, allowing the use of the `await` keyword within it. The `await` keyword suspends the execution of the method until the awaited task completes, without blocking the calling thread. This allows the thread to return to the thread pool and perform other work, improving responsiveness in I/O-bound operations."
  },
  {
    "type": "mcq",
    "level": "advanced",
    "topic": "Threading and Synchronization",
    "question": "Using `async` and `await` in C# primarily aims to improve:",
    "options": [
      "CPU-bound operation performance.",
      "Memory usage.",
      "Responsiveness of I/O-bound operations.",
      "Application startup time."
    ],
    "correct_answer": "Responsiveness of I/O-bound operations.",
    "answer": "`async/await` helps avoid blocking threads during operations like network requests or file I/O."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "Memory Management and Garbage Collection",
    "question": "How does memory management work in .NET?",
    "answer": ".NET uses automatic memory management through a process called Garbage Collection. The Common Language Runtime (CLR) manages the allocation and deallocation of memory for managed objects, freeing developers from manual memory management tasks."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "Memory Management and Garbage Collection",
    "question": "What is the role of the Garbage Collector (GC) in .NET?",
    "options": [
      "To manually allocate memory for objects.",
      "To automatically release memory occupied by objects that are no longer in use.",
      "To optimize the performance of CPU-bound operations.",
      "To handle exceptions that occur during program execution."
    ],
    "correct_answer": "To automatically release memory occupied by objects that are no longer in use.",
    "answer": "The GC reclaims memory that is no longer referenced by the application."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "Memory Management and Garbage Collection",
    "question": "Explain the concept of generations in .NET Garbage Collection.",
    "answer": "The .NET Garbage Collector uses a generational approach to manage objects based on their age. Newly created objects are placed in Generation 0. Objects that survive a garbage collection are moved to Generation 1, and objects that survive multiple collections are moved to Generation 2. This approach optimizes the garbage collection process by focusing on younger generations where most objects are short-lived."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "Memory Management and Garbage Collection",
    "question": "Which generation in .NET Garbage Collection contains the newest and most short-lived objects?",
    "options": [
      "Generation 0",
      "Generation 1",
      "Generation 2",
      "Finalization Queue"
    ],
    "correct_answer": "Generation 0",
    "answer": "Generation 0 is where most object allocations initially occur."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Interop",
    "question": "What is .NET Interop and why might you need to use it?",
    "answer": ".NET Interop (Interoperability) allows .NET code to interact with unmanaged code, such as COM components, ActiveX controls, and native DLLs (written in languages like C or C++). You might need to use it when working with legacy systems, accessing platform-specific features, or utilizing libraries that are not available in .NET."
  },
  {
    "type": "mcq",
    "level": "advanced",
    "topic": "Interop",
    "question": "Which of the following is a common scenario where .NET Interop would be used?",
    "options": [
      "Creating cross-platform mobile applications.",
      "Developing web applications with ASP.NET Core.",
      "Interacting with legacy COM components.",
      "Writing unit tests for .NET code."
    ],
    "correct_answer": "Interacting with legacy COM components.",
    "answer": "Interop bridges the gap between managed and unmanaged code."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Interop",
    "question": "What is P/Invoke (Platform Invoke) in .NET?",
    "answer": "P/Invoke is a .NET feature that allows managed code (C#, VB.NET, etc.) to call functions in unmanaged DLLs. It involves specifying the signature of the unmanaged function in managed code using attributes like `DllImport`."
  },
  {
    "type": "mcq",
    "level": "advanced",
    "topic": "Interop",
    "question": "Which attribute is commonly used in C# to declare a method that calls an unmanaged function using P/Invoke?",
    "options": [
      "Serializable",
      "Obsolete",
      "DllImport",
      "AttributeUsage"
    ],
    "correct_answer": "DllImport",
    "answer": "The `DllImport` attribute specifies the location of the unmanaged DLL."
  },
  {
    "type": "descriptive",
    "level": "basic",
    "topic": "Error Handling",
    "question": "How is exception handling implemented in .NET using C#?",
    "answer": "Exception handling in C# is implemented using `try`, `catch`, and optionally `finally` blocks. Code that might throw an exception is placed within a `try` block. If an exception occurs, the program execution jumps to the corresponding `catch` block. The `finally` block contains code that is always executed, regardless of whether an exception occurred or not."
  },
  {
    "type": "mcq",
    "level": "basic",
    "topic": "Error Handling",
    "question": "Which block in a `try-catch-finally` statement is guaranteed to execute, regardless of whether an exception is thrown?",
    "options": [
      "try",
      "catch",
      "finally",
      "if"
    ],
    "correct_answer": "finally",
    "answer": "The `finally` block is used for cleanup code."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "Attributes",
    "question": "What are attributes in C# (.NET)?",
    "answer": "Attributes provide a way to add declarative information to code elements (assemblies, modules, types, members, etc.). This metadata can be used at runtime by the .NET framework or by custom code to modify the behavior or describe the characteristics of the code."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "Attributes",
    "question": "How are attributes applied to code elements in C#?",
    "options": [
      "Using the `attribute` keyword before the code element.",
      "Enclosing the attribute name in angle brackets `<>`.",
      "Placing the attribute name in square brackets `[]` before the code element.",
      "Defining the attribute within a separate configuration file."
    ],
    "correct_answer": "Placing the attribute name in square brackets `[]` before the code element.",
    "answer": "Square brackets are used to apply attributes."
  },
  {
    "type": "descriptive",
    "level": "basic",
    "topic": "Namespaces",
    "question": "What are namespaces in C# and why are they used?",
    "answer": "Namespaces provide a way to organize code into logical groups and prevent naming collisions between different parts of a program or between different libraries. They help in creating more readable and maintainable code."
  },
  {
    "type": "mcq",
    "level": "basic",
    "topic": "Namespaces",
    "question": "Which keyword is used to bring types from a namespace into the current scope in C#?",
    "options": [
      "namespace",
      "class",
      "using",
      "import"
    ],
    "correct_answer": "using",
    "answer": "The `using` keyword allows you to use types from a namespace without fully qualifying their names."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "Reflection vs. Attributes",
    "question": "What is the relationship between reflection and attributes in .NET?",
    "answer": "Reflection is the mechanism used to read the metadata associated with code elements, including attributes. Attributes are the way to embed that metadata into the code. Reflection allows you to inspect and act upon the information provided by attributes at runtime."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "Reflection vs. Attributes",
    "question": "How can you access the attributes applied to a class at runtime in C#?",
    "options": [
      "Using the `getAttribute()` method of the class.",
      "Through the `System.Attribute` class directly.",
      "Using reflection to inspect the metadata of the class.",
      "By reading the assembly manifest file."
    ],
    "correct_answer": "Using reflection to inspect the metadata of the class.",
    "answer": "The `System.Reflection` namespace provides methods to retrieve attributes."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Unsafe Code",
    "question": "What is 'unsafe' code in C# and when might you need to use it?",
    "answer": "Unsafe code in C# allows you to perform operations that are typically not allowed in managed code, such as direct memory manipulation using pointers. You might need to use it for performance-critical sections of code that interact with native libraries or hardware, but it comes with the risk of memory corruption and should be used with caution."
  },
  {
    "type": "mcq",
    "level": "advanced",
    "topic": "Unsafe Code",
    "question": "Which keyword is used to mark a code block or method as 'unsafe' in C#?",
    "options": [
      "managed",
      "pointer",
      "unsafe",
      "fixed"
    ],
    "correct_answer": "unsafe",
    "answer": "The `unsafe` keyword is required to use pointers and perform direct memory operations."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Span<T> and Memory<T>",
    "question": "What are `Span<T>` and `Memory<T>` in .NET and what problems do they solve?",
    "answer": "`Span<T>` and `Memory<T>` are value and struct types, respectively, that provide a type-safe and efficient way to represent contiguous regions of arbitrary memory. They help in avoiding unnecessary memory allocations and copies when working with slices of arrays, strings, or other memory buffers, leading to improved performance, especially in high-performance scenarios."
  },
  {
    "type": "mcq",
    "level": "advanced",
    "topic": "Span<T> and Memory<T>",
    "question": "Which of the following is a key benefit of using `Span<T>` in .NET?",
    "options": [
      "Automatic serialization and deserialization of data.",
      "Direct access to unmanaged memory without the `unsafe` keyword.",
      "Zero-copy slicing of arrays and other memory.",
      "Simplified multithreading and synchronization."
    ],
    "correct_answer": "Zero-copy slicing of arrays and other memory.",
    "answer": "`Span<T>` provides a view into memory without allocating new memory."
  },
  {
    "type": "descriptive",
    "level": "basic",
    "topic": "Assemblies",
    "question": "What is an assembly in .NET?",
    "answer": "An assembly is the fundamental building block of a .NET application. It's a compiled unit of code that contains one or more types (classes, interfaces, etc.), resources, and metadata. Assemblies can be either executables (`.exe`) or libraries (`.dll`)."
  },
  {
    "type": "mcq",
    "level": "basic",
    "topic": "Assemblies",
    "question": "What is the file extension typically used for a .NET library assembly?",
    "options": [
      ".exe",
      ".dll",
      ".config",
      ".cs"
    ],
    "correct_answer": ".dll",
    "answer": "`.dll` files typically contain library code that can be referenced by other assemblies."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "NuGet Packages",
    "question": "What are NuGet packages in .NET?",
    "answer": "NuGet packages are a way to distribute and consume reusable code libraries and tools for .NET projects. They simplify the process of adding, updating, and managing dependencies in your applications."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "NuGet Packages",
    "question": "Which tool is commonly used in .NET to manage NuGet packages for a project?",
    "options": [
      "dotnet CLI",
      "npm",
      "pip",
      "git"
    ],
    "correct_answer": "dotnet CLI",
    "answer": "The `dotnet` command-line interface (CLI) is a primary tool for managing NuGet packages, along with Visual Studio's NuGet Package Manager."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Performance Counters",
    "question": "What are performance counters in .NET and how can they be useful?",
    "answer": "Performance counters are metrics that provide insights into the performance of the operating system, .NET runtime, and applications. They can be useful for monitoring resource usage (CPU, memory, disk), identifying performance bottlenecks, and diagnosing issues in production environments."
  },
  {
    "type": "mcq",
    "level": "advanced",
    "topic": "Performance Counters",
    "question": "Which of the following is a common performance counter category in .NET?",
    "options": [
      "Code Style",
      "Unit Test Coverage",
      "CPU Usage",
      "Database Schema"
    ],
    "correct_answer": "CPU Usage",
    "answer": "CPU Usage is a standard performance counter that provides information about processor utilization."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Memory Leaks",
    "question": "What are memory leaks in .NET and how can you identify and prevent them?",
    "answer": "Memory leaks occur when objects are no longer needed by the application but are not released by the Garbage Collector, leading to increased memory consumption over time. They can be identified using memory profiling tools. Prevention strategies include properly disposing of disposable objects (implementing `IDisposable`), unsubscribing from events, and avoiding long-lived object references to short-lived objects."
  },
  {
    "type": "mcq",
    "level": "advanced",
    "topic": "Memory Leaks",
    "question": "Which interface in .NET is typically implemented by classes that hold unmanaged resources and require explicit disposal?",
    "options": [
      "IEnumerable",
      "IComparable",
      "IDisposable",
      "ICloneable"
    ],
    "correct_answer": "IDisposable",
    "answer": "Implementing `IDisposable` allows for the use of the `using` statement for automatic resource management."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "OOP and Web API",
    "question": "How can the principle of Encapsulation be applied when designing a .NET Web API?",
    "answer": "Encapsulation in Web API design involves creating well-defined classes for request and response bodies (Data Transfer Objects - DTOs). These classes encapsulate the data being transferred, hiding the underlying implementation details of the API and ensuring data integrity through controlled access (properties with appropriate access modifiers)."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "OOP and Web API",
    "question": "Which OOP principle is best demonstrated when a Web API endpoint can handle different types of requests (e.g., GET, POST, PUT, DELETE) acting on the same resource?",
    "options": [
      "Encapsulation",
      "Inheritance",
      "Polymorphism",
      "Abstraction"
    ],
    "correct_answer": "Polymorphism",
    "answer": "While not direct class polymorphism, the API's ability to handle the same resource in different ways based on the HTTP verb can be seen as a form of behavioral polymorphism."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "OOP and Web API",
    "question": "Explain how Inheritance might be used in the context of designing models for a .NET Web API.",
    "answer": "Inheritance can be used to create a base model with common properties, and then derive more specific models for different resources or variations of a resource. For example, you might have a base `Product` class and then derive `Book`, `ElectronicProduct`, etc., inheriting common attributes like `Id` and `Name`."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "OOP and Web API",
    "question": "Using Abstract classes or Interfaces for defining contracts for your Web API services primarily aligns with which OOP principle?",
    "options": [
      "Encapsulation",
      "Inheritance",
      "Polymorphism",
      "Abstraction"
    ],
    "correct_answer": "Abstraction",
    "answer": "Abstract classes and interfaces define 'what' the services should do without specifying the 'how', thus abstracting away the implementation details."
  },
  {
    "type": "mcq",
    "level": "advanced",
    "topic": "OOP and Web API",
    "question": "Which SOLID principle suggests that a Web API controller should only have one reason to change?",
    "options": [
      "Single Responsibility Principle",
      "Open/Closed Principle",
      "Liskov Substitution Principle",
      "Interface Segregation Principle"
    ],
    "correct_answer": "Single Responsibility Principle",
    "answer": "SRP promotes focused controllers that handle a specific domain or aspect of the API."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "OOP and Web API",
    "question": "Explain how you might use Data Transfer Objects (DTOs) in a .NET Web API to adhere to OOP principles.",
    "answer": "DTOs are classes specifically designed to carry data between layers of the application (e.g., from the database to the API response). They encapsulate the data being transferred, promoting encapsulation by separating the data structure from the domain entities and allowing for transformations or projections specific to the API response."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "OOP and Web API",
    "question": "Using DTOs in a Web API primarily helps in achieving which of the following OOP benefits?",
    "options": [
      "Code Reusability through Inheritance",
      "Flexibility through Polymorphism",
      "Data Hiding through Encapsulation",
      "Simplified Testing through Abstraction"
    ],
    "correct_answer": "Data Hiding through Encapsulation",
    "answer": "DTOs control the data exposed by the API and hide internal entity details."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "OOP and Web API",
    "question": "How can you leverage the Repository pattern (an OOP design pattern) in a .NET Web API project?",
    "answer": "The Repository pattern creates an abstraction layer between the data access logic and the business logic (typically in your services or controllers). It provides a collection-like interface for accessing data entities, hiding the underlying data access implementation details (e.g., Entity Framework Core). This promotes loose coupling, testability, and makes it easier to switch data access technologies in the future."
  },
  {
    "type": "mcq",
    "level": "advanced",
    "topic": "OOP and Web API",
    "question": "The primary benefit of using the Repository pattern in a Web API is:",
    "options": [
      "Improved performance of database queries.",
      "Direct access to the database context from controllers.",
      "Abstraction of data access logic, improving testability.",
      "Automatic generation of API documentation."
    ],
    "correct_answer": "Abstraction of data access logic, improving testability.",
    "answer": "The Repository pattern isolates the data access concerns."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "OOP and Web API",
    "question": "Explain how the Service pattern (another OOP design pattern) can be beneficial in a .NET Web API architecture.",
    "answer": "The Service pattern encapsulates the business logic of the application, separating it from the concerns of the controllers (which should primarily handle request routing and response formatting). Services often orchestrate interactions between different repositories and perform complex operations, making the codebase more organized, testable, and maintainable."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "OOP and Web API",
    "question": "What is the main responsibility of a Service class in a Web API following the Service pattern?",
    "options": [
      "Handling HTTP requests and responses.",
      "Defining the data structure for API communication.",
      "Implementing the core business logic of the application.",
      "Managing the database connection and queries."
    ],
    "correct_answer": "Implementing the core business logic of the application.",
    "answer": "Services contain the application's rules and workflows."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "OOP and Web API",
    "question": "How can you use interfaces effectively in a .NET Web API to promote loose coupling and testability, adhering to OOP principles?",
    "answer": "Interfaces define contracts that different classes can implement. By programming against interfaces in your Web API (e.g., injecting dependencies through interfaces), you reduce the dependency on concrete implementations. This makes it easier to swap out implementations (for example, using mock implementations in unit tests) and promotes a more flexible and maintainable architecture, aligning with the Dependency Inversion Principle."
  },
  {
    "type": "mcq",
    "level": "advanced",
    "topic": "OOP and Web API",
    "question": "Depending on interfaces rather than concrete classes in your Web API is a key aspect of:",
    "options": [
      "Encapsulation",
      "Inheritance",
      "Polymorphism",
      "Dependency Inversion"
    ],
    "correct_answer": "Dependency Inversion",
    "answer": "DIP is a core principle for achieving loose coupling."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "OOP and Web API",
    "question": "How does Object-Relational Mapping (ORM) like Entity Framework Core relate to OOP concepts in a .NET Web API?",
    "answer": "ORMs facilitate the interaction between an object-oriented programming language (like C#) and a relational database. They map database tables to classes (entities), allowing developers to work with data as objects, leveraging OOP principles like encapsulation and inheritance. LINQ, often used with ORMs, further enhances this by providing an object-oriented way to query data."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "OOP and Web API",
    "question": "Entity Framework Core, as an ORM, helps .NET Web API developers by:",
    "options": [
      "Automatically generating Web API controllers.",
      "Mapping database tables to C# classes.",
      "Optimizing network requests between the client and the server.",
      "Providing built-in security features for API endpoints."
    ],
    "correct_answer": "Mapping database tables to C# classes.",
    "answer": "ORMs bridge the gap between the object-oriented domain and the relational database."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "OOP and Web API",
    "question": "Discuss the potential benefits and drawbacks of using inheritance in your Web API model design.",
    "answer": "Benefits of inheritance in API models include code reusability for common properties and establishing clear 'is-a' relationships. However, drawbacks can include increased complexity, potential for tight coupling if not used carefully, and challenges in mapping complex inheritance hierarchies to database schemas or API representations."
  },
  {
    "type": "mcq",
    "level": "advanced",
    "topic": "OOP and Web API",
    "question": "A potential drawback of using deep inheritance hierarchies in Web API models is:",
    "options": [
      "Improved performance due to code reuse.",
      "Simplified data validation logic.",
      "Increased complexity and potential for tight coupling.",
      "Enhanced security through polymorphism."
    ],
    "correct_answer": "Increased complexity and potential for tight coupling.",
    "answer": "Overuse of inheritance can lead to rigid and hard-to-maintain designs."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "OOP and Web API",
    "question": "How can polymorphism be useful when handling different versions of your Web API?",
    "answer": "Polymorphism can be used to create different implementations of the same resource or service for different API versions. For example, you could have a base interface for a resource and then create version-specific classes that implement that interface, allowing your controller to work with the appropriate version based on the request."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "OOP and Web API",
    "question": "When implementing versioning in a Web API, using interfaces and different concrete implementations for each version leverages which OOP principle?",
    "options": [
      "Encapsulation",
      "Inheritance",
      "Polymorphism",
      "Abstraction"
    ],
    "correct_answer": "Polymorphism",
    "answer": "Different versions of the same resource can be treated through a common interface."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "OOP and Web API",
    "question": "Explain how you might design a .NET Web API to handle different representations of the same resource (e.g., XML and JSON) while adhering to OOP principles.",
    "answer": "You could use interfaces to define a contract for how a resource should be represented. Then, create concrete classes (e.g., `ProductJsonRepresentation`, `ProductXmlRepresentation`) that implement this interface and handle the specific serialization and deserialization logic for each format. The controller can then select the appropriate representation based on the `Accept` header of the request, demonstrating polymorphism and abstraction."
  },
  {
    "type": "mcq",
    "level": "advanced",
    "topic": "OOP and Web API",
    "question": "Designing different classes to handle JSON and XML serialization for the same Web API resource primarily demonstrates:",
    "options": [
      "Encapsulation of data formats",
      "Inheritance of common serialization logic",
      "Polymorphic handling of different representations",
      "Abstraction of the underlying data source"
    ],
    "correct_answer": "Polymorphic handling of different representations",
    "answer": "The API can handle different formats through different implementations of a common contract."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "OOP and Web API",
    "question": "How can you ensure that your Web API actions (methods in controllers) follow OOP principles?",
    "answer": "Web API actions should ideally delegate complex logic to service classes, adhering to the Single Responsibility Principle. They should primarily focus on routing requests, handling input validation, and returning appropriate HTTP responses. Using well-defined DTOs for parameters and return types also promotes encapsulation."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "OOP and Web API",
    "question": "A Web API controller action that directly interacts with the database violates which OOP principle?",
    "options": [
      "Encapsulation",
      "Inheritance",
      "Polymorphism",
      "Single Responsibility Principle"
    ],
    "correct_answer": "Single Responsibility Principle",
    "answer": "Controllers should ideally not handle data access logic directly."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "OOP and Web API",
    "question": "Discuss how you would design a .NET Web API for a system with different types of users (e.g., administrators, regular users) having different levels of access to resources, while applying OOP concepts.",
    "answer": "You could use inheritance to create a base `User` class and derive specific user types (e.g., `AdminUser`, `RegularUser`) with different properties or behaviors. For authorization, you could implement a service that checks user roles and permissions (potentially using a policy-based approach in ASP.NET Core). This leverages inheritance for modeling user types and encapsulation for managing access control logic."
  },
  {
    "type": "mcq",
    "level": "advanced",
    "topic": "OOP and Web API",
    "question": "Modeling different user roles in a Web API using inheritance aligns with which OOP principle?",
    "options": [
      "Encapsulation",
      "Inheritance",
      "Polymorphism",
      "Abstraction"
    ],
    "correct_answer": "Inheritance",
    "answer": "Inheritance allows you to define common user properties and then specialize for different roles."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "OOP and Web API",
    "question": "How can you use constructor injection (a form of Dependency Injection related to OOP) in your Web API controllers?",
    "answer": "Constructor injection involves providing the dependencies of a class (like services or repositories) through its constructor. This promotes loose coupling and makes it easier to test the controller, as you can pass mock implementations of the dependencies during testing, adhering to the Dependency Inversion Principle."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "OOP and Web API",
    "question": "Using constructor injection for dependencies in a Web API controller primarily supports:",
    "options": [
      "Improved runtime performance",
      "Simplified deployment process",
      "Enhanced testability through loose coupling",
      "Automatic logging of API requests"
    ],
    "correct_answer": "Enhanced testability through loose coupling",
    "answer": "Dependency injection makes it easier to isolate and test components."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "OOP and Web API",
    "question": "Explain how you would handle validation of incoming request data in a .NET Web API using OOP principles.",
    "answer": "You can use DTOs with data annotations (attributes) to define validation rules. This encapsulates the validation logic within the data transfer objects. In your controller, you can check the `ModelState` to see if the validation was successful. For more complex validation rules, you might create separate validator classes (following the Strategy pattern or FluentValidation library), which can be injected as dependencies, adhering to SRP."
  },
  {
    "type": "mcq",
    "level": "advanced",
    "topic": "OOP and Web API",
    "question": "Using data annotations on DTOs for validation in a Web API is an example of:",
    "options": [
      "Behavioral Polymorphism",
      "Implementation Inheritance",
      "Declarative Encapsulation",
      "Procedural Abstraction"
    ],
    "correct_answer": "Declarative Encapsulation",
    "answer": "The validation rules are declared within the DTO, encapsulating the data constraints."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "OOP and Web API",
    "question": "How can you use custom exception types in your .NET Web API to provide more meaningful error responses, aligning with OOP concepts?",
    "answer": "You can create custom exception classes that inherit from the base `Exception` class or more specific exception types (e.g., `NotFoundException`, `BadRequestException`). These custom exceptions can carry specific error information (e.g., error codes, messages). In your global exception handler or specific `catch` blocks, you can identify these custom exceptions and return appropriate HTTP status codes and error response bodies, making the API more informative and easier to consume."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "OOP and Web API",
    "question": "Creating specific exception types like `NotFoundException` in a Web API promotes:",
    "options": [
      "Simplified database interactions",
      "More informative and type-safe error handling",
      "Improved performance of exception handling",
      "Automatic generation of API documentation for errors"
    ],
    "correct_answer": "More informative and type-safe error handling",
    "answer": "Custom exceptions allow for specific handling of different error scenarios."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "OOP and Web API",
    "question": "Discuss how the concept of 'Composition over Inheritance' might be applied in designing the relationships between different resources in your Web API.",
    "answer": "Instead of creating deep inheritance hierarchies for resources, consider using composition where a resource might 'have' other resources as properties. This can lead to more flexible and less tightly coupled designs. For example, an `Order` resource might have a collection of `OrderItem` resources, rather than `SpecialOrder` inheriting from `Order` and adding specific item types through further inheritance."
  },
  {
    "type": "mcq",
    "level": "advanced",
    "topic": "OOP and Web API",
    "question": "Favoring composition over inheritance in Web API design often leads to:",
    "options": [
      "More rigid and less flexible resource models",
      "Tighter coupling between different resources",
      "More flexible and maintainable resource models",
      "Reduced code reusability"
    ],
    "correct_answer": "More flexible and maintainable resource models",
    "answer": "Composition promotes loose coupling and easier modification of relationships."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Advanced Threading",
    "question": "Explain the differences and use cases for `Task.WhenAll()` and `Task.WhenAny()` in asynchronous programming in C#.",
    "answer": "`Task.WhenAll()` returns a task that completes when all of the supplied tasks have completed. It's useful when you need to wait for multiple independent operations to finish before proceeding. `Task.WhenAny()` returns a task that completes when any of the supplied tasks has completed. It's useful for scenarios like timeouts or racing multiple operations against each other."
  },
  {
    "type": "scenario",
    "level": "advanced",
    "topic": "Advanced Threading",
    "question": "You have a long-running asynchronous operation in an ASP.NET Core application. How would you implement a mechanism to allow the client to cancel this operation gracefully?",
    "answer": "Use a `CancellationToken`. Pass the `CancellationToken` to the asynchronous operation. The client can signal cancellation, which will be propagated through the token, allowing the operation to stop its work cleanly. Ensure proper handling of `OperationCanceledException`."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Advanced Threading",
    "question": "What is the purpose of `AsyncLocal<T>` in C# and when might you use it?",
    "answer": "`AsyncLocal<T>` provides ambient data that is local to the current asynchronous control flow. Changes made to an `AsyncLocal` value are visible only to that flow and any child flows it creates. This is useful for scenarios like tracking request-specific information (e.g., correlation IDs, user context) across asynchronous operations without explicitly passing them as parameters."
  },
  {
    "type": "mcq",
    "level": "advanced",
    "topic": "Advanced Threading",
    "question": "Which of the following is NOT a common way to handle concurrency in .NET?",
    "options": [
      "Using the `Thread` class directly.",
      "Using the Task Parallel Library (TPL).",
      "Using `async` and `await`.",
      "Using JavaScript Promises."
    ],
    "correct_answer": "Using JavaScript Promises.",
    "answer": "JavaScript Promises are a concurrency mechanism in JavaScript, not directly in .NET."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Performance Optimization",
    "question": "In a high-throughput .NET application, what are some strategies you would employ to minimize memory allocations and reduce garbage collection pressure?",
    "answer": "Strategies include using value types and `structs` where appropriate, leveraging `Span<T>` and `Memory<T>` for zero-copy operations, using object pooling for frequently used objects, minimizing boxing and unboxing, and being mindful of string concatenations (using `StringBuilder`)."
  },
  {
    "type": "scenario",
    "level": "advanced",
    "topic": "Performance Optimization",
    "question": "You are observing high CPU utilization in your ASP.NET Core application. How would you go about identifying the source of the CPU bottleneck?",
    "answer": "Use profiling tools (like PerfView, dotTrace, or the built-in Visual Studio profiler) to analyze CPU usage at a granular level. Look for hot paths in the code, identify expensive methods, and analyze call stacks to pinpoint the areas consuming the most CPU time."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Security",
    "question": "Explain the difference between Authentication and Authorization in the context of a .NET Web API.",
    "answer": "Authentication is the process of verifying the identity of a user or service (i.e., who are you?). Authorization is the process of determining what actions an authenticated user or service is allowed to perform (i.e., what can you do?)."
  },
  {
    "type": "scenario",
    "level": "advanced",
    "topic": "Security",
    "question": "How would you protect your ASP.NET Core Web API against Cross-Site Request Forgery (CSRF) attacks?",
    "answer": "ASP.NET Core has built-in support for anti-forgery tokens. Ensure that the `[ValidateAntiForgeryToken]` attribute is used on POST, PUT, and DELETE actions that modify data. The client needs to include the anti-forgery token in the request (typically as a cookie and a form field or header)."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Security",
    "question": "What are some best practices for securely storing sensitive data (like passwords) in a .NET application?",
    "answer": "Never store passwords in plain text. Use a strong one-way hashing algorithm (like Argon2 or bcrypt) with a unique salt for each password. Store the hash and salt securely. Consider using password management libraries provided by the framework."
  },
  {
    "type": "mcq",
    "level": "advanced",
    "topic": "Security",
    "question": "Which of the following is a common vulnerability in Web APIs that allows attackers to inject malicious code into database queries?",
    "options": [
      "Cross-Site Scripting (XSS)",
      "SQL Injection",
      "Cross-Site Request Forgery (CSRF)",
      "Denial of Service (DoS)"
    ],
    "correct_answer": "SQL Injection",
    "answer": "SQL Injection occurs when user input is not properly sanitized before being used in a database query."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Architectural Patterns",
    "question": "Explain the core concepts of the Command Query Responsibility Segregation (CQRS) architectural pattern and its potential benefits in a .NET application.",
    "answer": "CQRS separates read and write operations for a data store. Commands handle write operations (updates, inserts, deletes) and Queries handle read operations. Benefits include improved performance and scalability for read-heavy applications, better separation of concerns, and more flexibility in optimizing read and write models independently."
  },
  {
    "type": "scenario",
    "level": "advanced",
    "topic": "Architectural Patterns",
    "question": "You are designing a highly scalable e-commerce platform using .NET. Would you consider using a microservices architecture? What are some of the key challenges you would need to address?",
    "answer": "Yes, microservices can be a good fit for scalability. Challenges include managing inter-service communication, handling distributed transactions, ensuring data consistency across services, implementing robust monitoring and logging, and dealing with the increased complexity of deployment and management."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Architectural Patterns",
    "question": "What is the Saga pattern and when might you use it in a distributed system built with .NET?",
    "answer": "The Saga pattern is used to manage long-running transactions that span multiple services in a distributed system. It involves a sequence of local transactions in each service. If one transaction fails, a series of compensating transactions are executed to undo the changes made by the preceding transactions. This is useful for maintaining eventual consistency across services."
  },
  {
    "type": "mcq",
    "level": "advanced",
    "topic": "Architectural Patterns",
    "question": "Which architectural pattern focuses on separating the user interface from the business logic and the data access logic?",
    "options": [
      "Microservices",
      "CQRS",
      "MVC (Model-View-Controller)",
      "Event Sourcing"
    ],
    "correct_answer": "MVC (Model-View-Controller)",
    "answer": "MVC is a classic architectural pattern for separating concerns in application development."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Cloud-Native .NET",
    "question": "Explain the differences between Azure Service Bus and Azure Event Hubs and when you might choose one over the other in a .NET cloud application.",
    "answer": "Azure Service Bus is a fully managed enterprise message broker with features like message queues, topics, and subscriptions. It supports transactional messaging and guaranteed delivery. Event Hubs is a highly scalable event ingestion service optimized for high throughput and low latency, suitable for telemetry and event streaming scenarios. Choose Service Bus for reliable messaging with complex routing and transactional needs, and Event Hubs for high-volume event ingestion."
  },
  {
    "type": "scenario",
    "level": "advanced",
    "topic": "Cloud-Native .NET",
    "question": "You are building a serverless application on Azure using .NET Azure Functions. What are some important considerations for optimizing the performance and cost of your functions?",
    "answer": "Considerations include minimizing cold starts, optimizing function execution time, choosing the appropriate hosting plan, being mindful of resource consumption, leveraging durable functions for stateful workflows, and optimizing data access."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Cloud-Native .NET",
    "question": "What are the benefits of using containers (like Docker) for deploying .NET applications to the cloud?",
    "answer": "Benefits include consistent deployment across different environments, isolation of applications, improved resource utilization, simplified scaling and management, and portability across different cloud providers."
  },
  {
    "type": "mcq",
    "level": "advanced",
    "topic": "Cloud-Native .NET",
    "question": "Which Azure service is specifically designed for running containerized applications at scale using Kubernetes?",
    "options": [
      "Azure App Service",
      "Azure Container Instances",
      "Azure Kubernetes Service (AKS)",
      "Azure Functions"
    ],
    "correct_answer": "Azure Kubernetes Service (AKS)",
    "answer": "AKS provides a managed Kubernetes environment in Azure."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Interop",
    "question": "What are some common challenges you might encounter when interoperating between .NET and unmanaged code, and how can you address them?",
    "answer": "Challenges include managing memory (manual allocation/deallocation in unmanaged code), handling different data types and marshaling between managed and unmanaged memory, dealing with different calling conventions, and potential security risks. Solutions involve careful use of P/Invoke attributes, proper memory management (e.g., using `IntPtr` and `Marshal` class), and thorough testing."
  },
  {
    "type": "scenario",
    "level": "advanced",
    "topic": "Interop",
    "question": "You need to integrate with a legacy C++ library in your modern .NET 8 application. What are the different approaches you could take for interoperability?",
    "answer": "Approaches include using P/Invoke for calling functions in a native DLL, creating a COM wrapper for the C++ library and interacting with it through COM interop, or potentially using C++/CLI to create a mixed-mode assembly that can bridge the gap between managed and unmanaged code."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": ".NET Runtime Internals",
    "question": "Explain the role of the Just-In-Time (JIT) compiler in the .NET runtime.",
    "answer": "The JIT compiler translates Intermediate Language (IL) code into native machine code at runtime, just before the code is executed for the first time. This allows for platform independence (IL can run on any .NET-supported OS) while still providing efficient native code execution. The JIT compiler can also perform optimizations based on the specific hardware and runtime environment."
  },
  {
    "type": "mcq",
    "level": "advanced",
    "topic": ".NET Runtime Internals",
    "question": "In which memory area are most reference type objects allocated in the .NET runtime?",
    "options": [
      "Stack",
      "Heap",
      "Static Memory",
      "Registers"
    ],
    "correct_answer": "Heap",
    "answer": "The managed heap is where the CLR allocates memory for most objects."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Advanced LINQ",
    "question": "Explain the difference between `IEnumerable<T>` and `IQueryable<T>` in LINQ and when you would use each.",
    "answer": "`IEnumerable<T>` represents a sequence of objects in memory and supports LINQ to Objects. Queries on `IEnumerable<T>` are executed in memory. `IQueryable<T>` represents a sequence of objects that can be queried and supports LINQ to Providers (like LINQ to SQL or Entity Framework). Queries on `IQueryable<T>` are typically translated and executed at the data source."
  },
  {
    "type": "scenario",
    "level": "advanced",
    "topic": "Advanced LINQ",
    "question": "You have a complex LINQ query that involves multiple joins and filtering. How would you analyze its performance and identify potential optimizations when using Entity Framework Core?",
    "answer": "Enable logging in EF Core to see the generated SQL queries. Analyze the query plan generated by the database. Consider using techniques like eager loading (`Include`), explicit loading (`Load`), or lazy loading (with caution). Ensure proper indexing on database tables and potentially rewrite parts of the query using raw SQL if needed."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Reflection Emit",
    "question": "What is Reflection Emit in .NET and what are some advanced use cases for it?",
    "answer": "Reflection Emit allows you to generate and execute code dynamically at runtime. Advanced use cases include creating dynamic proxies, implementing aspect-oriented programming (AOP) frameworks, building dynamic code generators, and creating specialized serialization/deserialization routines."
  },
  {
    "type": "mcq",
    "level": "advanced",
    "topic": "Reflection Emit",
    "question": "Reflection Emit operates primarily within which .NET namespace?",
    "options": [
      "System.Reflection",
      "System.Reflection.Emit",
      "System.CodeDom",
      "System.Linq.Expressions"
    ],
    "correct_answer": "System.Reflection.Emit",
    "answer": "This namespace contains the classes needed to generate dynamic code."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Blazor Advanced",
    "question": "Explain the different rendering modes available in Blazor in .NET 8 and their respective advantages and disadvantages.",
    "answer": "Blazor in .NET 8 offers several rendering modes: Server-Side Rendering (SSR), Client-Side Rendering (CSR) with WebAssembly, Auto rendering (initial SSR followed by WebAssembly), and Static Server Rendering (SSR for non-interactive content). Each mode has trade-offs in terms of performance, interactivity, SEO, and deployment complexity."
  },
  {
    "type": "scenario",
    "level": "advanced",
    "topic": "Blazor Advanced",
    "question": "You are building a complex Blazor WebAssembly application that needs to interact with a large amount of data. How would you optimize the application's performance and memory usage on the client-side?",
    "answer": "Strategies include using virtualization for lists and tables, minimizing JavaScript interop calls, optimizing data transfer sizes, using lazy loading for components and modules, and being mindful of component lifecycle and disposal to prevent memory leaks."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "gRPC in .NET",
    "question": "What are the key advantages of using gRPC over traditional RESTful APIs for inter-service communication in a .NET microservices architecture?",
    "answer": "Advantages include higher performance due to binary serialization (Protocol Buffers), code-first contract definition using Protocol Buffers, built-in support for code generation in multiple languages, and support for bidirectional streaming and multiplexing over HTTP/2."
  },
  {
    "type": "mcq",
    "level": "advanced",
    "topic": "gRPC in .NET",
    "question": "gRPC primarily uses which protocol for message serialization?",
    "options": [
      "JSON",
      "XML",
      "Protocol Buffers",
      "SOAP"
    ],
    "correct_answer": "Protocol Buffers",
    "answer": "Protocol Buffers are a language-neutral, platform-neutral extensible mechanism for serializing structured data."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "MAUI Advanced",
    "question": "What are some strategies for sharing code effectively between different platforms (iOS, Android, Windows, macOS) when developing a cross-platform application using .NET MAUI?",
    "answer": "Strategies include using shared projects for UI-agnostic logic, MVVM or similar architectural patterns to separate UI from business logic, platform-specific code using conditional compilation (`#if`), and using platform-specific services through interfaces for platform-dependent functionalities."
  },
  {
    "type": "scenario",
    "level": "advanced",
    "topic": "MAUI Advanced",
    "question": "You need to access a platform-specific API (e.g., accessing the device's camera) in your .NET MAUI application. How would you achieve this?",
    "answer": "Use platform-specific code within the respective platform projects (iOS, Android, etc.). You can then expose this functionality through an interface defined in your shared project and use dependency injection or platform services to access the platform-specific implementation from your shared code."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Advanced Testing",
    "question": "Explain the concept of mutation testing and how it can complement traditional unit testing in a .NET project.",
    "answer": "Mutation testing involves introducing small changes (mutations) to your source code and then running your unit tests. If the tests still pass after a mutation that should have been caught, it indicates a weakness in your test suite. Mutation testing helps ensure that your tests are actually verifying the behavior of your code and not just covering lines of code."
  },
  {
    "type": "mcq",
    "level": "advanced",
    "topic": "Advanced Testing",
    "question": "Which type of testing typically focuses on verifying the interactions between different components or services of an application?",
    "options": [
      "Unit Testing",
      "Integration Testing",
      "End-to-End Testing",
      "Acceptance Testing"
    ],
    "correct_answer": "Integration Testing",
    "answer": "Integration tests ensure that different parts of the system work together correctly."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Memory Management Deep Dive",
    "question": "What is the Large Object Heap (LOH) in .NET and what are its implications for performance?",
    "answer": "The LOH is a separate heap in the .NET runtime used for allocating objects larger than a certain threshold (currently 85,000 bytes). Objects on the LOH are not compacted as frequently as those on the small object heap, which can lead to fragmentation and performance issues if many large, short-lived objects are allocated."
  },
  {
    "type": "scenario",
    "level": "advanced",
    "topic": "Memory Management Deep Dive",
    "question": "You are experiencing OutOfMemoryException in your .NET application. What are some potential causes and how would you diagnose the issue?",
    "answer": "Potential causes include memory leaks, excessive allocation of large objects, and insufficient memory allocated to the process. Diagnosis involves using memory profiling tools to identify memory usage patterns, track object allocations and lifetimes, and pinpoint the objects consuming the most memory."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Finalization and Disposal",
    "question": "Explain the difference between finalizers and the `IDisposable` interface in .NET and when each should be used.",
    "answer": "Finalizers (destructors in C#) are used to perform cleanup of unmanaged resources when an object is garbage collected. However, finalization is non-deterministic and can impact performance. The `IDisposable` interface provides a deterministic way for an object to release unmanaged resources explicitly using the `Dispose()` method. Implement `IDisposable` for objects holding unmanaged resources and provide a finalizer as a safety net if `Dispose()` is not called."
  },
  {
    "type": "mcq",
    "level": "advanced",
    "topic": "Finalization and Disposal",
    "question": "Which of the following statements about finalizers in C# is true?",
    "options": [
      "They are called deterministically.",
      "They are the primary mechanism for releasing managed resources.",
      "They are called by the Garbage Collector when an object is about to be reclaimed.",
      "They are always executed on the same thread as the object's creation."
    ],
    "correct_answer": "They are called by the Garbage Collector when an object is about to be reclaimed.",
    "answer": "Finalizers provide a last chance to release unmanaged resources."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Code Generation",
    "question": "Beyond Reflection Emit, what are some other techniques for code generation in .NET and what are their use cases?",
    "answer": "Other techniques include using T4 Text Templates for generating code based on templates and data, Source Generators (introduced in C# 9) for generating code during compilation, and using libraries like Roslyn for more advanced code analysis and generation scenarios."
  },
  {
    "type": "scenario",
    "level": "advanced",
    "topic": "Code Generation",
    "question": "You need to generate a large number of similar classes at compile time based on a configuration file. Which code generation technique in .NET would be most suitable for this scenario and why?",
    "answer": "Source Generators would be a suitable choice as they allow you to generate code during the compilation process, which can then be included in your assembly. This avoids runtime overhead associated with Reflection Emit and provides compile-time type checking."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Advanced Configuration",
    "question": "Explain how you can use custom configuration providers in ASP.NET Core to load configuration from sources beyond the built-in ones (like JSON, XML, environment variables).",
    "answer": "You can create a custom configuration provider by implementing the `IConfigurationProvider` and `IConfigurationSource` interfaces. This allows you to define how configuration data is loaded from any custom source (e.g., a database, a custom file format, or an external service) and integrated into the ASP.NET Core configuration system."
  },
  {
    "type": "mcq",
    "level": "advanced",
    "topic": "Advanced Configuration",
    "question": "Which interface is the core abstraction for accessing configuration data in ASP.NET Core?",
    "options": [
      "IConfigurationProvider",
      "IConfigurationSource",
      "IConfiguration",
      "IOptions<T>"
    ],
    "correct_answer": "IConfiguration",
    "answer": "`IConfiguration` represents the application's configuration."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Advanced Dependency Injection",
    "question": "Explain the concept of service lifetimes (Singleton, Scoped, Transient) in ASP.NET Core's dependency injection system and when you would choose each.",
    "answer": "Singleton services are created once per application lifetime. Scoped services are created once per request (in web applications). Transient services are created every time they are requested. Choose Singleton for shared, stateless services, Scoped for request-specific services (like EF Core DbContext in web scenarios), and Transient for lightweight, stateless services that should be newly created each time."
  },
  {
    "type": "scenario",
    "level": "advanced",
    "topic": "Advanced Dependency Injection",
    "question": "You have a service that requires some initialization logic to be executed after it's been created by the dependency injection container. How would you achieve this in ASP.NET Core?",
    "answer": "You can use the `IHostedService` interface for background tasks that run for the lifetime of the application. For initialization logic that needs to run once after a service is created, you can implement an `IStartupFilter` or register a delegate to be executed after the service is resolved for the first time."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Advanced Networking",
    "question": "What are some of the key differences between TCP and UDP protocols and when would you choose one over the other for a .NET application?",
    "answer": "TCP is a connection-oriented protocol that provides reliable, ordered, and error-checked delivery of data. UDP is a connectionless protocol that is faster but does not guarantee delivery or order. Choose TCP for applications where reliability is crucial (e.g., web Browse, file transfer) and UDP for applications where speed is more important than guaranteed delivery (e.g., streaming, online gaming)."
  },
  {
    "type": "mcq",
    "level": "advanced",
    "topic": "Advanced Networking",
    "question": "Which .NET class is commonly used for making HTTP requests?",
    "options": [
      "Socket",
      "TcpClient",
      "UdpClient",
      "HttpClient"
    ],
    "correct_answer": "HttpClient",
    "answer": "`HttpClient` provides a high-level API for sending HTTP requests and receiving responses."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Advanced Testing Strategies",
    "question": "Explain the concept of Behavior-Driven Development (BDD) and how it can be implemented in a .NET project.",
    "answer": "BDD is a development approach that focuses on defining the behavior of an application from the perspective of the business stakeholder. It typically involves writing tests in a natural language format (e.g., using Gherkin syntax with tools like SpecFlow in .NET) that describe scenarios and expected outcomes."
  },
  {
    "type": "scenario",
    "level": "advanced",
    "topic": "Advanced Testing Strategies",
    "question": "Your team is struggling with flaky end-to-end tests in your .NET application. What are some common causes of flakiness and how would you address them?",
    "answer": "Common causes include asynchronous operations with implicit waits, reliance on external systems, inconsistent test data, and environmental factors. Solutions involve using explicit waits, mocking external dependencies, ensuring consistent test data setup and teardown, and running tests in isolated environments."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Advanced LINQ to Entities",
    "question": "Explain the implications of using `AsTracking()` vs. `AsNoTracking()` in Entity Framework Core queries.",
    "answer": "`AsTracking()` (which is the default) tells EF Core to track the entities retrieved from the database. This allows EF Core to detect changes made to these entities and automatically save them when `SaveChanges()` is called. `AsNoTracking()` disables change tracking, which can improve performance for read-only scenarios as EF Core doesn't need to maintain snapshots of the entities."
  },
  {
    "type": "mcq",
    "level": "advanced",
    "topic": "Advanced LINQ to Entities",
    "question": "When should you typically use `AsNoTracking()` in Entity Framework Core?",
    "options": [
      "When you need to update entities after querying them.",
      "When you are only reading data and don't intend to modify it.",
      "When you are performing complex data manipulations in memory.",
      "When you want EF Core to automatically detect and resolve concurrency conflicts."
    ],
    "correct_answer": "When you are only reading data and don't intend to modify it.",
    "answer": "`AsNoTracking()` is beneficial for read-only operations to reduce overhead."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Advanced Build Processes",
    "question": "How can you extend the MSBuild process in a .NET project to perform custom tasks during the build?",
    "answer": "You can extend MSBuild by creating custom tasks (implementing the `ITask` interface), writing custom targets in your `.csproj` file, or using MSBuild extensions and SDKs. This allows for automation of tasks like code generation, custom validation, or integration with external tools during the build."
  },
  {
    "type": "scenario",
    "level": "advanced",
    "topic": "Advanced Build Processes",
    "question": "Your team wants to enforce specific coding standards beyond what standard Roslyn analyzers provide. How would you create a custom Roslyn analyzer and code fixer to achieve this in a .NET solution?",
    "answer": "You would create a separate project that references the Roslyn analyzer and code fixer NuGet packages. The analyzer would analyze the code syntax and semantics to identify violations of your custom standards, and the code fixer would provide suggestions or automatic refactorings to correct those violations. These can then be packaged as a NuGet package and consumed by other projects in the solution."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Performance - Niche Scenarios",
    "question": "In a .NET application deployed to a resource-constrained environment (e.g., an IoT device with limited memory and processing power), what specific performance optimization techniques would you prioritize?",
    "answer": "Prioritize techniques that minimize memory footprint and CPU usage. This might include aggressive use of value types, avoiding unnecessary object allocations, using efficient data structures, minimizing the use of reflection, trimming unused code during compilation (using the .NET linker), and potentially using platform-specific optimizations."
  },
  {
    "type": "mcq",
    "level": "advanced",
    "topic": "Performance - Niche Scenarios",
    "question": "Which .NET feature is specifically designed to reduce the size of self-contained deployments by removing unused code?",
    "options": [
      "Just-In-Time (JIT) compilation",
      "Ahead-Of-Time (AOT) compilation",
      "The .NET Linker",
      "Garbage Collection"
    ],
    "correct_answer": "The .NET Linker",
    "answer": "The .NET Linker analyzes your application and removes unused code from the final deployment."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Obscure .NET Features",
    "question": "What is the purpose of the `System.Diagnostics.ConditionalAttribute` in C# and when might you find it useful?",
    "answer": "The `ConditionalAttribute` allows you to conditionally include or exclude method calls based on a preprocessor directive. This is often used for debugging or tracing code that should only be executed in specific build configurations (e.g., `DEBUG`)."
  },
  {
    "type": "scenario",
    "level": "advanced",
    "topic": "Obscure .NET Features",
    "question": "You need to implement a custom synchronization primitive in .NET that is not available in the standard library. What are some of the low-level synchronization primitives you could leverage from the `System.Threading` namespace to build your custom solution?",
    "answer": "You could leverage primitives like `ManualResetEvent`, `AutoResetEvent`, `SemaphoreSlim`, `Mutex`, and the `Interlocked` class for atomic operations. Understanding how these primitives work allows you to build more complex synchronization mechanisms tailored to specific needs."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Advanced Security",
    "question": "Explain the concept of 'defense in depth' as it applies to securing a .NET application.",
    "answer": "Defense in depth involves implementing multiple layers of security controls to protect an application. If one layer fails, others are in place to provide continued protection. This includes measures at the network level, application level (e.g., input validation, authentication, authorization), and data level (e.g., encryption)."
  },
  {
    "type": "mcq",
    "level": "advanced",
    "topic": "Advanced Security",
    "question": "Which type of attack attempts to exploit vulnerabilities in an application's input handling to execute malicious scripts in a user's browser?",
    "options": [
      "SQL Injection",
      "Cross-Site Request Forgery (CSRF)",
      "Cross-Site Scripting (XSS)",
      "Man-in-the-Middle (MITM)"
    ],
    "correct_answer": "Cross-Site Scripting (XSS)",
    "answer": "XSS attacks can be mitigated through proper input sanitization and output encoding."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Edge Cases and Tricky Aspects",
    "question": "What are some of the potential pitfalls or unexpected behaviors when working with floating-point numbers (`float` and `double`) in C#?",
    "answer": "Pitfalls include precision issues due to the binary representation of decimal numbers, potential for rounding errors, and the special values like `NaN` (Not-a-Number) and infinity that need to be handled correctly."
  },
  {
    "type": "scenario",
    "level": "advanced",
    "topic": "Edge Cases and Tricky Aspects",
    "question": "You have a seemingly simple piece of code that involves string comparisons in C#, but it's not behaving as expected in all cases. What are some factors that could be causing this discrepancy?",
    "answer": "Factors could include differences in culture-specific comparison rules, case sensitivity, the use of ordinal vs. cultural comparisons, and the presence of Unicode characters that might be treated differently depending on the comparison method used."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Specialized Applications",
    "question": "What are some specific considerations when developing a real-time financial trading system using .NET in terms of latency, throughput, and data integrity?",
    "answer": "Considerations include minimizing latency through techniques like avoiding garbage collection pauses, using low-latency networking protocols, optimizing data serialization/deserialization, ensuring high throughput for processing large volumes of data, and maintaining strict data integrity through transactional processing and robust error handling."
  },
  {
    "type": "mcq",
    "level": "advanced",
    "topic": "Specialized Applications",
    "question": "For very low-latency scenarios in .NET, which of the following might be a consideration?",
    "options": [
      "Extensive use of reflection.",
      "Heavy reliance on string manipulation.",
      "Careful management of memory allocation to avoid GC pressure.",
      "Frequent use of `async`/`await` for all operations."
    ],
    "correct_answer": "Careful management of memory allocation to avoid GC pressure.",
    "answer": "Garbage collection pauses can introduce significant latency."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Advanced Debugging and Diagnostics",
    "question": "Beyond basic breakpoints and stepping, what are some advanced debugging techniques you can use in Visual Studio to diagnose complex issues in a running .NET application?",
    "answer": "Advanced techniques include using conditional breakpoints, tracepoints, the Parallel Tasks and Parallel Stacks windows, the Performance Profiler, IntelliTrace (historical debugging), and analyzing memory dumps."
  },
  {
    "type": "scenario",
    "level": "advanced",
    "topic": "Advanced Debugging and Diagnostics",
    "question": "Your production .NET application is experiencing intermittent performance issues that are difficult to reproduce locally. What strategies would you use to diagnose the problem in the production environment?",
    "answer": "Strategies include enabling detailed logging and tracing, using Application Insights or other APM tools to monitor performance metrics and identify slow requests, collecting memory dumps for post-mortem analysis, and potentially using remote debugging (with caution and proper security measures)."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Advanced Interop",
    "question": "What are some of the challenges and considerations when interoperating with native libraries on different operating systems using .NET?",
    "answer": "Challenges include differences in API availability and behavior across platforms, managing platform-specific data types and calling conventions, and the need for conditional compilation or platform-specific implementations to handle these variations."
  },
  {
    "type": "mcq",
    "level": "advanced",
    "topic": "Advanced Interop",
    "question": "When using P/Invoke to call a native function that requires a callback, what .NET construct is typically used to represent the callback function?",
    "options": [
      "Class",
      "Interface",
      "Delegate",
      "Event"
    ],
    "correct_answer": "Delegate",
    "answer": "Delegates provide a type-safe way to represent function pointers for callbacks."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Advanced Generics",
    "question": "Explain the concepts of covariance and contravariance in the context of generic types in C# and provide examples of where they might be useful.",
    "answer": "Covariance allows you to use a more derived type where a less derived type is expected (e.g., `IEnumerable<string>` can be treated as `IEnumerable<object>`). Contravariance allows you to use a less derived type where a more derived type is expected (e.g., an action that takes an `object` can be used where an action that takes a `string` is expected). They are useful for making generic interfaces and delegates more flexible."
  },
  {
    "type": "scenario",
    "level": "advanced",
    "topic": "Advanced Generics",
    "question": "You are designing a generic repository interface in .NET. How would you define the interface to support both synchronous and asynchronous operations for data access?",
    "answer": "You could define separate methods for synchronous and asynchronous operations (e.g., `GetById(TKey id)` and `GetByIdAsync(TKey id)`). Alternatively, you could use `ValueTask<T>` as the return type for asynchronous operations to potentially avoid heap allocations in synchronous scenarios."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Advanced Reflection",
    "question": "What are some advanced scenarios where you might use dynamic code generation with Reflection Emit beyond basic proxy creation?",
    "answer": "Advanced scenarios include implementing custom serialization formats, creating high-performance data mapping routines, generating specialized code for specific hardware architectures, and building dynamic scripting engines within your application."
  },
  {
    "type": "mcq",
    "level": "advanced",
    "topic": "Advanced Reflection",
    "question": "Which .NET feature allows you to create delegates to non-public methods using reflection?",
    "options": [
      "`Activator.CreateInstance`",
      "`Type.GetMethods`",
      "`MethodInfo.Invoke`",
      "`MethodInfo.CreateDelegate`"
    ],
    "correct_answer": "`MethodInfo.CreateDelegate`",
    "answer": "This method allows you to create a delegate that can invoke even private methods."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Advanced LINQ Expressions",
    "question": "Explain the purpose of `Expression<Func<T, bool>>` in LINQ and how it differs from a regular `Func<T, bool>` delegate.",
    "answer": "`Expression<Func<T, bool>>` represents a lambda expression as a data structure (an expression tree) rather than compiled code. This allows LINQ providers (like Entity Framework) to analyze the expression tree and translate it into an appropriate query for the underlying data source. A `Func<T, bool>` delegate, on the other hand, represents compiled code that would be executed in memory."
  },
  {
    "type": "scenario",
    "level": "advanced",
    "topic": "Advanced LINQ Expressions",
    "question": "You need to build a dynamic filtering mechanism for a Web API endpoint that allows clients to specify complex filtering criteria at runtime. How could you leverage LINQ expressions to achieve this?",
    "answer": "You could parse the filtering criteria from the client's request and dynamically build an `Expression<Func<T, bool>>` that represents the filter. Libraries like LINQKit or the Dynamic LINQ library can help in constructing these expressions at runtime, which can then be used with `Where()` clauses in your LINQ queries."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Advanced ASP.NET Core",
    "question": "Explain the concept of middleware in ASP.NET Core and how you can create custom middleware components.",
    "answer": "Middleware components are software that are assembled into an application pipeline to handle requests and responses. Each component can perform specific operations. You can create custom middleware by implementing a class with an `InvokeAsync` method that takes an `HttpContext` and a `RequestDelegate` as parameters. This allows you to intercept and process requests and responses in a specific order."
  },
  {
    "type": "mcq",
    "level": "advanced",
    "topic": "Advanced ASP.NET Core",
    "question": "In ASP.NET Core, which interface must be implemented by a custom middleware component?",
    "options": [
      "IMiddleware",
      "IStartupFilter",
      "IActionFilter",
      "IEndpointFilter"
    ],
    "correct_answer": "IMiddleware",
    "answer": "While you can implement middleware directly with an `InvokeAsync` method, implementing `IMiddleware` allows for dependency injection within the middleware."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Advanced Entity Framework Core",
    "question": "Discuss the different strategies for handling concurrency conflicts in Entity Framework Core.",
    "answer": "EF Core supports optimistic concurrency control using either row versioning (using a `rowversion` or similar column) or original values. When saving changes, EF Core checks if the data in the database has been modified since it was loaded. If a conflict is detected, an exception is thrown."
  },
  {
    "type": "scenario",
    "level": "advanced",
    "topic": "Advanced Entity Framework Core",
    "question": "You need to optimize the performance of a read-heavy Web API endpoint that retrieves data using Entity Framework Core. The data doesn't change frequently. What caching strategies could you implement?",
    "answer": "Strategies include in-memory caching (using `IMemoryCache`), distributed caching (like Redis or Azure Cache for Redis), and HTTP response caching. You could cache the results of the EF Core queries based on specific criteria or cache the entire HTTP response for the endpoint."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Advanced Testing - Integration",
    "question": "When writing integration tests for an ASP.NET Core Web API that interacts with a database, what are some common approaches for setting up and cleaning up the test database?",
    "answer": "Approaches include using an in-memory database (like SQLite in-memory mode or `Microsoft.EntityFrameworkCore.InMemory`), creating and seeding a dedicated test database before each test run and cleaning it up afterwards, or using database snapshots or migrations to ensure a consistent test environment."
  },
  {
    "type": "mcq",
    "level": "advanced",
    "topic": "Advanced Testing - Integration",
    "question": "Using an in-memory database for integration tests is generally suitable for:",
    "options": [
      "Testing the full end-to-end flow of the application.",
      "Testing interactions with a specific database provider's features.",
      "Testing the core business logic without external dependencies.",
      "Testing the performance of database queries."
    ],
    "correct_answer": "Testing the core business logic without external dependencies.",
    "answer": "In-memory databases provide a fast and isolated testing environment for logic that interacts with a database abstraction."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Advanced C# - Delegates and Events",
    "question": "Explain the concept of custom event accessors (`add` and `remove`) in C# and provide a scenario where you might need to implement them.",
    "answer": "Custom event accessors allow you to control the underlying logic for adding and removing event handlers. This is useful in scenarios where you need to implement custom synchronization for event handlers, perform logging when handlers are added or removed, or optimize the storage of event handlers."
  },
  {
    "type": "scenario",
    "level": "advanced",
    "topic": "Advanced C# - Delegates and Events",
    "question": "You have a multicast delegate in C#. What are some potential issues or considerations you need to be aware of when invoking such a delegate, especially if the individual methods have return values or might throw exceptions?",
    "answer": "When invoking a multicast delegate, the delegates are executed in the order they were added. If a method in the invocation list has a return value, only the return value of the last method invoked will be available. If any method in the list throws an exception, the remaining delegates in the invocation list will not be executed unless you explicitly handle the exceptions within the invocation process (e.g., by iterating through the invocation list and calling each delegate within a try-catch block)."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Advanced C# - Generics",
    "question": "Explain the concept of variance (covariance and contravariance) with generic interfaces in C# and provide a practical example of each.",
    "answer": "Covariance allows a generic type parameter to be more derived than specified in the interface (e.g., `IEnumerable<string>` is covariant with `IEnumerable<object>`). Contravariance allows a generic type parameter to be less derived than specified (e.g., `Action<object>` is contravariant with `Action<string>`). Covariance is useful for read-only collections, while contravariance is useful for actions or consumers of data."
  },
  {
    "type": "scenario",
    "level": "advanced",
    "topic": "Advanced C# - Generics",
    "question": "You need to define a generic method in C# that can only accept type arguments that are both a reference type and implement two specific interfaces. How would you define the generic type constraint for this method?",
    "answer": "You would use multiple `where` clauses: `where T : class, IInterface1, IInterface2`."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Advanced C# - LINQ",
    "question": "Describe the process of creating a custom LINQ provider in C#. What interfaces would you need to implement and what are the key challenges involved?",
    "answer": "Creating a custom LINQ provider involves implementing interfaces like `IQueryProvider` and `IQueryable<T>`. The key challenges include parsing and translating LINQ expression trees into the query language of your underlying data source, handling different LINQ operators, and ensuring efficient query execution."
  },
  {
    "type": "scenario",
    "level": "advanced",
    "topic": "Advanced C# - LINQ",
    "question": "You have a complex LINQ query with multiple `Select` and `Where` clauses. How can you inspect the generated expression tree at runtime to understand how the query is being translated?",
    "answer": "You can use the debugger to inspect the `Expression` object representing your LINQ query. You can also write code to traverse the expression tree and analyze its nodes, potentially using `ExpressionVisitor` to simplify this process."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Advanced C# - Asynchronous Programming",
    "question": "Explain the concept of a custom `TaskScheduler` in C# and provide a scenario where you might need to implement one.",
    "answer": "A `TaskScheduler` controls how and where tasks are executed. You might need a custom `TaskScheduler` for scenarios like ensuring tasks run on a specific thread (e.g., the UI thread), limiting the degree of parallelism, or implementing priority-based task execution."
  },
  {
    "type": "scenario",
    "level": "advanced",
    "topic": "Advanced C# - Asynchronous Programming",
    "question": "You have a series of independent asynchronous operations that you want to execute with a limited degree of parallelism (e.g., only run 5 at a time). How would you achieve this in C#?",
    "answer": "You can use `SemaphoreSlim` to control the number of concurrent tasks. Before starting each asynchronous operation, acquire a slot on the semaphore. Release the slot when the operation completes. This ensures that only a limited number of tasks are running concurrently."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Advanced C# - Memory Management",
    "question": "Beyond the managed heap, what other memory regions are relevant to a .NET application's execution, and what types of data are typically stored in them?",
    "answer": "Other relevant memory regions include the stack (for value types and method call information), static memory (for static variables), and potentially the large object heap (for large reference type objects). Understanding these regions is important for diagnosing memory-related issues."
  },
  {
    "type": "scenario",
    "level": "advanced",
    "topic": "Advanced C# - Memory Management",
    "question": "You suspect a memory leak in a long-running .NET service. What steps would you take to diagnose and pinpoint the source of the leak using memory profiling tools?",
    "answer": "Steps include taking multiple memory snapshots at different points in time, comparing the snapshots to identify objects that are growing in number and not being released, analyzing the retention paths of these objects to understand what is keeping them alive, and examining the types and sizes of the objects to identify potential candidates for the leak."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Advanced OOP - Design Patterns",
    "question": "Explain the Intent pattern and provide a practical example of its implementation in C# that goes beyond the typical examples.",
    "answer": "The Intent pattern (also known as the Command pattern) encapsulates a request as an object, thereby letting you parameterize clients with queues, requests, and operations. A more advanced example could involve implementing a system where commands can be logged, undone, or even serialized and sent across a network for distributed processing."
  },
  {
    "type": "scenario",
    "level": "advanced",
    "topic": "Advanced OOP - Design Patterns",
    "question": "You are designing a system that needs to support multiple strategies for calculating discounts on products. How would you implement this using the Strategy pattern in C# while ensuring flexibility and maintainability?",
    "answer": "Define an interface for the discount calculation strategy with a method like `CalculateDiscount(Product product)`. Create concrete classes that implement this interface for each specific discount strategy (e.g., `PercentageDiscountStrategy`, `FixedAmountDiscountStrategy`). In your main logic, you can then inject or select the appropriate strategy based on the context or configuration."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Advanced OOP - Composition over Inheritance",
    "question": "Describe a complex scenario where favoring composition over inheritance in C# would lead to a more robust and maintainable design. Explain the drawbacks of using inheritance in that specific context.",
    "answer": "Consider designing a system for different types of vehicles (e.g., cars, trucks, motorcycles). Using deep inheritance might lead to issues as you add more features (e.g., towing capability, number of wheels). Favoring composition would involve having a base `Vehicle` class and then composing it with features like `Engine`, `Wheels`, `TowingMechanism` through interfaces. This allows for more flexible combinations and avoids the complexities of a rigid inheritance hierarchy."
  },
  {
    "type": "scenario",
    "level": "advanced",
    "topic": "Advanced OOP - SOLID Principles",
    "question": "You are designing a logging system in C#. How would you ensure that your design adheres to the Open/Closed Principle, allowing for the addition of new logging targets (e.g., file, database, console) without modifying the core logging logic?",
    "answer": "Define an interface like `ILogger` with methods for logging messages. The core logging logic should depend on this abstraction. For each new logging target, create a concrete class that implements `ILogger`. The logging framework can then be configured to use the desired implementations without modifying the core logging logic itself."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Advanced OOP - Architectural Patterns",
    "question": "From an OOP perspective, how can you model the interactions and responsibilities within an Event Sourcing architecture in a .NET application?",
    "answer": "In Event Sourcing, each change to the state of an application is captured as an immutable event. OOP can be used to model these events as classes. Aggregates (representing entities) are responsible for raising these events based on commands. Handlers (often in separate services) subscribe to these events and update read models or trigger other actions. This aligns with OOP principles of encapsulation (events encapsulate state changes) and separation of concerns (aggregates focus on domain logic, handlers on event processing)."
  },
  {
    "type": "scenario",
    "level": "advanced",
    "topic": "Advanced OOP - Extensibility and Maintainability",
    "question": "You are building a plugin-based system in .NET. How would you design the core application and the plugin interface using OOP principles to ensure loose coupling, extensibility, and maintainability?",
    "answer": "Define a clear interface (`IPlugin`) that all plugins must implement. The core application should depend only on this interface. Use dependency injection to discover and load plugins at runtime. This promotes loose coupling as the core application doesn't need to know the concrete types of the plugins. New functionality can be added by creating new plugin implementations without modifying the core application."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Advanced C# - Records",
    "question": "Explain the key features and benefits of using records in C# 9 and later, particularly in the context of data transfer objects or immutable data structures.",
    "answer": "Records provide a concise syntax for creating immutable data types. They automatically generate members like properties, a constructor, a `PrintMembers` method, equality members, and a `with` expression for non-destructive mutation. They are highly beneficial for DTOs and scenarios where immutability is desired for thread safety and predictability."
  },
  {
    "type": "scenario",
    "level": "advanced",
    "topic": "Advanced C# - Pattern Matching",
    "question": "Describe a complex scenario where you could leverage advanced pattern matching features in C# (e.g., property patterns, positional patterns, `when` clauses) to write more concise and readable code.",
    "answer": "Consider a scenario where you need to process different types of geometric shapes, each with varying properties. You could use pattern matching with type patterns, property patterns to check specific properties (e.g., `case Circle { Radius: var r }`), positional patterns for tuples or records, and `when` clauses for more complex conditions to implement the processing logic in a very expressive way."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Advanced C# - Init-Only Setters",
    "question": "What are init-only setters in C# 9 and later, and how do they differ from regular setters and read-only fields? When would you use them?",
    "answer": "Init-only setters allow properties to be set only during object initialization, either through an object initializer or within the constructor. After initialization, the property becomes read-only. They differ from regular setters which can be called at any time, and from read-only fields which can only be set in the constructor. Init-only setters are useful for creating objects with properties that should be set upon creation but then remain immutable."
  },
  {
    "type": "scenario",
    "level": "advanced",
    "topic": "Advanced C# - Top-Level Statements",
    "question": "How might the introduction of top-level statements in C# 9 and later impact the structure and readability of simple console applications or scripts?",
    "answer": "Top-level statements allow you to write the main logic of a program directly in the `.cs` file without the need for a `Main` method within a class. This can significantly simplify the structure of small console applications and scripts, making them more concise and easier to read, especially for beginners or for quick utility programs."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "OOP - Law of Demeter",
    "question": "Explain the Law of Demeter (LoD) in OOP and how it contributes to reducing coupling and improving maintainability in a C# codebase. Provide an example of a violation and how to refactor it.",
    "answer": "The Law of Demeter states that an object should only talk to its immediate friends. In practical terms, this means an object should only call methods of: itself, its parameter objects, objects it creates, or its direct component objects. Violating LoD can lead to tight coupling. For example, `a.GetB().GetC().DoSomething()` violates LoD. Refactoring might involve asking `a` to perform the action or asking `b` to expose the necessary functionality."
  },
  {
    "type": "scenario",
    "level": "advanced",
    "topic": "OOP - Design for Testability",
    "question": "Describe some OOP principles and C# features that are crucial for designing highly testable code. Provide specific examples of how these can be applied.",
    "answer": "Key principles include Dependency Inversion (depending on abstractions), Single Responsibility (focused classes are easier to test), and Interface Segregation (smaller interfaces are easier to mock). C# features like interfaces, abstract classes, and virtual methods facilitate mocking and stubbing. Constructor injection promotes testability by making dependencies explicit."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Advanced C# - Unsafe Code Revisited",
    "question": "Beyond basic pointer manipulation, what are some more advanced use cases for 'unsafe' code in C# where it might provide significant performance benefits, and what are the critical considerations for using it safely?",
    "answer": "Advanced use cases include direct memory access for high-performance data processing (e.g., image manipulation, network protocols), interacting with hardware-specific APIs, and optimizing interop scenarios. Critical considerations include careful bounds checking, understanding memory layout, avoiding memory leaks, and ensuring the code is thoroughly tested as the CLR's safety guarantees are bypassed."
  },
  {
    "type": "scenario",
    "level": "advanced",
    "topic": "Advanced C# - Value Tuples",
    "question": "You need to return multiple values from a method in C#. Compare and contrast using value tuples versus traditional `Tuple<T1, T2, ...>` and discuss the advantages of value tuples in modern C# development.",
    "answer": "Value tuples provide a lightweight, mutable, and more readable way to return multiple values compared to traditional tuples. They have value equality by default and their elements can be named, improving code clarity. Traditional tuples are reference types and their elements are accessed using `Item1`, `Item2`, etc., which can be less descriptive. Value tuples are generally preferred for returning multiple values due to their conciseness and readability."
  },
  {
    "type": "descriptive",
    "level": "basic",
    "topic": "Threading",
    "question": "What is the difference between a process and a thread?",
    "answer": "A process is an instance of a running application with its own memory space. A thread is a unit of execution within a process, sharing the process's resources."
  },
  {
    "type": "mcq",
    "level": "basic",
    "topic": "Threading",
    "question": "Which is the smallest unit of execution that can be scheduled by the operating system?",
    "options": [
      "Application",
      "Process",
      "Thread",
      "Domain"
    ],
    "correct_answer": "Thread",
    "answer": "Threads are the basic units of CPU utilization."
  },
  {
    "type": "descriptive",
    "level": "basic",
    "topic": "Threading",
    "question": "What is the difference between concurrency and parallelism?",
    "answer": "Concurrency is when two or more tasks can start, run, and complete in overlapping time periods. Parallelism is when two or more tasks run simultaneously."
  },
  {
    "type": "mcq",
    "level": "basic",
    "topic": "Threading",
    "question": "Running multiple threads on a single-core processor typically achieves:",
    "options": [
      "True parallelism",
      "Concurrency through time-slicing",
      "Reduced CPU utilization",
      "Increased memory usage"
    ],
    "correct_answer": "Concurrency through time-slicing",
    "answer": "The processor rapidly switches between threads, giving the illusion of simultaneous execution."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "Threading",
    "question": "How can you create a new thread in C#?",
    "answer": "You can create a new thread using the `System.Threading.Thread` class. You create an instance of the `Thread` class, passing a `ThreadStart` delegate (or a `ParameterizedThreadStart` delegate) that points to the method you want to execute on the new thread, and then call the `Start()` method."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "Threading",
    "question": "What is the purpose of the `Thread.Join()` method?",
    "options": [
      "To start a thread.",
      "To pause the current thread.",
      "To block the calling thread until the joined thread terminates.",
      "To change the priority of a thread."
    ],
    "correct_answer": "To block the calling thread until the joined thread terminates.",
    "answer": "`Thread.Join()` ensures that a thread finishes its execution before the calling thread continues."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "Threading",
    "question": "What is the Thread Pool in .NET and what are its benefits?",
    "answer": "The Thread Pool is a collection of worker threads managed by the system. It's used to execute tasks without the overhead of creating and destroying threads for each task. Benefits include improved performance and resource management."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "Threading",
    "question": "How do you queue a work item to the Thread Pool in .NET?",
    "options": [
      "Using `new ThreadPool().QueueUserWorkItem(...)`",
      "Using `Task.Run(...)`",
      "Using `Thread.Start(...)`",
      "Using `ThreadPool.QueueUserWorkItem(...)`"
    ],
    "correct_answer": "Using `ThreadPool.QueueUserWorkItem(...)`",
    "answer": "This static method queues a task for execution by a thread pool thread."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Threading",
    "question": "Explain the concept of a race condition in multithreaded programming and provide an example.",
    "answer": "A race condition occurs when the outcome of a program depends on the unpredictable order in which multiple threads access shared resources. For example, if two threads try to increment a shared counter without proper synchronization, the final value might be incorrect."
  },
  {
    "type": "mcq",
    "level": "advanced",
    "topic": "Threading",
    "question": "Which of the following is a common mechanism to prevent race conditions in C#?",
    "options": [
      "Garbage Collection",
      "Just-In-Time Compilation",
      "Locking",
      "Reflection"
    ],
    "correct_answer": "Locking",
    "answer": "Locking mechanisms ensure that only one thread can access a critical section of code at a time."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "Threading",
    "question": "What is the purpose of the `lock` keyword in C#?",
    "answer": "The `lock` keyword acquires a mutually exclusive lock on a given object, ensuring that only one thread can enter a critical section of code protected by that lock at any given time. It automatically handles acquiring and releasing the lock."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "Threading",
    "question": "What object should you typically use as the lock object when using the `lock` keyword?",
    "options": [
      "A public field of the class.",
      "A string literal.",
      "A dedicated private object instance.",
      "The `this` keyword for instance methods."
    ],
    "correct_answer": "A dedicated private object instance.",
    "answer": "Using a dedicated private object prevents external code from accidentally locking on the same object."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Threading",
    "question": "Explain the difference between `Monitor.Enter()`/`Monitor.Exit()` and the `lock` keyword in C#.",
    "answer": "The `lock` keyword is syntactic sugar for `Monitor.Enter()` and `Monitor.Exit()` with a `try-finally` block to ensure the lock is always released. `Monitor` class provides more advanced features like `Monitor.TryEnter()`, `Monitor.Wait()`, `Monitor.Pulse()`, and `Monitor.PulseAll()`."
  },
  {
    "type": "mcq",
    "level": "advanced",
    "topic": "Threading",
    "question": "Which method of the `Monitor` class can be used to release the lock on an object and block the current thread until another thread acquires the lock and signals the waiting thread?",
    "options": [
      "Enter()",
      "Exit()",
      "Wait()",
      "Pulse()"
    ],
    "correct_answer": "Wait()",
    "answer": "`Monitor.Wait()` is used for thread synchronization based on object state."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "Threading",
    "question": "What is a deadlock in multithreaded programming and how can you prevent it?",
    "answer": "A deadlock occurs when two or more threads are blocked indefinitely, waiting for each other to release resources that they need. Prevention strategies include ensuring that threads acquire locks in the same order, using timeouts when acquiring locks, and avoiding nested locks where possible."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "Threading",
    "question": "Which of the following is a common cause of deadlocks?",
    "options": [
      "Too many threads",
      "Insufficient memory",
      "Circular dependency on resources",
      "High CPU utilization"
    ],
    "correct_answer": "Circular dependency on resources",
    "answer": "When threads hold resources that others need in a circular fashion, a deadlock can occur."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Threading",
    "question": "Explain the purpose of `Mutex` in C# and how it differs from a `lock`.",
    "answer": "A `Mutex` (mutual exclusion) is a synchronization primitive that can be used to protect a shared resource from being accessed by multiple threads simultaneously. Unlike `lock`, a `Mutex` can span across processes, allowing for inter-process synchronization."
  },
  {
    "type": "mcq",
    "level": "advanced",
    "topic": "Threading",
    "question": "Which synchronization primitive in .NET can be used to control the number of threads that can access a shared resource concurrently?",
    "options": [
      "Mutex",
      "Lock",
      "SemaphoreSlim",
      "Monitor"
    ],
    "correct_answer": "SemaphoreSlim",
    "answer": "`SemaphoreSlim` limits the number of threads that can enter a protected section."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Threading",
    "question": "What is the difference between `Semaphore` and `SemaphoreSlim` in .NET?",
    "answer": "`Semaphore` is a heavier-weight synchronization primitive that can also be used for inter-process synchronization. `SemaphoreSlim` is a lightweight, fast semaphore that is optimized for asynchronous scenarios within a single process."
  },
  {
    "type": "mcq",
    "level": "advanced",
    "topic": "Threading",
    "question": "Which synchronization primitive is most suitable for controlling concurrent access to a resource for reading and writing, where multiple readers can access simultaneously but only one writer can access at a time?",
    "options": [
      "Mutex",
      "SemaphoreSlim",
      "ReaderWriterLockSlim",
      "Barrier"
    ],
    "correct_answer": "ReaderWriterLockSlim",
    "answer": "`ReaderWriterLockSlim` provides separate locks for reading and writing."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "Asynchronous Programming",
    "question": "Explain the purpose of the `async` and `await` keywords in C# and how they relate to threading.",
    "answer": "The `async` keyword marks a method as asynchronous, allowing the use of the `await` keyword within it. The `await` keyword suspends the execution of the method until the awaited task completes, without blocking the calling thread. This allows the thread to return to the thread pool and perform other work, improving responsiveness."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "Asynchronous Programming",
    "question": "What is the return type of an `async` method that performs an operation but does not return a value?",
    "options": [
      "void",
      "int",
      "Task",
      "string"
    ],
    "correct_answer": "Task",
    "answer": "`async` methods that don't return a value typically return a `Task`."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "Asynchronous Programming",
    "question": "What is the difference between `Task` and `Task<T>` in asynchronous programming?",
    "answer": "`Task` represents an asynchronous operation that may or may not return a value. `Task<T>` represents an asynchronous operation that returns a value of type `T` when it completes."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "Asynchronous Programming",
    "question": "What is `ValueTask` in C# and when might you prefer it over `Task`?",
    "options": [
      "It's an older version of `Task`.",
      "It's specifically for CPU-bound operations.",
      "It can help reduce allocations in certain asynchronous scenarios.",
      "It always runs synchronously."
    ],
    "correct_answer": "It can help reduce allocations in certain asynchronous scenarios.",
    "answer": "`ValueTask` is a struct that can wrap either a `Task` or a synchronous result, potentially reducing heap allocations."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Parallel Programming",
    "question": "Explain the purpose of the `Parallel.For` and `Parallel.ForEach` methods in the Task Parallel Library (TPL).",
    "answer": "`Parallel.For` provides a way to execute loop iterations in parallel. `Parallel.ForEach` provides a way to iterate over the elements of a collection in parallel."
  },
  {
    "type": "mcq",
    "level": "advanced",
    "topic": "Parallel Programming",
    "question": "What is PLINQ (Parallel LINQ) in .NET?",
    "options": [
      "A library for asynchronous programming.",
      "A set of extensions to LINQ that allow queries to run in parallel.",
      "A tool for profiling multithreaded applications.",
      "A new version of the Task Parallel Library."
    ],
    "correct_answer": "A set of extensions to LINQ that allow queries to run in parallel.",
    "answer": "PLINQ can significantly improve the performance of LINQ queries on large datasets by utilizing multiple cores."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "Thread Safety",
    "question": "What does it mean for a piece of code or a data structure to be thread-safe?",
    "answer": "Thread-safe code can be safely accessed and executed by multiple threads concurrently without causing data corruption or unexpected behavior."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "Thread Safety",
    "question": "Which of the following data structures in the `System.Collections.Concurrent` namespace is designed to be thread-safe for adding and removing elements from the front and back?",
    "options": [
      "List<T>",
      "Dictionary<TKey, TValue>",
      "ConcurrentQueue<T>",
      "ConcurrentStack<T>",
      "ConcurrentBag<T>",
      "BlockingCollection<T>"
    ],
    "correct_answer": "ConcurrentQueue<T>",
    "answer": "`ConcurrentQueue<T>` provides thread-safe enqueue and dequeue operations."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Cancellation",
    "question": "Explain how to use `CancellationToken` to enable cooperative cancellation of long-running operations in .NET.",
    "answer": "Create a `CancellationTokenSource`, obtain its `CancellationToken`, and pass the token to the operation. The operation should periodically check the `IsCancellationRequested` property of the token. If it's true, the operation should stop its work and throw an `OperationCanceledException` or return gracefully."
  },
  {
    "type": "mcq",
    "level": "advanced",
    "topic": "Cancellation",
    "question": "Which exception type is typically thrown to indicate that an operation has been cancelled via a `CancellationToken`?",
    "options": [
      "ArgumentException",
      "InvalidOperationException",
      "OperationCanceledException",
      "TimeoutException"
    ],
    "correct_answer": "OperationCanceledException",
    "answer": "This exception signals that the operation was intentionally stopped."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Thread-Local Storage",
    "question": "What is thread-local storage (TLS) and how can you implement it in .NET?",
    "answer": "Thread-local storage allows you to store data that is specific to a particular thread. In .NET, you can use the `ThreadLocal<T>` class or the `[ThreadStatic]` attribute to achieve this."
  },
  {
    "type": "mcq",
    "level": "advanced",
    "topic": "Thread-Local Storage",
    "question": "Which attribute can you apply to a static field to make its value unique to each thread that accesses it?",
    "options": [
      "Serializable",
      "Obsolete",
      "ThreadStatic",
      "Conditional"
    ],
    "correct_answer": "ThreadStatic",
    "answer": "The `[ThreadStatic]` attribute ensures that each thread has its own copy of the static field."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Task Scheduling",
    "question": "What is a custom `TaskScheduler` and when might you need to implement one?",
    "answer": "A `TaskScheduler` controls how and where tasks are executed. You might need a custom scheduler to control the degree of parallelism, execute tasks on specific threads (like the UI thread), or implement priority-based scheduling."
  },
  {
    "type": "mcq",
    "level": "advanced",
    "topic": "Task Scheduling",
    "question": "Which static property of the `TaskScheduler` class provides access to the default scheduler used by `Task.Run()`?",
    "options": [
      "Current",
      "Default",
      "FromCurrentSynchronizationContext",
      "ThreadPool"
    ],
    "correct_answer": "Default",
    "answer": "`TaskScheduler.Default` represents the thread pool task scheduler."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Synchronization Context",
    "question": "What is a Synchronization Context in .NET and why is it important in UI applications?",
    "answer": "A Synchronization Context provides a way to marshal work back to a specific thread or context. In UI applications (like WinForms or WPF), it ensures that UI updates are performed on the main UI thread, preventing cross-thread exceptions."
  },
  {
    "type": "mcq",
    "level": "advanced",
    "topic": "Synchronization Context",
    "question": "Which method can be used to capture the synchronization context of the current thread?",
    "options": [
      "Thread.CurrentThread.GetApartmentState()",
      "TaskScheduler.Current",
      "SynchronizationContext.Current",
      "ExecutionContext.Capture()"
    ],
    "correct_answer": "SynchronizationContext.Current",
    "answer": "This static property returns the synchronization context for the calling thread."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Asynchronous Streams",
    "question": "What are asynchronous streams (`IAsyncEnumerable<T>`) in C# and how do they enable efficient handling of sequences of data asynchronously?",
    "answer": "Asynchronous streams allow you to work with sequences of data that are produced asynchronously. They enable you to iterate over the data using `await foreach`, processing elements as they become available, which is more efficient for I/O-bound operations on sequences of data compared to loading everything into memory at once."
  },
  {
    "type": "mcq",
    "level": "advanced",
    "topic": "Asynchronous Streams",
    "question": "Which keyword is used to asynchronously iterate over an `IAsyncEnumerable<T>`?",
    "options": [
      "foreach",
      "for",
      "while",
      "await foreach"
    ],
    "correct_answer": "await foreach",
    "answer": "`await foreach` is the asynchronous counterpart to the synchronous `foreach` loop."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Barriers",
    "question": "What is a `Barrier` in .NET and what kind of synchronization scenario is it useful for?",
    "answer": "A `Barrier` is a synchronization primitive that allows multiple tasks to wait for each other to reach a certain point before they can all proceed. It's useful for scenarios where you have multiple parallel tasks that need to complete a phase of work before moving on to the next phase together."
  },
  {
    "type": "mcq",
    "level": "advanced",
    "topic": "Barriers",
    "question": "Which method of the `Barrier` class signals that a participant has reached the barrier?",
    "options": [
      "Wait()",
      "SignalAndWait()",
      "ArriveAndSignal()",
      "EnterAndWait()"
    ],
    "correct_answer": "SignalAndWait()",
    "answer": "`SignalAndWait()` signals that the participant has finished its part and waits for others."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Advanced Threading",
    "question": "Discuss the implications of setting different thread priorities in a .NET application. In what scenarios might you consider adjusting thread priority, and what are the potential drawbacks?",
    "answer": "Thread priority hints to the operating system about the relative importance of threads. Higher priority threads may get more CPU time. Scenarios include giving preference to UI threads or time-critical background tasks. Drawbacks include potential for priority inversion, where a high-priority thread waits indefinitely for a lower-priority thread holding a necessary resource, and the fact that the OS may not always strictly adhere to the priority settings."
  },
  {
    "type": "scenario",
    "level": "advanced",
    "topic": "Advanced Threading",
    "question": "You have a producer-consumer scenario where the producer generates data at a variable rate, and the consumer needs to process it. The processing order of the data is important. How would you implement this using `BlockingCollection<T>` in a way that ensures ordered processing and handles potential backpressure from the consumer?",
    "answer": "Use a `BlockingCollection<T>` with a bounded capacity to handle backpressure. The producer adds items to the collection. The consumer takes items from the collection and processes them in the order they were added (FIFO by default). The bounded capacity will cause the producer to block if the collection is full, preventing it from overwhelming the consumer."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Advanced Threading",
    "question": "Explain the work-stealing algorithm employed by the .NET Thread Pool. What are its benefits and potential performance implications in different workload scenarios?",
    "answer": "The work-stealing algorithm allows idle worker threads in the thread pool to 'steal' tasks from the local queues of other busy threads. This helps to balance the workload across available threads and improve overall throughput. Benefits include better CPU utilization. Potential implications include increased contention on task queues in highly contended scenarios and potential for tasks to be executed out of their intended locality."
  },
  {
    "type": "scenario",
    "level": "advanced",
    "topic": "Advanced Threading",
    "question": "You have a complex asynchronous operation that needs to access request-specific data (like a user ID) throughout its execution flow, potentially spanning multiple `async` methods. How would you effectively manage and propagate this data without explicitly passing it as a parameter through every method call?",
    "answer": "Use `AsyncLocal<T>` to store and retrieve the request-specific data. The value of an `AsyncLocal` instance is local to the current asynchronous control flow and any child flows it creates, allowing you to access the data from anywhere within that flow without explicit parameter passing."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Advanced Threading",
    "question": "Describe the steps involved in implementing a custom synchronization primitive in .NET using lower-level threading constructs like `Interlocked` operations and `SpinWait`.",
    "answer": "Implementing a custom primitive typically involves using `Interlocked` methods for atomic updates to shared state variables. `SpinWait` can be used for busy-waiting in short critical sections to avoid the overhead of kernel-level context switching. You need to carefully manage the state transitions and ensure atomicity and visibility of changes across threads using memory barriers if necessary."
  },
  {
    "type": "scenario",
    "level": "advanced",
    "topic": "Advanced Threading",
    "question": "Consider a .NET application running on a NUMA (Non-Uniform Memory Access) architecture. How might this architecture impact your threading strategy and what considerations should you keep in mind to optimize performance?",
    "answer": "On NUMA systems, accessing memory local to a processor node is faster than accessing memory on a different node. Thread affinity (binding threads to specific processor cores) can be used to improve performance by increasing memory locality. However, care must be taken to avoid overloading specific nodes and to ensure proper load balancing."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Advanced Threading - Debugging",
    "question": "What are some advanced debugging techniques or tools available in Visual Studio or via the SOS debugger extension that can help you diagnose complex multithreaded issues like deadlocks or race conditions?",
    "answer": "Techniques include using the Parallel Tasks and Parallel Stacks windows in Visual Studio, examining thread states and call stacks, setting thread-specific breakpoints, using the SOS commands like `!syncblk` (for examining synchronization objects), `!threads` (for listing threads), and `!clrstack` (for examining the managed call stack of a thread)."
  },
  {
    "type": "scenario",
    "level": "advanced",
    "topic": "Advanced Threading - Blazor WASM",
    "question": "How does threading work in a Blazor WebAssembly application running in the browser's sandbox? What are the limitations and how can you perform computationally intensive tasks without blocking the UI?",
    "answer": "Blazor WASM primarily runs on a single browser thread. True multithreading is not directly available. To perform computationally intensive tasks without blocking the UI, you can leverage asynchronous operations using `async`/`await` to yield control back to the browser's event loop. For CPU-bound tasks, you might consider using JavaScript interop with Web Workers if true parallelism is required (though with limitations on shared memory)."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Advanced Threading - Cancellation",
    "question": "Describe a scenario involving multiple asynchronous operations that depend on each other, where cancelling one operation should gracefully cancel all related ongoing operations. How would you implement this using `CancellationToken`?",
    "answer": "Create a single `CancellationTokenSource` that is shared among all related asynchronous operations. Pass the `CancellationToken` from the source to each operation. If one operation needs to initiate cancellation (e.g., due to an error or a user request), it can call `Cancel()` on the `CancellationTokenSource`. This will signal cancellation to all operations that are observing the same token, allowing them to clean up and exit gracefully."
  },
  {
    "type": "scenario",
    "level": "advanced",
    "topic": "Advanced Threading - ExecutionContext",
    "question": "Explain the role of `ExecutionContext` in .NET threading. What information does it capture, and why might you need to suppress its flow in certain scenarios?",
    "answer": "`ExecutionContext` captures the context of the currently running thread, including security context, culture information, and ambient data (like `AsyncLocal` values). It's typically flowed across `await` points. You might need to suppress its flow in performance-critical scenarios where this context information is not needed, as capturing and restoring it can have overhead. This can be done using `ExecutionContext.SuppressFlow()` and `ExecutionContext.RestoreFlow()`."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Advanced Threading - Task CompletionSource",
    "question": "What is `TaskCompletionSource<T>` in .NET, and when would you use it to bridge between asynchronous and synchronous code or to create custom `Task`-based asynchronous patterns?",
    "answer": "`TaskCompletionSource<T>` allows you to create a `Task<T>` that is controlled manually. You can set its result, set an exception, or mark it as cancelled from any thread. This is useful for wrapping asynchronous operations that don't naturally return a `Task`, for implementing custom asynchronous patterns like event-based asynchrony, or for integrating with legacy synchronous code that needs to be exposed as an asynchronous operation."
  },
  {
    "type": "scenario",
    "level": "advanced",
    "topic": "Advanced Threading - Thread Affinity",
    "question": "In a high-performance computing scenario using .NET, where specific threads need to consistently execute on the same processor core for optimal cache utilization, how would you achieve thread affinity?",
    "answer": "You can use the `System.Diagnostics.Process.GetCurrentProcess().ProcessorAffinity` property to set the affinity mask for the current process. For finer-grained control at the thread level, you might need to resort to platform-specific APIs via interop, as .NET doesn't directly expose thread affinity settings in a cross-platform way."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Advanced Threading - Spin Locks",
    "question": "What is a spin lock in threading, and when might you consider using `SpinLock` in C# compared to a regular `lock`?",
    "answer": "A spin lock is a low-level synchronization primitive where a thread repeatedly checks a condition (spins) until the lock becomes available. It avoids the overhead of kernel-level context switching associated with regular locks. `SpinLock` might be considered for very short-duration critical sections where the expected wait time is minimal, as excessive spinning can waste CPU resources."
  },
  {
    "type": "scenario",
    "level": "advanced",
    "topic": "Advanced Threading - Asynchronous Initialization",
    "question": "You have a service that requires asynchronous initialization before it can be used. How would you design the initialization process to ensure that the service is fully initialized before any consuming code can access it, while also handling potential initialization failures?",
    "answer": "One approach is to have an initialization method (e.g., `InitializeAsync()`) that returns a `Task`. Consumers should `await` this task before using the service. You can use a state variable to track the initialization status and throw an exception if consumers try to use the service before it's initialized or if initialization fails. Consider using a lazy initialization pattern with a `Task` to ensure it's only initialized once."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Advanced Threading - Thread Interruption",
    "question": "Explain the concept of thread interruption in .NET (using `Thread.Interrupt()`) and the conditions under which a thread might be interrupted. What are the best practices for handling thread interruptions?",
    "answer": "`Thread.Interrupt()` signals to a waiting thread that it should wake up. A thread might be interrupted if it's blocked in methods like `Thread.Sleep()`, `Thread.Join()`, or `Wait()` on a monitor. Best practices for handling interruptions include catching the `ThreadInterruptedException` and cleaning up resources or re-throwing the exception if appropriate. It's important to design threads to be responsive to interruption requests."
  },
  {
    "type": "scenario",
    "level": "advanced",
    "topic": "Advanced Threading - Cooperative Cancellation in Loops",
    "question": "You have a long-running synchronous loop that performs a significant amount of work. How would you implement cooperative cancellation within this loop using a `CancellationToken` to allow the operation to be stopped gracefully?",
    "answer": "Within the loop, periodically check the `IsCancellationRequested` property of the `CancellationToken`. If it's true, break out of the loop and perform any necessary cleanup. Optionally, you can throw an `OperationCanceledException` to signal that the operation was cancelled."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Advanced Threading - Memory Barriers",
    "question": "What are memory barriers (fences) in the context of multithreaded programming in .NET? When and why might you need to use them?",
    "answer": "Memory barriers ensure that memory operations are performed in a specific order across different processors or threads. They prevent the compiler and CPU from reordering instructions in a way that could lead to unexpected behavior in multithreaded scenarios, particularly when dealing with shared variables without explicit locking. You might need them in low-level concurrent programming when implementing custom synchronization primitives or dealing with lock-free data structures."
  },
  {
    "type": "scenario",
    "level": "advanced",
    "topic": "Advanced Threading - Async Streams and Cancellation",
    "question": "How would you implement cancellation in an asynchronous stream (`IAsyncEnumerable<T>`) in C# to stop the generation or consumption of data when a `CancellationToken` is signaled?",
    "answer": "When implementing the asynchronous iterator for your `IAsyncEnumerable<T>`, you should check the `IsCancellationRequested` property of the `CancellationToken` in your `MoveNextAsync()` method. If cancellation is requested, you should return `false` to stop the iteration. For data generation, the underlying asynchronous operations producing the data should also observe the cancellation token."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Advanced Threading - Thread Pool Starvation",
    "question": "What is thread pool starvation in .NET, what are some common causes, and how can you diagnose and mitigate it?",
    "answer": "Thread pool starvation occurs when all threads in the thread pool are blocked, preventing new tasks from being processed. Common causes include blocking synchronous code within asynchronous operations, long-running tasks that don't yield, and excessive use of `Thread.Sleep()`. Diagnosis involves monitoring thread pool statistics and identifying blocked threads. Mitigation strategies include avoiding blocking calls in async code, using asynchronous operations for I/O-bound tasks, and potentially increasing the minimum number of thread pool threads."
  },
  {
    "type": "scenario",
    "level": "advanced",
    "topic": "Advanced Threading - Implementing a Custom Async Operation",
    "question": "You need to wrap a legacy synchronous operation that takes a significant amount of time into an asynchronous operation that can be awaited. How would you do this in C# without blocking the main thread?",
    "answer": "Use `Task.Run(() => /* your synchronous operation */ )` to offload the synchronous operation to a thread pool thread. This will return a `Task` that represents the completion of the synchronous operation, which can then be awaited without blocking the calling thread. Ensure proper error handling and consider using a `CancellationToken` for potential cancellation."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Common Language Runtime (CLR)",
    "question": "Explain the key components of the Common Language Runtime (CLR) and their roles in executing .NET applications.",
    "answer": "Key components include the Common Language Specification (CLS), Common Type System (CTS), Just-In-Time (JIT) compiler, Garbage Collector (GC), and the Framework Class Library (FCL). The CLS defines a set of rules for language interoperability. The CTS defines the data types supported by the CLR. The JIT compiler translates IL to native code. The GC manages memory allocation and deallocation. The FCL provides a rich set of pre-built classes."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "Common Language Runtime (CLR)",
    "question": "Which of the following is NOT a primary function of the CLR?",
    "options": [
      "Memory management",
      "Code compilation to native machine code",
      "Operating system kernel management",
      "Providing a secure execution environment"
    ],
    "correct_answer": "Operating system kernel management",
    "answer": "The CLR operates within the user mode of the operating system."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Garbage Collection (GC)",
    "question": "Describe the different generations of garbage collection in the .NET CLR and the rationale behind them.",
    "answer": ".NET uses a generational garbage collector with three generations: 0, 1, and 2. Generation 0 holds short-lived objects and is collected most frequently. Generation 1 holds objects that survived a Gen 0 collection. Generation 2 holds long-lived objects that have survived multiple collections. This approach optimizes performance by focusing collection efforts on the generations where most objects die young."
  },
  {
    "type": "scenario",
    "level": "advanced",
    "topic": "Garbage Collection (GC)",
    "question": "You are experiencing performance issues in your .NET application that you suspect are related to excessive garbage collection. What steps would you take to diagnose the problem and what are some common techniques to reduce GC pressure?",
    "answer": "Use performance monitoring tools (like PerfView or the .NET Counters) to observe GC statistics (e.g., number of collections, time spent in GC). Analyze memory usage patterns to identify excessive allocations. Techniques to reduce GC pressure include using value types, object pooling, minimizing boxing, and being mindful of the lifetime of objects."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": ".NET Type System",
    "question": "Explain the fundamental difference between value types and reference types in .NET, and how they are stored in memory.",
    "answer": "Value types (like `int`, `bool`, `struct`) directly contain their data and are typically allocated on the stack. Reference types (like `class`, `string`, `object`) store a reference (a memory address) to the actual data, which is allocated on the heap."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": ".NET Type System",
    "question": "What happens during the process of 'boxing' in .NET?",
    "options": [
      "Converting a reference type to a value type.",
      "Converting a value type to a reference type.",
      "Creating a new instance of a class.",
      "Accessing a member of a struct."
    ],
    "correct_answer": "Converting a value type to a reference type.",
    "answer": "Boxing involves allocating a value type instance on the heap and returning a reference to it."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": ".NET Type System",
    "question": "Discuss the performance implications of boxing and unboxing in .NET and provide strategies to minimize their occurrence.",
    "answer": "Boxing and unboxing introduce overhead due to heap allocation and type checking. To minimize them, use generics to create type-safe collections and avoid casting between value and reference types unnecessarily."
  },
  {
    "type": "scenario",
    "level": "advanced",
    "topic": ".NET Type System",
    "question": "You have a scenario where you need to perform a high number of arithmetic operations on a collection of small numeric values. Would you prefer using an array of `int` or an array of `object` (where each element is a boxed `int`)? Explain your reasoning.",
    "answer": "Using an array of `int` would be significantly more performant. An array of `object` would require boxing each `int` value, leading to increased memory allocations and garbage collection pressure. Furthermore, accessing the values would require unboxing, adding further overhead to each arithmetic operation."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "Desktop Development - WinForms",
    "question": "What is the event-driven programming model in Windows Forms (WinForms) and how does it handle user interactions?",
    "answer": "WinForms uses an event-driven model where the application reacts to events generated by user actions (like button clicks, mouse movements) or system events. Each UI control can expose events, and you can write event handlers (methods) that are executed when those events occur."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "Desktop Development - WinForms",
    "question": "Which class is the base class for most visual components in Windows Forms?",
    "options": [
      "Form",
      "Control",
      "Component",
      "Object"
    ],
    "correct_answer": "Control",
    "answer": "The `System.Windows.Forms.Control` class provides the basic functionality for all UI elements."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Desktop Development - WinForms",
    "question": "Discuss the challenges of thread safety when working with UI controls in WinForms and explain how you can safely update UI elements from a background thread.",
    "answer": "WinForms controls are typically not thread-safe. Attempting to update UI elements from a thread other than the main UI thread can lead to exceptions or unpredictable behavior. To safely update UI, you need to marshal the call back to the UI thread using methods like `Control.Invoke()` or `Control.BeginInvoke()` along with a delegate that performs the UI update."
  },
  {
    "type": "scenario",
    "level": "advanced",
    "topic": "Desktop Development - WinForms",
    "question": "You have a long-running background task in a WinForms application that needs to periodically update a progress bar on the UI. How would you implement this to ensure the UI remains responsive?",
    "answer": "Start the background task on a separate thread (e.g., using `Task.Run()` or the `BackgroundWorker` component). From the background thread, use `Control.Invoke()` or `Control.BeginInvoke()` to execute a delegate on the UI thread that updates the progress bar. This ensures that the UI update happens on the correct thread and the UI remains responsive while the background task is running."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "Desktop Development - WPF",
    "question": "Explain the key principles of Windows Presentation Foundation (WPF), such as XAML, data binding, and the Model-View-ViewModel (MVVM) pattern.",
    "answer": "WPF uses XAML (Extensible Application Markup Language) for declarative UI definition. Data binding allows you to establish a connection between UI elements and data sources, automatically synchronizing changes. MVVM is an architectural pattern that separates the UI (View) from the application logic (ViewModel) and data (Model), improving testability and maintainability."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "Desktop Development - WPF",
    "question": "Which markup language is primarily used to define the user interface in WPF?",
    "options": [
      "HTML",
      "XML",
      "CSS",
      "XAML"
    ],
    "correct_answer": "XAML",
    "answer": "XAML provides a declarative way to create UI elements and define their properties."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Desktop Development - WPF",
    "question": "Discuss the role of the Dispatcher in WPF and how it helps manage thread safety when updating the UI.",
    "answer": "The Dispatcher is a message loop that manages work items on a specific thread (typically the UI thread). In WPF, all UI elements are associated with a Dispatcher. To update UI elements from a background thread, you need to use the `Dispatcher.Invoke()` or `Dispatcher.BeginInvoke()` methods to marshal the work item onto the UI thread's message queue."
  },
  {
    "type": "scenario",
    "level": "advanced",
    "topic": "Desktop Development - WPF",
    "question": "You are building a WPF application using the MVVM pattern. How would you handle a user interaction (e.g., a button click) in the View and execute a command in the ViewModel without directly referencing the ViewModel from the View's code-behind?",
    "answer": "Use data binding and the `ICommand` interface. In the ViewModel, implement a property of type `ICommand` that encapsulates the logic to be executed. In the XAML of the View, bind the `Command` property of the button to the corresponding `ICommand` property in the ViewModel. WPF's data binding infrastructure will handle the plumbing to execute the command when the button is clicked."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "ASP.NET Core",
    "question": "Explain the ASP.NET Core request pipeline and the role of middleware in processing HTTP requests.",
    "answer": "The ASP.NET Core request pipeline consists of a sequence of middleware components that are executed in order for each incoming HTTP request. Each middleware component can perform specific actions on the request or response, or pass the request on to the next middleware in the pipeline."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "ASP.NET Core",
    "question": "Which method in the `Startup.cs` file is typically used to configure the middleware pipeline in ASP.NET Core?",
    "options": [
      "ConfigureServices",
      "ConfigureMiddleware",
      "Configure",
      "Main"
    ],
    "correct_answer": "Configure",
    "answer": "The `Configure` method receives an `IApplicationBuilder` instance, which is used to add middleware to the pipeline."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "ASP.NET Core - MVC",
    "question": "Describe the Model-View-Controller (MVC) architectural pattern as implemented in ASP.NET Core. What are the responsibilities of each component?",
    "answer": "The Model represents the application's data and business logic. The View is responsible for rendering the user interface. The Controller handles user input, interacts with the Model to retrieve or update data, and selects the appropriate View to display."
  },
  {
    "type": "scenario",
    "level": "advanced",
    "topic": "ASP.NET Core - MVC",
    "question": "How would you implement custom model binding in ASP.NET Core MVC to handle a specific type of incoming request data that doesn't map directly to your action parameters?",
    "answer": "You can create a custom model binder by implementing the `IModelBinder` interface. This involves writing logic to read the incoming request data (e.g., from headers, query strings, or the request body) and converting it to the desired type for your action parameter. You would then register your custom model binder for the specific parameter type or action."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "ASP.NET Core - Razor Pages",
    "question": "What are Razor Pages in ASP.NET Core and how do they differ from traditional MVC controllers and views?",
    "answer": "Razor Pages provide a page-focused approach to building web UI with ASP.NET Core. Unlike MVC, where handlers are organized into controllers and UI is in separate view files, Razor Pages combine the handler logic (in an `OnGet`, `OnPost`, etc. method) and the UI (using Razor syntax) within a single `.cshtml` file. This can be simpler for page-centric applications."
  },
  {
    "type": "mcq",
    "level": "intermediate",
    "topic": "ASP.NET Core - Razor Pages",
    "question": "In a Razor Page, which handler method is typically executed for an HTTP GET request to the page?",
    "options": [
      "OnPost",
      "OnPut",
      "OnDelete",
      "OnGet"
    ],
    "correct_answer": "OnGet",
    "answer": "The `OnGet` method is the default handler for GET requests."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "ASP.NET Core - Routing",
    "question": "Explain the concept of endpoint routing in ASP.NET Core and how it has evolved from the previous routing system.",
    "answer": "Endpoint routing in ASP.NET Core provides a more centralized and extensible way to define and match routes to request handlers (controllers, Razor Pages, SignalR hubs, etc.). It decouples routing concerns from middleware and allows for better integration with other features like authorization and CORS. Previous routing systems were often more tightly coupled with specific handler types."
  },
  {
    "type": "scenario",
    "level": "advanced",
    "topic": "ASP.NET Core - Authentication and Authorization",
    "question": "You need to implement role-based authorization in your ASP.NET Core application. Describe the steps involved in defining roles, assigning users to roles, and protecting specific endpoints based on these roles.",
    "answer": "Steps include: 1. Defining roles (e.g., in configuration or a database). 2. Implementing authentication to identify the user. 3. Assigning roles to users (typically stored in a user store or claims). 4. Using the `[Authorize]` attribute with the `Roles` property on controllers or actions to restrict access to users in specific roles. You might also use policy-based authorization for more complex scenarios."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "ASP.NET Core - Middleware",
    "question": "Explain the concept of branching in the ASP.NET Core middleware pipeline using `UseWhen` or `Map`. Describe a scenario where this would be particularly useful and what considerations you need to keep in mind.",
    "answer": "Branching allows you to conditionally execute a subset of the middleware pipeline based on certain criteria (e.g., the request path). `UseWhen` executes a branch if a specified predicate is true, while `Map` executes a branch for requests matching a specific path. This is useful for scenarios like serving static files from a specific route or applying authentication only to certain areas of the application. Considerations include the fact that once a branch is executed, control returns to the original pipeline, and the order of middleware in both the main and branched pipelines matters."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "ASP.NET Core - Dependency Injection",
    "question": "Discuss the different service lifetimes (Singleton, Scoped, Transient) in ASP.NET Core's dependency injection container. Explain the implications of choosing each lifetime and provide examples of services that would typically use each.",
    "answer": "Singleton services are created once per application lifetime. Scoped services are created once per request (or scope). Transient services are created every time they are requested. Singleton is suitable for stateless, shared services. Scoped is common for database contexts or request-specific data. Transient is ideal for lightweight, stateless services."
  },
  {
    "type": "scenario",
    "level": "advanced",
    "topic": "ASP.NET Core - Configuration",
    "question": "Your ASP.NET Core application needs to load configuration from a custom data source (e.g., a database table). How would you implement a custom configuration provider to achieve this?",
    "answer": "Create a class that implements `IConfigurationSource` and another class implementing `IConfigurationProvider`. The provider would be responsible for fetching the configuration data from the database and making it available. In the `Load` method of the provider, you would populate the configuration key-value pairs. Finally, you would register your custom configuration source in `Program.cs` using `builder.Configuration.Add(new DatabaseConfigurationSource(...));`."
  },
  {
    "type": "scenario",
    "level": "advanced",
    "topic": "ASP.NET Core - Performance",
    "question": "Your ASP.NET Core application is experiencing high CPU utilization under heavy load. What are some advanced performance optimization techniques you would investigate beyond basic caching and asynchronous programming?",
    "answer": "Investigate response compression, output caching for frequently accessed data, using minimal APIs for lightweight endpoints, optimizing LINQ queries, reducing object allocations, using efficient data structures, and potentially profiling the application to identify performance bottlenecks."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "ASP.NET Core - Tag Helpers",
    "question": "Explain the purpose of Tag Helpers in ASP.NET Core Razor views and how they differ from HTML Helpers. Describe a scenario where creating a custom Tag Helper would be beneficial.",
    "answer": "Tag Helpers provide a way to write server-side code in Razor views using familiar HTML-like syntax. Unlike HTML Helpers, they are rendered as standard HTML elements. Custom Tag Helpers can be created to encapsulate complex UI logic or to enhance existing HTML elements with server-side functionality, leading to more readable and maintainable views."
  },
  {
    "type": "scenario",
    "level": "advanced",
    "topic": "ASP.NET Core - View Components",
    "question": "You need to create a reusable UI component in your ASP.NET Core MVC application that displays a list of recent blog posts, fetching the data from a service. How would you implement this using a View Component?",
    "answer": "Create a class that inherits from `ViewComponent`. This class will have an `InvokeAsync` method that retrieves the recent blog posts from the service and returns an `IViewComponentResult`. Create a corresponding Razor view for the component (e.g., `Default.cshtml` in a `Components/RecentPosts` folder). You can then render the View Component in your main views using `<vc:recent-posts />`."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "ASP.NET Core - Security",
    "question": "Discuss some advanced security considerations for protecting an ASP.NET Core application against common web vulnerabilities like Cross-Site Request Forgery (CSRF) and Clickjacking. What built-in features or best practices can you leverage?",
    "answer": "For CSRF, ASP.NET Core provides anti-forgery token generation and validation using the `@Html.AntiForgeryToken()` Tag Helper and the `[ValidateAntiForgeryToken]` attribute. For Clickjacking, you can use the `X-Frame-Options` HTTP header (which can be configured via middleware) to control whether your site can be embedded in a frame."
  },
  {
    "type": "scenario",
    "level": "advanced",
    "topic": "ASP.NET Core - gRPC Integration",
    "question": "Your ASP.NET Core application needs to communicate with a backend service using gRPC for high-performance communication. Describe the steps involved in setting up gRPC client and server communication within your application.",
    "answer": "For the server, add the `Grpc.AspNetCore` NuGet package and configure gRPC services in `ConfigureServices` using `services.AddGrpc()`. Create your `.proto` definition and implement the gRPC service class. For the client, add the `Grpc.Net.Client` NuGet package and configure the client channel in your code, typically using `GrpcChannel.ForAddress(...)`."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "ASP.NET Core - Hosting Models",
    "question": "Explain the different hosting models available for ASP.NET Core applications (e.g., In-Process with IIS, Out-of-Process with Kestrel, Self-Hosted). Discuss the advantages and disadvantages of each model.",
    "answer": "In-Process hosting with IIS offers better performance in some scenarios due to shared memory. Out-of-Process with Kestrel (often behind a reverse proxy like IIS or Nginx) provides more flexibility and isolation. Self-hosting allows you to run the application directly without relying on an external web server, suitable for microservices or specialized deployments."
  },
  {
    "type": "scenario",
    "level": "advanced",
    "topic": "ASP.NET Core - SignalR",
    "question": "You are building a real-time chat application using ASP.NET Core SignalR. You need to scale your application to handle a large number of concurrent users. What are some strategies you would consider for scaling SignalR?",
    "answer": "Strategies include using a backplane (like Redis, Azure SignalR Service, or SQL Server) to coordinate messages between multiple server instances. You might also consider load balancing across multiple server instances and optimizing your SignalR hub code for performance."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "ASP.NET Core - Microservices",
    "question": "From an ASP.NET Core perspective, discuss some key considerations and patterns when building a microservices architecture (e.g., API Gateways, service discovery, inter-service communication).",
    "answer": "Consider using an API Gateway as a single entry point for clients. Implement service discovery mechanisms (like Consul or Eureka) to allow services to find each other. For inter-service communication, consider using REST APIs, gRPC, or message queues (like RabbitMQ or Kafka) depending on the requirements for performance, reliability, and consistency."
  },
  {
    "type": "scenario",
    "level": "advanced",
    "topic": "ASP.NET Core - Azure Functions",
    "question": "You need to build a serverless API endpoint using ASP.NET Core Azure Functions. Describe the process of creating an HTTP-triggered Azure Function using the isolated worker model and explain some of the benefits of this model.",
    "answer": "Create a new Azure Functions project and select the HTTP trigger with the isolated worker model. This model runs your function in a separate process from the Azure Functions host, allowing you to use the latest .NET versions and have more control over dependencies. You define your function entry point and use attributes to configure the trigger and bindings."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "ASP.NET Core - Response Caching",
    "question": "Explain the different levels of response caching available in ASP.NET Core (e.g., in-memory, distributed) and when you might choose each. What are some considerations for invalidating cached responses?",
    "answer": "In-memory caching uses the server's memory and is suitable for single-instance scenarios or frequently accessed, short-lived data. Distributed caching (like Redis or Azure Cache for Redis) allows sharing the cache across multiple instances. Choose based on scale and data volatility. Invalidating cached responses can be done based on time, specific events, or using cache keys that incorporate data dependencies."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "ASP.NET Core - Output Caching",
    "question": "Explain the concept of output caching middleware in ASP.NET Core. How can you configure it for different scenarios, and what are some potential challenges or considerations when using it?",
    "answer": "Output caching middleware caches the entire HTTP response. You can configure cache profiles with different durations and vary the cache by headers, query strings, or custom logic. Challenges include cache invalidation, handling dynamic content within cached responses, and potential for increased memory usage."
  },
  {
    "type": "scenario",
    "level": "advanced",
    "topic": "ASP.NET Core - Data Protection",
    "question": "You need to securely store sensitive data in your ASP.NET Core application (e.g., API keys in configuration). Describe how you would use the Data Protection API to encrypt and protect this data.",
    "answer": "Inject the `IDataProtector` service. Use its `Protect` method to encrypt the sensitive data and `Unprotect` to decrypt it when needed. Configure the data protection system to persist keys securely (e.g., using Azure Key Vault or a dedicated key store) and consider key rotation strategies."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "ASP.NET Core - HTTP/3",
    "question": "What are the benefits of HTTP/3 over HTTP/2, and what are the key considerations for enabling and using HTTP/3 in an ASP.NET Core application?",
    "answer": "HTTP/3 offers improved performance, especially in lossy network conditions, due to its use of QUIC (UDP-based protocol) which provides better connection management and reduced head-of-line blocking. To enable it in ASP.NET Core, you need to configure Kestrel to listen on UDP ports and ensure your deployment environment supports HTTP/3."
  },
  {
    "type": "scenario",
    "level": "advanced",
    "topic": "ASP.NET Core - Server Sent Events (SSE)",
    "question": "You need to implement a feature in your ASP.NET Core application where the server needs to push real-time updates to the client (e.g., progress updates). How would you achieve this using Server Sent Events (SSE)?",
    "answer": "Create an endpoint that sets the `Content-Type` to `text/event-stream`. In your controller action, use `Response.Body.WriteAsync` to send formatted SSE messages to the client. The client-side JavaScript can then use the `EventSource` API to listen for these events."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "ASP.NET Core - Request Decompression",
    "question": "Explain how request decompression works in ASP.NET Core. In what scenarios might you want to enable it, and what are the considerations?",
    "answer": "Request decompression middleware allows the server to automatically decompress request bodies that have been compressed by the client (e.g., using gzip or Brotli). This can improve performance by reducing the amount of data transferred over the network. Enable it when clients are expected to send compressed data, but be mindful of the potential CPU overhead of decompression on the server."
  },
  {
    "type": "scenario",
    "level": "advanced",
    "topic": "ASP.NET Core - Forwarded Headers",
    "question": "Your ASP.NET Core application is deployed behind a reverse proxy (like Nginx or Azure Application Gateway). You are having issues with incorrect client IP addresses and scheme in your application. How would you configure forwarded headers middleware to resolve this?",
    "answer": "Install the `Microsoft.AspNetCore.HttpOverrides` NuGet package. In `Program.cs`, add the `ForwardedHeadersMiddleware` and configure it to forward the relevant headers (`X-Forwarded-For`, `X-Forwarded-Proto`, etc.) sent by the proxy. You might also need to configure the known proxies and networks to trust."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "ASP.NET Core - Endpoint Filters",
    "question": "What are endpoint filters in ASP.NET Core Minimal APIs? How do they compare to middleware, and when might you prefer using them?",
    "answer": "Endpoint filters are similar to middleware but are specific to individual endpoint handlers in Minimal APIs. They allow you to run logic before and after an endpoint handler is executed. They can be useful for tasks like validation, authorization, or logging that are specific to a particular endpoint without affecting the entire application pipeline."
  },
  {
    "type": "scenario",
    "level": "advanced",
    "topic": "ASP.NET Core - Integrating with Legacy Systems",
    "question": "Your modern ASP.NET Core application needs to integrate with a legacy ASP.NET Framework Web Forms application. What are some common strategies and challenges you might encounter during this integration?",
    "answer": "Strategies include using reverse proxying to route requests between the two applications, sharing authentication cookies if possible, and potentially exposing legacy functionality as Web APIs that the ASP.NET Core application can consume. Challenges can include different session management, authentication mechanisms, and potentially different hosting environments."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "ASP.NET Core - Application Insights",
    "question": "Describe how you would integrate Application Insights into an ASP.NET Core application to monitor its performance, track exceptions, and gather telemetry data. What are some advanced features of Application Insights you might leverage?",
    "answer": "Install the `Microsoft.ApplicationInsights.AspNetCore` NuGet package and add the Application Insights service in `Program.cs`. Configure the connection string. Advanced features include live metrics stream, profiler, snapshot debugger, and custom telemetry tracking."
  },
  {
    "type": "scenario",
    "level": "advanced",
    "topic": "ASP.NET Core - Localization",
    "question": "You need to implement localization in your ASP.NET Core MVC application to support multiple languages. Describe the steps involved in setting up localization, creating resource files, and accessing localized strings in your views and controllers.",
    "answer": "Install the `Microsoft.AspNetCore.Localization` and `Microsoft.Extensions.Localization.Abstractions` NuGet packages. Configure localization services in `ConfigureServices` and the localization middleware in `Configure`. Create `.resx` resource files for each supported language. Inject `IStringLocalizer` in your controllers and views to access localized strings using keys."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "ASP.NET Core - API Versioning",
    "question": "Discuss different approaches to API versioning in ASP.NET Core (e.g., URI-based, header-based, media type-based). What are the pros and cons of each approach?",
    "answer": "URI-based versioning includes the version in the URL (e.g., `/api/v1/`). Header-based uses a custom HTTP header. Media type-based includes the version in the `Accept` header. URI-based is simple but can clutter URLs. Header-based is cleaner but less discoverable. Media type-based is RESTful but can be complex to implement."
  },
  {
    "type": "descriptive",
    "level": "basic",
    "topic": "Creational Patterns - Abstract Factory",
    "question": "What is the Abstract Factory design pattern and what problem does it solve? Provide a simple real-world analogy.",
    "answer": "The Abstract Factory pattern provides an interface for creating families of related or dependent objects without specifying their concrete classes. It solves the problem of needing to create multiple related objects that should work together consistently. A real-world analogy could be different themes for a UI toolkit, where each theme provides a consistent look and feel for buttons, text boxes, etc."
  },
  {
    "type": "scenario",
    "level": "intermediate",
    "topic": "Creational Patterns - Abstract Factory",
    "question": "You are building a cross-platform application that needs to support different operating systems (Windows and macOS). For each OS, you need to create specific UI elements like buttons and text fields. How would you use the Abstract Factory pattern to achieve this in C#?",
    "answer": "You would define an abstract factory interface (`IUIFactory`) with methods for creating buttons (`CreateButton()`) and text fields (`CreateTextField()`). Then, you would create concrete factory classes for each OS (`WindowsUIFactory`, `MacUIFactory`) that implement `IUIFactory` and return the corresponding concrete button and text field implementations for that OS."
  },
  {
    "type": "descriptive",
    "level": "basic",
    "topic": "Creational Patterns - Builder",
    "question": "What is the Builder design pattern and when would you consider using it over a constructor with many optional parameters?",
    "answer": "The Builder pattern separates the construction of a complex object from its representation, allowing the same construction process to create different representations. You would use it over a constructor with many optional parameters when the object has a large number of optional or complex initialization steps, or when you want to create different variations of the object."
  },
  {
    "type": "scenario",
    "level": "intermediate",
    "topic": "Creational Patterns - Builder",
    "question": "You need to construct an email message with various optional headers, body formats (plain text or HTML), and attachments. How could you use the Builder pattern in C# to make this process more readable and manageable?",
    "answer": "You would create an `EmailBuilder` class with methods for setting the recipient, subject, body (with options for plain text or HTML), adding headers, and attachments. Each method would return the builder instance, allowing for a fluent interface. A final `Build()` method would then create the `EmailMessage` object."
  },
  {
    "type": "descriptive",
    "level": "basic",
    "topic": "Creational Patterns - Prototype",
    "question": "What is the Prototype design pattern and what is its main advantage?",
    "answer": "The Prototype pattern specifies the kinds of objects to create using a prototypical instance, and create new objects by copying this prototype. Its main advantage is that it avoids the overhead of creating objects from scratch, especially when the object creation process is expensive."
  },
  {
    "type": "scenario",
    "level": "intermediate",
    "topic": "Creational Patterns - Prototype",
    "question": "Your application deals with complex graphical objects that take significant time to initialize. You often need to create new objects that are very similar to existing ones. How could you use the Prototype pattern in C# to improve performance?",
    "answer": "You would create an interface or abstract class for your graphical objects with a `Clone()` method. Concrete object classes would implement this method to return a deep copy of themselves. You could then store prototypical instances of these objects and clone them whenever a new similar object is needed, avoiding the expensive initialization process."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Creational Patterns - Singleton (Advanced)",
    "question": "Discuss different ways to implement the Singleton pattern in C# while considering thread safety and lazy initialization. What are the potential drawbacks of using the Singleton pattern?",
    "answer": "Implementations include eager initialization, lazy initialization with double-checked locking, and using `Lazy<T>`. Thread safety is crucial. Drawbacks include potential for global state, which can make testing difficult and reduce flexibility, and it can violate the Single Responsibility Principle."
  },
  {
    "type": "descriptive",
    "level": "basic",
    "topic": "Structural Patterns - Adapter",
    "question": "What is the Adapter design pattern and what is its purpose?",
    "answer": "The Adapter pattern allows objects with incompatible interfaces to collaborate. Its purpose is to convert the interface of a class into another interface that clients expect."
  },
  {
    "type": "scenario",
    "level": "intermediate",
    "topic": "Structural Patterns - Adapter",
    "question": "Your application needs to integrate with a third-party logging library that has a different interface than your existing logging abstraction. How would you use the Adapter pattern in C# to bridge this gap?",
    "answer": "You would create an adapter class that implements your existing logging interface and internally uses the third-party logging library. The adapter would translate calls to your interface into calls to the third-party library's interface."
  },
  {
    "type": "descriptive",
    "level": "basic",
    "topic": "Structural Patterns - Bridge",
    "question": "What is the Bridge design pattern and how does it differ from the Adapter pattern?",
    "answer": "The Bridge pattern decouples an abstraction from its implementation so that the two can vary independently. Unlike Adapter, which focuses on making interfaces work together after they've been designed, Bridge is about designing them separately from the start."
  },
  {
    "type": "scenario",
    "level": "intermediate",
    "topic": "Structural Patterns - Bridge",
    "question": "Consider you have different shapes (Circle, Rectangle) and different rendering engines (SVG, Raster). How would you use the Bridge pattern in C# to allow any shape to be rendered by any engine without creating a large class hierarchy?",
    "answer": "You would create an abstraction for the Shape (e.g., `Shape`) and an abstraction for the Renderer (e.g., `IRenderer`). Concrete Shape classes (e.g., `Circle`, `Rectangle`) would hold a reference to an `IRenderer` implementation. Concrete Renderer classes (e.g., `SvgRenderer`, `RasterRenderer`) would implement the rendering logic. This allows you to combine any shape with any renderer at runtime."
  },
  {
    "type": "descriptive",
    "level": "basic",
    "topic": "Structural Patterns - Composite",
    "question": "What is the Composite design pattern and when is it useful?",
    "answer": "The Composite pattern composes objects into tree structures to represent part-whole hierarchies. It lets clients treat individual objects and compositions of objects uniformly."
  },
  {
    "type": "scenario",
    "level": "intermediate",
    "topic": "Structural Patterns - Composite",
    "question": "You are building a file system explorer. You have files and folders, where folders can contain other files and folders. How would you use the Composite pattern in C# to represent this structure and allow operations like calculating total size to be performed uniformly on both files and folders?",
    "answer": "You would create a component interface (e.g., `IFileSystemEntry`) with a method like `GetSize()`. Concrete classes `File` and `Folder` would implement this interface. The `Folder` class would also maintain a collection of `IFileSystemEntry` objects. The `GetSize()` method for `Folder` would recursively calculate the size of its contents."
  },
  {
    "type": "descriptive",
    "level": "basic",
    "topic": "Structural Patterns - Decorator",
    "question": "What is the Decorator design pattern and how does it differ from inheritance?",
    "answer": "The Decorator pattern dynamically adds responsibilities to an object without subclassing. It differs from inheritance by providing a flexible alternative for extending functionality at runtime, whereas inheritance is static."
  },
  {
    "type": "scenario",
    "level": "intermediate",
    "topic": "Structural Patterns - Decorator",
    "question": "You have a base `Coffee` class. You want to add different condiments like Milk, Sugar, and Chocolate to the coffee, and you want to be able to combine these condiments. How would you use the Decorator pattern in C# to achieve this?",
    "answer": "You would create an interface or abstract class for `Coffee`. Concrete `Coffee` classes (e.g., `SimpleCoffee`). Then, you would create decorator classes (e.g., `MilkDecorator`, `SugarDecorator`, `ChocolateDecorator`) that wrap a `Coffee` object and add their specific functionality (e.g., cost, description). You can then chain these decorators to add multiple condiments."
  },
  {
    "type": "descriptive",
    "level": "basic",
    "topic": "Structural Patterns - Facade",
    "question": "What is the Facade design pattern and what problem does it solve?",
    "answer": "The Facade pattern provides a simplified interface to a complex subsystem. It solves the problem of making a complex subsystem easier to use by providing a high-level interface that hides the underlying complexity."
  },
  {
    "type": "scenario",
    "level": "intermediate",
    "topic": "Structural Patterns - Facade",
    "question": "Consider a complex order processing system with multiple subsystems for inventory, payment, and shipping. How would you use the Facade pattern in C# to provide a simple interface for placing an order?",
    "answer": "You would create an `OrderFacade` class with a method like `PlaceOrder(OrderDetails details)`. This method would internally orchestrate the calls to the inventory, payment, and shipping subsystems to complete the order process, hiding the complexity from the client."
  },
  {
    "type": "descriptive",
    "level": "basic",
    "topic": "Structural Patterns - Flyweight",
    "question": "What is the Flyweight design pattern and when would you consider using it?",
    "answer": "The Flyweight pattern uses sharing to support large numbers of fine-grained objects efficiently. You would consider using it when you have many objects that contain the same intrinsic state, and creating individual instances would be too memory-intensive."
  },
  {
    "type": "scenario",
    "level": "intermediate",
    "topic": "Structural Patterns - Flyweight",
    "question": "You are building a text editor that needs to display a large document with many repeated characters. How could you use the Flyweight pattern in C# to optimize memory usage?",
    "answer": "You could create a `CharacterFlyweight` class that stores the intrinsic state of a character (e.g., its glyph, font). For each character in the document, you would have an instance of `CharacterFlyweight` and store the extrinsic state (e.g., position, color) separately. A factory would manage the creation and sharing of `CharacterFlyweight` instances."
  },
  {
    "type": "descriptive",
    "level": "basic",
    "topic": "Structural Patterns - Proxy",
    "question": "What is the Proxy design pattern and what are some common use cases?",
    "answer": "The Proxy pattern provides a placeholder for another object to control access to it. Common use cases include lazy loading, access control, and logging."
  },
  {
    "type": "scenario",
    "level": "intermediate",
    "topic": "Structural Patterns - Proxy",
    "question": "You have an expensive operation that you only want to perform if it's actually needed. How could you use the Proxy pattern in C# to implement lazy loading for this operation?",
    "answer": "You would create a proxy class that has the same interface as the real object. The proxy would not create the real object until its methods are actually called. When a method is called for the first time, the proxy would create the real object and then delegate the call to it."
  },
  {
    "type": "descriptive",
    "level": "basic",
    "topic": "Behavioral Patterns - Chain of Responsibility",
    "question": "What is the Chain of Responsibility design pattern and how does it handle requests?",
    "answer": "The Chain of Responsibility pattern avoids coupling the sender of a request to its receiver by giving multiple objects a chance to handle the request. It chains the receiving objects together and passes the request along the chain until an object handles it."
  },
  {
    "type": "scenario",
    "level": "intermediate",
    "topic": "Behavioral Patterns - Chain of Responsibility",
    "question": "You are building a support ticket system where tickets need to be handled by different departments based on their priority and category. How would you use the Chain of Responsibility pattern in C# to route tickets to the appropriate department?",
    "answer": "You would define a handler interface for support tickets. Each department would implement a concrete handler, checking if it can handle the ticket based on its criteria. If it can, it handles the ticket; otherwise, it passes it to the next handler in the chain."
  },
  {
    "type": "descriptive",
    "level": "basic",
    "topic": "Behavioral Patterns - Interpreter",
    "question": "What is the Interpreter design pattern and when might you consider using it?",
    "answer": "The Interpreter pattern defines a grammatical representation for a language and provides an interpreter to deal with this grammar. You might consider using it when you have a simple language that needs to be interpreted or parsed."
  },
  {
    "type": "scenario",
    "level": "advanced",
    "topic": "Behavioral Patterns - Interpreter",
    "question": "Consider a system that needs to evaluate mathematical expressions represented as strings. How could you use the Interpreter pattern in C# to parse and evaluate these expressions?",
    "answer": "You would define an abstract `Expression` interface with an `Interpret()` method. Concrete classes would represent different parts of the expression (e.g., `NumberExpression`, `AddExpression`, `SubtractExpression`). A parser would then build an abstract syntax tree of these expressions from the input string, and calling `Interpret()` on the root of the tree would evaluate the expression."
  },
  {
    "type": "descriptive",
    "level": "basic",
    "topic": "Behavioral Patterns - Iterator",
    "question": "What is the Iterator design pattern and what benefit does it provide?",
    "answer": "The Iterator pattern provides a way to access the elements of an aggregate object sequentially without exposing its underlying representation. It provides a uniform way to traverse different types of collections."
  },
  {
    "type": "scenario",
    "level": "intermediate",
    "topic": "Behavioral Patterns - Iterator",
    "question": "You have a custom collection class in C#. How would you implement the Iterator pattern to allow clients to easily iterate over its elements using a `foreach` loop?",
    "answer": "You would implement the `IEnumerable` and `IEnumerator` interfaces (or the generic versions `IEnumerable<T>` and `IEnumerator<T>`). The `GetEnumerator()` method of `IEnumerable` would return an instance of your enumerator class, which would manage the current position and provide methods like `MoveNext()` and `Current` to traverse the collection."
  },
  {
    "type": "descriptive",
    "level": "basic",
    "topic": "Behavioral Patterns - Mediator",
    "question": "What is the Mediator design pattern and what problem does it solve?",
    "answer": "The Mediator pattern defines an object that encapsulates how a set of objects interact. It promotes loose coupling by keeping objects from referring to each other explicitly and lets you vary their interaction independently."
  },
  {
    "type": "scenario",
    "level": "intermediate",
    "topic": "Behavioral Patterns - Mediator",
    "question": "Consider a chat room application where multiple users can send messages to each other. How would you use the Mediator pattern in C# to manage the communication between users without them directly knowing about each other?",
    "answer": "You would create a `ChatRoomMediator` class that would act as a central hub. Each `User` object would communicate with the mediator. When a user sends a message, they would send it to the mediator, which would then be responsible for broadcasting it to the appropriate recipients."
  },
  {
    "type": "descriptive",
    "level": "basic",
    "topic": "Behavioral Patterns - Memento",
    "question": "What is the Memento design pattern and what is its purpose?",
    "answer": "The Memento pattern provides the ability to restore an object to its previous state (undo via rollback). It captures and externalizes an object's internal state so that the object can be restored to this state later."
  },
  {
    "type": "scenario",
    "level": "intermediate",
    "topic": "Behavioral Patterns - Memento",
    "question": "You are implementing an undo functionality in a text editor. How would you use the Memento pattern in C# to store and restore the state of the document?",
    "answer": "You would create a `Memento` class to store the state of the document (e.g., text content, cursor position). The `Originator` (the text editor) would be able to create a memento containing its current state and restore its state from a memento. A `Caretaker` would be responsible for storing and retrieving mementos."
  },
  {
    "type": "descriptive",
    "level": "basic",
    "topic": "Behavioral Patterns - Observer",
    "question": "What is the Observer design pattern and what is the typical relationship between subjects and observers?",
    "answer": "The Observer pattern defines a one-to-many dependency between objects so that when one object (the subject) changes state, all its dependents (observers) are notified and updated automatically."
  },
  {
    "type": "scenario",
    "level": "intermediate",
    "topic": "Behavioral Patterns - Observer",
    "question": "Consider a scenario where you have a stock price that can change, and multiple UI components need to be updated whenever the price changes. How would you use the Observer pattern in C# to implement this?",
    "answer": "You would create an interface for observers (`IStockPriceObserver`) with an `Update()` method. The `Stock` class (the subject) would maintain a list of observers and provide methods to attach and detach observers. When the stock price changes, the `Stock` class would notify all registered observers by calling their `Update()` method."
  },
  {
    "type": "descriptive",
    "level": "basic",
    "topic": "Behavioral Patterns - State",
    "question": "What is the State design pattern and what problem does it solve?",
    "answer": "The State pattern allows an object to alter its behavior when its internal state changes. This pattern makes the object appear as if its class has changed."
  },
  {
    "type": "scenario",
    "level": "intermediate",
    "topic": "Behavioral Patterns - State",
    "question": "Consider a traffic light that can be in three states: Red, Yellow, and Green. Its behavior changes based on its current state. How would you use the State pattern in C# to model this?",
    "answer": "You would create an interface for the `TrafficLightState` with methods like `Handle()` or `TransitionToNextState()`. Concrete classes `RedState`, `YellowState`, and `GreenState` would implement this interface and define the behavior for each state. The `TrafficLight` object would hold a reference to the current state and delegate behavior to it."
  },
  {
    "type": "descriptive",
    "level": "basic",
    "topic": "Behavioral Patterns - Template Method",
    "question": "What is the Template Method design pattern and what is its intent?",
    "answer": "The Template Method pattern defines the skeleton of an algorithm in an operation, deferring some steps to subclasses. It lets subclasses redefine certain steps of an algorithm without changing the algorithm's structure."
  },
  {
    "type": "scenario",
    "level": "intermediate",
    "topic": "Behavioral Patterns - Template Method",
    "question": "You have a process for generating different types of reports (e.g., daily, weekly). The overall structure of the report generation is the same (e.g., fetch data, format data, save report), but the specific data fetching and formatting steps differ. How would you use the Template Method pattern in C#?",
    "answer": "You would create an abstract `ReportGenerator` class with a `GenerateReport()` method that defines the overall algorithm. Abstract methods like `WorkspaceData()` and `FormatData()` would be defined within `ReportGenerator`. Concrete subclasses like `DailyReportGenerator` and `WeeklyReportGenerator` would implement these abstract methods to provide the specific data fetching and formatting logic for their respective reports."
  },
  {
    "type": "descriptive",
    "level": "basic",
    "topic": "Behavioral Patterns - Visitor",
    "question": "What is the Visitor design pattern and what is its primary benefit?",
    "answer": "The Visitor pattern represents an operation to be performed on the elements of an object structure. It lets you define a new operation without changing the classes of the elements on which it operates. Its primary benefit is that it allows you to add new operations easily without modifying the existing object structure."
  },
  {
    "type": "scenario",
    "level": "advanced",
    "topic": "Behavioral Patterns - Visitor",
    "question": "Consider a system that represents different types of documents (e.g., PlainTextDocument, PdfDocument, WordDocument). You need to implement different operations on these documents, such as printing, spell-checking, and converting to HTML, without modifying the document classes themselves. How would you use the Visitor pattern in C#?",
    "answer": "You would define a `Visitor` interface with methods for visiting each concrete document type (e.g., `Visit(PlainTextDocument)`, `Visit(PdfDocument)`). Concrete visitor classes (e.g., `PrintVisitor`, `SpellCheckVisitor`, `HtmlConverterVisitor`) would implement these methods to perform the specific operation for each document type. The document classes would have an `Accept(Visitor visitor)` method that calls the appropriate `Visit` method on the visitor."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Design Patterns - General",
    "question": "Discuss the potential overuse of design patterns. When might applying a design pattern unnecessarily lead to increased complexity in a codebase?",
    "answer": "Overusing design patterns can lead to overly complex and abstract code that is harder to understand and maintain. Applying a pattern when the problem it solves is not significant or when a simpler solution would suffice can introduce unnecessary layers of indirection and abstraction."
  },
  {
    "type": "scenario",
    "level": "advanced",
    "topic": "Design Patterns - General",
    "question": "You are working on a legacy codebase. You identify a section of code that has grown complex and difficult to maintain. How would you approach identifying potential design patterns that could be applied to refactor and improve the design?",
    "answer": "Analyze the code for common problems that design patterns address, such as tight coupling, lack of flexibility, or complex object creation. Look for repetitive code structures that might be simplified by a pattern. Consider the intent of different patterns and see if any align with the desired improvements in the codebase."
  },
  {
    "type": "descriptive",
    "level": "basic",
    "topic": "GoF - Creational",
    "question": "Name and briefly describe the five creational design patterns defined by the Gang of Four.",
    "answer": "The creational patterns are: 1. Abstract Factory: Creates families of related objects. 2. Builder: Separates object construction from its representation. 3. Factory Method: Defines an interface for creating an object, but lets subclasses decide which class to instantiate. 4. Prototype: Creates new objects by copying an existing object. 5. Singleton: Ensures a class has only one instance and provides a global point of access to it."
  },
  {
    "type": "scenario",
    "level": "intermediate",
    "topic": "GoF - Creational - Factory Method",
    "question": "You are building a document processing application that needs to support different document formats (e.g., PDF, Word, TXT). How would you use the Factory Method pattern to create document objects based on the file type?",
    "answer": "You would define an interface for `Document` and concrete classes for each format. Then, you would create an abstract `DocumentFactory` with a `CreateDocument(string fileType)` method. Concrete factory subclasses (e.g., `PdfDocumentFactory`, `WordDocumentFactory`) would override this method to instantiate the appropriate document type based on the `fileType`."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "GoF - Creational - Abstract Factory vs. Factory Method",
    "question": "Compare and contrast the Abstract Factory and Factory Method design patterns. When would you choose one over the other?",
    "answer": "Factory Method is about creating one type of object, where the subclass decides which concrete class to instantiate. Abstract Factory is about creating families of related objects. Use Factory Method when you need flexibility in creating a single product. Use Abstract Factory when you need to ensure that related products are used together consistently."
  },
  {
    "type": "descriptive",
    "level": "basic",
    "topic": "GoF - Structural",
    "question": "Name and briefly describe the seven structural design patterns defined by the Gang of Four.",
    "answer": "The structural patterns are: 1. Adapter: Matches interfaces of different classes. 2. Bridge: Decouples an abstraction from its implementation. 3. Composite: Composes objects into tree structures. 4. Decorator: Adds responsibilities to objects dynamically. 5. Facade: Provides a simplified interface to a complex subsystem. 6. Flyweight: Uses sharing to support large numbers of fine-grained objects efficiently. 7. Proxy: Provides a surrogate or placeholder for another object."
  },
  {
    "type": "scenario",
    "level": "intermediate",
    "topic": "GoF - Structural - Decorator (GoF Context)",
    "question": "In the context of the GoF definition, how does the Decorator pattern adhere to the Open/Closed Principle?",
    "answer": "The Decorator pattern allows you to extend the behavior of an object without modifying its class (Open for extension). The original class remains unchanged (Closed for modification). New functionality is added by wrapping the original object with decorator objects."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "GoF - Structural - Bridge vs. Adapter (GoF Context)",
    "question": "According to the Gang of Four, what is the key difference in intent between the Bridge and Adapter patterns?",
    "answer": "The intent of Adapter is to make things work after they're designed; it's about adapting an existing interface. The intent of Bridge is to let the abstraction and the implementation vary independently; it's often about designing for flexibility from the start."
  },
  {
    "type": "descriptive",
    "level": "basic",
    "topic": "GoF - Behavioral",
    "question": "Name and briefly describe the eleven behavioral design patterns defined by the Gang of Four.",
    "answer": "The behavioral patterns are: 1. Chain of Responsibility: Handles a request by passing it along a chain of handlers. 2. Command: Encapsulates a request as an object. 3. Interpreter: Defines a grammatical representation for a language and an interpreter. 4. Iterator: Provides a way to access the elements of an aggregate object sequentially. 5. Mediator: Defines an object that encapsulates how objects interact. 6. Memento: Captures and externalizes an object's internal state. 7. Observer: Notifies dependent objects when a subject changes state. 8. State: Allows an object to alter its behavior when its internal state changes. 9. Strategy: Defines a family of algorithms and makes them interchangeable. 10. Template Method: Defines the skeleton of an algorithm in an operation, deferring some steps to subclasses. 11. Visitor: Represents an operation to be performed on the elements of an object structure."
  },
  {
    "type": "scenario",
    "level": "intermediate",
    "topic": "GoF - Behavioral - Command (GoF Context)",
    "question": "Explain how the Command pattern promotes loose coupling between the invoker of an operation and the object that performs it, according to the GoF principles.",
    "answer": "The Command pattern encapsulates a request as an object. The invoker (e.g., a button) holds a command object but doesn't know anything about the receiver of the command or the actual operation being performed. The command object itself holds the information about which receiver will perform which action, thus decoupling the invoker from the receiver."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "GoF - Behavioral - Strategy vs. State (GoF Context)",
    "question": "According to the Gang of Four, what is the primary difference in intent between the Strategy and State patterns, even though both involve changing an object's behavior?",
    "answer": "The Strategy pattern is about choosing an algorithm at runtime, allowing the client to select from a family of algorithms. The State pattern is about an object changing its behavior based on its internal state, often without the client's direct knowledge or choice of the specific state."
  },
  {
    "type": "mcq",
    "level": "basic",
    "topic": "GoF - Creational - Singleton",
    "question": "Which of the following is the primary goal of the Singleton design pattern according to the Gang of Four?",
    "options": [
      "To create objects efficiently.",
      "To ensure that a class has only one instance.",
      "To hide the complexity of object creation.",
      "To allow objects with incompatible interfaces to collaborate."
    ],
    "correct_answer": "To ensure that a class has only one instance.",
    "answer": "The Singleton pattern ensures that a class has only one instance and provides a global point of access to it."
  },
  {
    "type": "scenario",
    "level": "intermediate",
    "topic": "GoF - Creational - Builder (GoF Context)",
    "question": "According to the GoF, what are the key participants in the Builder pattern and what are their responsibilities?",
    "answer": "The key participants are: 1. Builder: An interface for creating parts of a Product object. 2. ConcreteBuilder: Constructs and assembles parts of the product by implementing the Builder interface. 3. Director: Constructs the product using the Builder interface. 4. Product: The object being constructed."
  },
  {
    "type": "descriptive",
    "level": "basic",
    "topic": "GoF - Structural - Composite (GoF Context)",
    "question": "In the Composite pattern, what is the common interface that both simple (Leaf) and composite (Composite) objects implement?",
    "answer": "They implement a common interface that declares the operations applicable to both primitives and their compositions. This allows clients to treat individual objects and compositions uniformly."
  },
  {
    "type": "scenario",
    "level": "intermediate",
    "topic": "GoF - Structural - Facade (GoF Context)",
    "question": "According to the GoF, what is a key motivation for using the Facade pattern?",
    "answer": "A key motivation is to provide a simple default view of a subsystem that is sufficient for most clients. It shields clients from the complexities of the subsystem components, promoting loose coupling."
  },
  {
    "type": "descriptive",
    "level": "basic",
    "topic": "GoF - Behavioral - Observer (GoF Context)",
    "question": "In the Observer pattern, what is the responsibility of the 'Subject'?",
    "answer": "The Subject maintains a list of its dependents, called observers. It notifies them, usually by calling a method on their interface, whenever its state changes."
  },
  {
    "type": "scenario",
    "level": "intermediate",
    "topic": "GoF - Behavioral - Template Method (GoF Context)",
    "question": "According to the GoF, what is the role of 'primitive operations' in the Template Method pattern?",
    "answer": "Primitive operations are abstract or concrete methods defined in the abstract class (the template). Subclasses override the abstract primitive operations to provide specific implementations for the steps of the algorithm, while the template method itself defines the overall structure."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "GoF - Creational - Prototype (GoF Context)",
    "question": "Discuss the difference between shallow copy and deep copy in the context of the Prototype pattern, as described by the Gang of Four.",
    "answer": "A shallow copy creates a new object where the fields of the new object are references to the same objects as the original. A deep copy creates a new object where the fields of the new object are copies of the fields of the original object. The Prototype pattern often requires careful consideration of whether a shallow or deep copy is needed, especially for objects containing other objects."
  },
  {
    "type": "scenario",
    "level": "intermediate",
    "topic": "GoF - Structural - Flyweight (GoF Context)",
    "question": "According to the GoF, what is the distinction between 'intrinsic' and 'extrinsic' state in the Flyweight pattern?",
    "answer": "Intrinsic state is stored in the Flyweight object and is shared among all clients. It is state that is independent of the Flyweight's context. Extrinsic state depends on and varies with the Flyweight's context and therefore cannot be shared. Client objects are responsible for supplying the extrinsic state when they operate on the Flyweight."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "GoF - Behavioral - Visitor (GoF Context)",
    "question": "What is the double dispatch mechanism often associated with the Visitor pattern, as explained in the GoF book, and why is it important?",
    "answer": "Double dispatch involves two calls to determine which method to execute. First, the client calls the `Accept` method on the element, passing the visitor. Second, within the `Accept` method, the element calls the `Visit` method on the visitor, passing itself as an argument. This mechanism allows the visitor to know the exact type of the element it is visiting, enabling type-specific behavior without modifying the element classes."
  },
  {
    "type": "mcq",
    "level": "basic",
    "topic": "GoF - Structural - Adapter",
    "question": "The primary intent of the Adapter pattern, according to the GoF, is to:",
    "options": [
      "Create families of related objects.",
      "Define a simplified interface to a complex subsystem.",
      "Convert the interface of a class into another interface clients expect.",
      "Add responsibilities to an object dynamically."
    ],
    "correct_answer": "Convert the interface of a class into another interface clients expect.",
    "answer": "The Adapter pattern lets classes work together that couldn't otherwise because of incompatible interfaces."
  },
  {
    "type": "scenario",
    "level": "intermediate",
    "topic": "GoF - Behavioral - Mediator (GoF Context)",
    "question": "According to the GoF, what are the benefits of using the Mediator pattern in terms of object interaction and coupling?",
    "answer": "The Mediator pattern promotes loose coupling by centralizing the control logic for object interaction. Instead of objects communicating directly with each other, they communicate through the mediator. This reduces the dependencies between concrete colleague classes and makes it easier to change or extend the interaction logic independently."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "GoF - Behavioral - Memento (GoF Context)",
    "question": "What are the key considerations regarding access control and the visibility of the Memento's internal state, as discussed in the Gang of Four book?",
    "answer": "The GoF emphasizes the importance of protecting the Memento's internal state from the Originator and other objects. Often, the Memento is designed so that only the Originator that created it has access to its internal data. This can be achieved through language features like inner classes or by carefully controlling the Memento's interface."
  },
  {
    "type": "scenario",
    "level": "intermediate",
    "topic": "GoF - Behavioral - Chain of Responsibility (GoF Context)",
    "question": "According to the GoF, what is a potential drawback of using the Chain of Responsibility pattern?",
    "answer": "A potential drawback is that a request might go unhandled if no handler in the chain is responsible for it. Therefore, it's important to ensure that there's a default handler at the end of the chain or that the client is aware of the possibility of a request not being handled."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "GoF - Structural - Proxy (GoF Context)",
    "question": "Discuss the different types of Proxy patterns (e.g., virtual proxy, remote proxy, protective proxy) as outlined in the Gang of Four book, and provide a brief example of each.",
    "answer": "1. Virtual Proxy: Delays the creation of an expensive object until it's needed (e.g., loading a large image on demand). 2. Remote Proxy: Provides a local representative for an object residing in a different address space (e.g., a stub in distributed systems). 3. Protective Proxy: Controls access to the original object based on access rights (e.g., restricting access to certain methods based on user roles)."
  },
  {
    "type": "mcq",
    "level": "basic",
    "topic": "GoF - Behavioral - Strategy",
    "question": "The Strategy design pattern, according to the GoF, focuses on:",
    "options": [
      "Defining a family of algorithms and making them interchangeable.",
      "Encapsulating a request as an object.",
      "Defining an object that encapsulates how objects interact.",
      "Capturing and externalizing an object's internal state."
    ],
    "correct_answer": "Defining a family of algorithms and making them interchangeable.",
    "answer": "The Strategy pattern lets the algorithm vary independently from the clients that use it."
  },
  {
    "type": "scenario",
    "level": "intermediate",
    "topic": "GoF - Behavioral - Iterator (GoF Context)",
    "question": "According to the GoF, what is the responsibility of the 'Iterator' object in the Iterator pattern?",
    "answer": "The Iterator object is responsible for traversing the aggregate and providing access to its elements. It keeps track of the current position in the traversal and provides operations for advancing to the next element, accessing the current element, and determining when all elements have been traversed."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "GoF - Behavioral - Interpreter (GoF Context)",
    "question": "What are some of the challenges and considerations mentioned in the GoF book when implementing the Interpreter pattern?",
    "answer": "Challenges include the complexity of defining the grammar, the potential for creating a large class hierarchy for complex grammars, and the difficulty of changing the grammar once implemented. Consider using it for well-defined, relatively simple languages."
  },
  {
    "type": "scenario",
    "level": "intermediate",
    "topic": "GoF - Behavioral - State (GoF Context)",
    "question": "According to the GoF, how does the State pattern differ from simply using conditional statements within an object's methods to achieve state-dependent behavior?",
    "answer": "The State pattern encapsulates state-specific behavior into separate state classes. This avoids large, monolithic conditional statements that can become hard to manage and extend as the number of states and transitions increases. The State pattern promotes better organization and adherence to the Single Responsibility Principle."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "GoF - Behavioral - Command (Advanced GoF)",
    "question": "Discuss the use of the Command pattern for implementing features like undo/redo and transaction logging, as described in the Gang of Four book.",
    "answer": "For undo/redo, each command object can implement an `Undo()` operation. A history of executed commands is maintained, allowing for reversal. For transaction logging, each executed command can be logged, providing a record of actions that can be replayed or analyzed."
  },
  {
    "type": "scenario",
    "level": "intermediate",
    "topic": "GoF - Structural - Composite vs. Decorator (GoF Context)",
    "question": "According to the GoF, what is a key structural difference between the Composite and Decorator patterns?",
    "answer": "The Composite pattern focuses on building hierarchical structures of objects where both individual objects and compositions can be treated uniformly. The Decorator pattern, on the other hand, focuses on adding responsibilities to individual objects dynamically through object composition, not necessarily forming a structural hierarchy in the same way."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "GoF - Creational - Factory Method (Advanced GoF)",
    "question": "Discuss the concept of 'parallel class hierarchies' and how the Factory Method pattern can help in maintaining them, as mentioned in the Gang of Four book.",
    "answer": "Parallel class hierarchies arise when you have hierarchies of creators and corresponding hierarchies of products. The Factory Method pattern allows you to connect these hierarchies by having each concrete creator subclass create instances of the corresponding concrete product subclass, maintaining the parallel structure."
  },
  {
    "type": "scenario",
    "level": "intermediate",
    "topic": "GoF - Behavioral - Observer (Advanced GoF)",
    "question": "According to the GoF, what are some potential issues or considerations when implementing the Observer pattern, such as 'unexpected updates' or the 'dangling pointer' problem?",
    "answer": "Unexpected updates can occur if the subject's state changes in a way that observers are not expecting or prepared for. The dangling pointer problem can arise if an observer is destroyed but the subject still holds a reference to it, leading to errors when the subject tries to notify the observer."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "GoF - Behavioral - Visitor (Advanced GoF)",
    "question": "Discuss the trade-offs of using the Visitor pattern, particularly regarding adding new operations versus adding new element types to the object structure, as described in the Gang of Four book.",
    "answer": "The Visitor pattern makes it easy to add new operations (visitors) because you don't need to modify the element classes. However, adding new element types to the object structure can be difficult because you would need to add a new `Visit` method to the `Visitor` interface and update all concrete visitor classes."
  },
  {
    "type": "scenario",
    "level": "intermediate",
    "topic": "GoF - Structural - Bridge (GoF Context)",
    "question": "According to the GoF, what is the intent behind the Bridge pattern's emphasis on 'separate hierarchies'?",
    "answer": "The intent is to decouple the abstraction (the high-level interface) from its implementation (the low-level details). This allows both the abstraction and the implementation to evolve independently without affecting each other, promoting flexibility and reusability."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "GoF - Creational - Singleton (Advanced GoF)",
    "question": "Discuss the challenges of implementing the Singleton pattern in a distributed environment or with multithreading, as highlighted in the Gang of Four book.",
    "answer": "In a distributed environment, ensuring a single instance across multiple JVMs or processes can be complex. Multithreading requires careful synchronization to prevent multiple instances from being created simultaneously. Techniques like double-checked locking or using thread-safe initialization mechanisms are often necessary."
  },
  {
    "type": "scenario",
    "level": "intermediate",
    "topic": "GoF - Behavioral - Template Method (Advanced GoF)",
    "question": "According to the GoF, how can the Template Method pattern be used to implement the 'Hollywood Principle' ('Don't call us, we'll call you')?",
    "answer": "The template method in the abstract class defines the overall flow of an algorithm. Subclasses provide specific implementations for certain steps, but the template method controls when and how these steps are called. This inversion of control means the abstract class (the 'framework') calls the methods defined by the subclasses (the 'components'), rather than the other way around."
  },
  {
    "type": "descriptive",
    "level": "basic",
    "topic": "Data Structures - Arrays",
    "question": "What are arrays in .NET? What are their key characteristics, and what are the time complexities for accessing an element, inserting an element at the beginning, and inserting an element at the end?",
    "answer": "Arrays in .NET are fixed-size, contiguous blocks of memory that store elements of the same type. Key characteristics include fixed size and direct access to elements using an index. Time complexity: Accessing an element is O(1). Inserting at the beginning is O(n) because all subsequent elements need to be shifted. Inserting at the end is O(1) on average (O(n) if resizing is needed)."
  },
  {
    "type": "comparative",
    "level": "intermediate",
    "topic": "Data Structures - Arrays vs. Lists",
    "question": "Compare and contrast `Array` and `List<T>` in .NET. When would you choose one over the other?",
    "answer": "`Array` has a fixed size, while `List<T>` is dynamically resizable. `Array` can be slightly more performant for read-only scenarios with a known size. `List<T>` is more flexible when the number of elements is unknown or changes frequently."
  },
  {
    "type": "descriptive",
    "level": "basic",
    "topic": "Data Structures - Lists",
    "question": "What is a `List<T>` in .NET? Explain its underlying implementation and the time complexities for adding an element, removing an element by index, and searching for an element.",
    "answer": "`List<T>` represents a dynamically sized collection of objects. It's typically implemented using an array that is resized as needed. Time complexity: Adding an element at the end is O(1) on average (O(n) if resizing). Removing an element by index is O(n) because subsequent elements need to be shifted. Searching for an element (without knowing the index) is O(n)."
  },
  {
    "type": "scenario",
    "level": "intermediate",
    "topic": "Data Structures - Dictionaries",
    "question": "You need to store key-value pairs where you need to quickly look up values based on their unique keys. What .NET data structure would you use, and what are the typical time complexities for insertion, deletion, and lookup?",
    "answer": "You would use `Dictionary<TKey, TValue>`. It's typically implemented using a hash table. Average time complexity for insertion, deletion, and lookup is O(1)."
  },
  {
    "type": "comparative",
    "level": "intermediate",
    "topic": "Data Structures - Dictionaries vs. Sorted Dictionaries",
    "question": "Compare and contrast `Dictionary<TKey, TValue>` and `SortedDictionary<TKey, TValue>` in .NET. When would you choose each?",
    "answer": "`Dictionary` provides faster average-case performance (O(1)) for insertion, deletion, and lookup but does not guarantee any specific order of elements. `SortedDictionary` keeps elements sorted by key (O(log n) for most operations) and is chosen when you need to iterate through the key-value pairs in sorted order."
  },
  {
    "type": "descriptive",
    "level": "basic",
    "topic": "Data Structures - Sets",
    "question": "What is a `HashSet<T>` in .NET? What are its key characteristics and common use cases?",
    "answer": "`HashSet<T>` represents a collection of unique elements. Key characteristics include that it does not allow duplicate elements and provides efficient membership testing. Common use cases include removing duplicates from a collection and checking if an element exists in a collection quickly."
  },
  {
    "type": "scenario",
    "level": "intermediate",
    "topic": "Data Structures - Sets",
    "question": "You have two lists of product IDs. You need to find the common product IDs present in both lists efficiently. How would you use a `HashSet<T>` to achieve this?",
    "answer": "Add all elements from the first list to a `HashSet`. Then, iterate through the second list and check if each product ID exists in the `HashSet` using the `Contains()` method. Alternatively, you can use the `IntersectWith()` method of the `HashSet`."
  },
  {
    "type": "descriptive",
    "level": "basic",
    "topic": "Data Structures - Queues",
    "question": "What is a `Queue<T>` in .NET? Describe its behavior and common use cases.",
    "answer": "`Queue<T>` represents a first-in, first-out (FIFO) collection. Elements are added to the back of the queue (`Enqueue`) and removed from the front (`Dequeue`). Common use cases include managing tasks to be processed in order and implementing breadth-first search algorithms."
  },
  {
    "type": "descriptive",
    "level": "basic",
    "topic": "Data Structures - Stacks",
    "question": "What is a `Stack<T>` in .NET? Describe its behavior and common use cases.",
    "answer": "`Stack<T>` represents a last-in, first-out (LIFO) collection. Elements are added to the top of the stack (`Push`) and removed from the top (`Pop`). Common use cases include managing function calls (call stack) and implementing depth-first search algorithms."
  },
  {
    "type": "comparative",
    "level": "intermediate",
    "topic": "Data Structures - Queues vs. Stacks",
    "question": "Compare and contrast `Queue<T>` and `Stack<T>` in terms of their behavior and typical applications.",
    "answer": "`Queue` follows a FIFO principle (like a waiting line), used for ordered processing. `Stack` follows a LIFO principle (like a stack of plates), often used for backtracking or managing history."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "Data Structures - Linked Lists",
    "question": "What is a `LinkedList<T>` in .NET? What are its advantages and disadvantages compared to `List<T>`?",
    "answer": "`LinkedList<T>` is a collection of nodes where each node contains a value and a reference to the next (and optionally previous) node. Advantages include efficient insertion and deletion of elements at any position (O(1) if you have a reference to the node). Disadvantages include slower random access (O(n) to reach a specific index) and higher memory overhead due to the node structure."
  },
  {
    "type": "scenario",
    "level": "advanced",
    "topic": "Data Structures - Choosing the Right Collection",
    "question": "You need to implement a cache with a maximum size. When the cache is full and a new item needs to be added, the least recently used item should be evicted. Which data structure(s) would you use and how would you implement this?",
    "answer": "You could use a combination of a `Dictionary<TKey, LinkedListNode<TValue>>` for fast lookups and a `LinkedList<TValue>` to maintain the order of access. When an item is accessed, move its node to the front of the linked list. When the cache is full, remove the node from the end of the linked list and its corresponding entry from the dictionary."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "Data Structures - SortedSet",
    "question": "What is a `SortedSet<T>` in .NET? What are its key characteristics and when would you use it?",
    "answer": "`SortedSet<T>` represents a collection of unique elements that are kept sorted. Key characteristics include uniqueness and automatic sorting. Use it when you need to maintain a unique collection of items in a sorted order and perform efficient set operations."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Data Structures - Concurrent Collections",
    "question": "Explain the purpose of the `System.Collections.Concurrent` namespace in .NET. Give examples of situations where you would use concurrent collections over their non-concurrent counterparts.",
    "answer": "The `System.Collections.Concurrent` namespace provides thread-safe collection classes that can be safely accessed by multiple threads concurrently without the need for explicit locking. Use them in multithreaded applications where multiple threads need to read and write to the same collection to avoid race conditions and improve performance."
  },
  {
    "type": "scenario",
    "level": "intermediate",
    "topic": "Data Structures - ConcurrentQueue",
    "question": "You have a multithreaded application where multiple producer threads are generating tasks and a single consumer thread needs to process them in the order they were generated. Which concurrent collection would be most suitable for this scenario?",
    "answer": "`ConcurrentQueue<T>` would be the most suitable choice as it provides thread-safe FIFO behavior, allowing multiple producers to enqueue tasks and a single consumer to dequeue them in the correct order."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "Data Structures - ConcurrentStack",
    "question": "What is a `ConcurrentStack<T>` in .NET? How does it differ from `ConcurrentQueue<T>`, and when might you use it?",
    "answer": "`ConcurrentStack<T>` provides thread-safe LIFO behavior. Unlike `ConcurrentQueue`, elements are added and removed from the top. It might be used in scenarios where the order of processing doesn't strictly need to be FIFO, such as in certain types of parallel algorithms or task management where the most recently added task can be processed next."
  },
  {
    "type": "scenario",
    "level": "advanced",
    "topic": "Data Structures - ConcurrentDictionary",
    "question": "You have a high-performance web service where multiple requests might try to access and update a shared cache of data concurrently. Which data structure would you use for this cache in .NET and why?",
    "answer": "`ConcurrentDictionary<TKey, TValue>` would be a good choice as it provides thread-safe key-value pair storage with efficient concurrent read and write operations, minimizing the need for manual locking and improving performance under high contention."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "Data Structures - BlockingCollection",
    "question": "What is a `BlockingCollection<T>` in .NET? Explain its purpose and how it facilitates producer-consumer scenarios.",
    "answer": "`BlockingCollection<T>` provides a thread-safe collection with support for blocking add and take operations. It's designed for producer-consumer scenarios where producers add items to the collection and consumers take items from it. If the collection is empty, a consumer trying to take will block until an item becomes available. If the collection is full (if a capacity is set), a producer trying to add will block until space becomes available."
  },
  {
    "type": "scenario",
    "level": "advanced",
    "topic": "Data Structures - Immutable Collections",
    "question": "Explain the concept of immutable collections in .NET (from `System.Collections.Immutable`). What are their benefits in concurrent programming?",
    "answer": "Immutable collections are collections whose contents cannot be changed after they are created. Any operation that appears to modify an immutable collection actually returns a new collection with the changes. In concurrent programming, this eliminates the need for locking when multiple threads access the same collection, as there's no risk of one thread modifying the collection while another is reading from it, leading to safer and often more performant concurrent code."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "Data Structures - BitArray",
    "question": "What is a `BitArray` in .NET? When would you use it?",
    "answer": "`BitArray` manages a compact array of bit values, which are represented as Booleans, where true indicates that the bit is on (1) and false indicates the bit is off (0). You would use it when you need to store a large number of boolean flags or perform bitwise operations on a set of data in a memory-efficient way."
  },
  {
    "type": "comparative",
    "level": "advanced",
    "topic": "Data Structures - Choosing Between List and LinkedList",
    "question": "You are building an application that frequently inserts and deletes elements at arbitrary positions within a large collection. Would you choose `List<T>` or `LinkedList<T>`? Explain your reasoning, considering performance implications.",
    "answer": "`LinkedList<T>` would be a better choice. While accessing an element by index is slower in `LinkedList<T>` (O(n)), inserting or deleting an element at a known position (if you have a reference to the node) is O(1), which is more efficient than `List<T>`'s O(n) in this scenario due to the need to shift elements."
  },
  {
    "type": "scenario",
    "level": "intermediate",
    "topic": "Data Structures - Implementing a Simple Queue",
    "question": "If you were asked to implement a simple queue using just arrays in .NET, how would you handle the enqueue and dequeue operations efficiently, considering the fixed size of an array?",
    "answer": "You could use a circular buffer approach. Maintain two pointers: `head` (for the front of the queue) and `tail` (for the back). Enqueue would add an element at the `tail` and increment it (wrapping around if necessary). Dequeue would return the element at the `head` and increment it (wrapping around if necessary). You'd need to handle cases for an empty and a full queue."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Data Structures - Time Complexity Analysis",
    "question": "Explain the Big O notation for the following operations on a `Dictionary<TKey, TValue>`: average-case lookup, worst-case lookup, insertion, and deletion. What factors can lead to the worst-case scenario?",
    "answer": "Average-case lookup, insertion, and deletion are O(1). Worst-case lookup can be O(n) if there are many hash collisions, causing the dictionary to behave like a linked list in those buckets. Factors like a poor hash function or a large number of elements with the same hash code can lead to this."
  },
  {
    "type": "scenario",
    "level": "intermediate",
    "topic": "Data Structures - Using Tuples as Dictionary Keys",
    "question": "Can you use a `Tuple<T1, T2>` as a key in a `Dictionary<TKey, TValue>` in .NET? If so, what are the considerations?",
    "answer": "Yes, you can use a `Tuple<T1, T2>` (or `ValueTuple<T1, T2>` in newer versions) as a key in a `Dictionary`. The `Dictionary` relies on the `GetHashCode()` and `Equals()` methods of the key type. Tuples and ValueTuples correctly implement these methods based on the values of their elements, so they can be used as keys. Considerations include ensuring that the tuple elements are comparable and have consistent hash code implementations."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "Data Structures - ReadOnlyCollection",
    "question": "What is a `ReadOnlyCollection<T>` in .NET? How does it differ from a regular `List<T>`, and when would you use it?",
    "answer": "`ReadOnlyCollection<T>` provides a read-only wrapper around an existing `IList<T>`. Unlike a regular `List<T>`, it prevents modification of the collection's contents after it has been created (through the wrapper). You would use it when you want to expose a collection to other parts of your code but want to ensure that it cannot be modified externally."
  },
  {
    "type": "scenario",
    "level": "advanced",
    "topic": "Data Structures - Implementing a Custom Data Structure",
    "question": "Describe the steps involved in implementing a custom data structure in .NET, for example, a custom priority queue. What interfaces might you need to implement, and what performance considerations would you keep in mind?",
    "answer": "Steps include defining the behavior and operations of the priority queue, choosing an underlying data representation (e.g., a heap or a sorted list), implementing methods for enqueueing (adding with priority), dequeueing (removing the highest priority element), and peeking. You would likely need to implement interfaces like `ICollection<T>` or potentially custom interfaces. Performance considerations would involve the time complexity of enqueue and dequeue operations, which for a heap-based priority queue would typically be O(log n)."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "Data Structures - Equality and Hash Codes",
    "question": "When using custom objects as keys in a `Dictionary<TKey, TValue>` or elements in a `HashSet<T>`, why is it important to override both the `Equals()` and `GetHashCode()` methods? What are the rules for a correct implementation?",
    "answer": "The `Dictionary` and `HashSet` rely on the hash code to determine which bucket to place an object in and then use the `Equals()` method to resolve collisions within a bucket. If `Equals()` returns true for two objects, their `GetHashCode()` must return the same value. If `GetHashCode()` returns different values, the objects are considered different, even if `Equals()` might return true. A correct implementation should ensure these contracts are maintained."
  },
  {
    "type": "scenario",
    "level": "advanced",
    "topic": "Data Structures - Memory Usage",
    "question": "You are dealing with a very large dataset in memory and need to choose a data structure that minimizes memory consumption while still allowing efficient lookups. What factors would you consider when making this choice, and what data structures might be suitable?",
    "answer": "Consider the size of individual elements, the overhead of the data structure itself (e.g., pointers in linked lists), and whether you need to store duplicate values. For efficient lookups, `HashSet` or `Dictionary` are generally good, but their overhead can be significant. If you have primitive data types and don't need full object semantics, using arrays or specialized structures like `BitArray` might be more memory-efficient. For very large datasets, consider external storage or techniques like data compression."
  },
  {
    "type": "descriptive",
    "level": "intermediate",
    "topic": "Data Structures - Iterators",
    "question": "Explain how iterators work in .NET (using `IEnumerable` and `IEnumerator`). What is the benefit of using iterators?",
    "answer": "Iterators provide a way to traverse the elements of a collection without needing to know its underlying structure. `IEnumerable` defines a contract for a type to be enumerable (it has a `GetEnumerator()` method). `IEnumerator` provides the functionality to iterate through the collection (with `MoveNext()`, `Current`, and `Reset()` methods). Benefits include lazy evaluation (elements are produced only when needed) and a cleaner way to iterate over collections."
  },
  {
    "type": "scenario",
    "level": "advanced",
    "topic": "Data Structures - Implementing a Thread-Safe Queue",
    "question": "If you needed to implement a thread-safe queue from scratch in .NET without using the `System.Collections.Concurrent` namespace, how would you achieve thread safety for the enqueue and dequeue operations?",
    "answer": "You would typically use locking mechanisms like `lock` statements or more advanced synchronization primitives like `Monitor` or `Semaphore` to protect the shared state of the queue (e.g., the underlying data storage and pointers). Careful consideration would need to be given to avoid deadlocks and ensure atomicity of operations."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Data Structures - Trie (Prefix Tree)",
    "question": "Describe the Trie (Prefix Tree) data structure. How could you implement a Trie in .NET, and what are its advantages over a standard `Dictionary<string, TValue>` for certain use cases, such as autocomplete or prefix-based searching?",
    "answer": "A Trie is a tree-like data structure used for storing a dynamic set of strings, where each node represents a prefix of a string. In .NET, you could implement it using nested dictionaries or custom node objects. Advantages over `Dictionary` for autocomplete include efficient retrieval of all words with a given prefix (by traversing the subtree from the prefix node) and faster prefix searching."
  },
  {
    "type": "scenario",
    "level": "advanced",
    "topic": "Data Structures - Bloom Filter",
    "question": "Explain the concept of a Bloom Filter. How would you implement a basic Bloom Filter in .NET using bit arrays and hash functions? What are its key characteristics, including the possibility of false positives, and when might you use it?",
    "answer": "A Bloom Filter is a probabilistic data structure used to test whether an element is a member of a set. It uses multiple hash functions to map elements to bits in a bit array. To check if an element is present, you hash it with the same functions and check if all corresponding bits are set. It can have false positives (it might say an element is present when it's not) but no false negatives. Use cases include reducing lookups in expensive operations (e.g., checking if a key exists in a database before querying)."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Data Structures - Skip List",
    "question": "Describe the Skip List data structure. What are its probabilistic properties, and how does its performance compare to balanced trees (like Red-Black Trees) and linked lists for search, insertion, and deletion operations? How might you implement a Skip List in .NET?",
    "answer": "A Skip List is a probabilistic data structure that uses multiple levels of linked lists to achieve logarithmic time complexity for search, insertion, and deletion, similar to balanced trees. It's built by adding levels to a basic linked list probabilistically. Implementation in .NET would involve nodes with forward pointers at different levels. Skip lists can be simpler to implement than balanced trees and often offer comparable performance in practice."
  },
  {
    "type": "scenario",
    "level": "advanced",
    "topic": "Data Structures - Disjoint Set Union (Union-Find)",
    "question": "Explain the Disjoint Set Union (Union-Find) data structure. Describe how you would implement it in .NET using path compression and union by rank (or size) optimizations. What are its typical use cases?",
    "answer": "Disjoint Set Union is used to keep track of a partition of a set into disjoint (non-overlapping) subsets. It supports two main operations: `Find` (determines which subset an element is in) and `Union` (merges two subsets into a single subset). Implementation in .NET involves an array to represent the parent of each element. Path compression optimizes `Find` by flattening the tree structure. Union by rank (or size) optimizes `Union` by attaching the smaller tree to the root of the larger tree. Use cases include tracking connected components in a graph or network."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Data Structures - Segment Tree (or Fenwick Tree)",
    "question": "Describe the Segment Tree (or alternatively, the Fenwick Tree/Binary Indexed Tree) data structure. What type of problems are they typically used to solve, and what are their advantages over a simple array for these problems? How might you implement a basic Segment Tree for range sum queries in .NET?",
    "answer": "Segment Trees and Fenwick Trees are tree-based data structures that efficiently support range queries (e.g., sum, min, max) and updates on an array. They offer better time complexity for these operations (typically logarithmic) compared to a simple array (linear for range queries, constant for single updates). Implementing a Segment Tree for range sum queries involves building a tree where each node represents the sum of a range in the original array."
  },
  {
    "type": "scenario",
    "level": "advanced",
    "topic": "Data Structures - Combining Structures",
    "question": "You need to design a system that efficiently stores a large number of events, allows you to quickly retrieve all events within a specific time range, and also efficiently retrieve all events associated with a particular entity ID. How would you combine different .NET data structures to achieve this?",
    "answer": "You could use a `SortedDictionary<DateTime, List<Event>>` to store events chronologically, allowing for efficient range queries based on timestamps. Additionally, you could maintain a `Dictionary<Guid, List<Event>>` where the key is the entity ID, enabling quick retrieval of events for a specific entity. You would need to ensure that when an event is added, it's added to both data structures."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Data Structures - Immutable Persistent Data Structures",
    "question": "Explain the concept of immutable persistent data structures. How do they differ from regular immutable collections in .NET? What are the benefits and potential use cases, particularly in scenarios involving concurrency or time-travel debugging?",
    "answer": "Immutable persistent data structures, when modified, return a new version of the structure while keeping the old version intact and efficiently sharing the unchanged parts. This differs from regular immutable collections where a completely new copy might be created. Benefits include thread safety without explicit locking (as no data is ever mutated) and the ability to easily track historical states for debugging or undo/redo functionalities."
  },
  {
    "type": "scenario",
    "level": "advanced",
    "topic": "Data Structures - Memory-Efficient String Storage",
    "question": "You are processing a massive dataset containing many repeated strings. How could you use data structures in .NET to minimize the memory footprint associated with storing these strings?",
    "answer": "You could use string interning (if the strings are identical) or a Trie data structure to store the strings. A Trie can significantly reduce memory usage by sharing common prefixes among multiple strings. You could also explore techniques like using a dictionary to map unique strings to integer IDs and then storing these IDs instead of the full strings in your main data structure."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Data Structures - Graph Representations",
    "question": "Describe different ways to represent a graph data structure in .NET (e.g., Adjacency List, Adjacency Matrix). What are the trade-offs between these representations in terms of memory usage and the efficiency of common graph operations like finding neighbors or checking for an edge?",
    "answer": "Adjacency List uses a list of neighbors for each vertex, efficient for sparse graphs and finding neighbors. Adjacency Matrix uses a 2D array, efficient for dense graphs and checking for an edge between two vertices (O(1)), but can be memory-intensive for sparse graphs. Choose based on the graph's density and the operations you need to perform most frequently."
  },
  {
    "type": "scenario",
    "level": "advanced",
    "topic": "Data Structures - Implementing a Rate Limiter",
    "question": "You need to implement a rate limiter for an API endpoint that allows a maximum of N requests per minute per user. What data structure(s) could you use in .NET to efficiently track the number of requests made by each user within the last minute?",
    "answer": "You could use a `ConcurrentDictionary<UserId, Queue<DateTime>>`. For each user, the queue would store the timestamps of their recent requests. When a new request comes in, you enqueue the current timestamp and remove any timestamps older than one minute from the front of the queue. The size of the queue would then represent the number of requests made within the last minute. You would need to handle cleanup of stale entries periodically."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "CQRS (Command Query Responsibility Segregation)",
    "question": "Explain the core principles of the CQRS (Command Query Responsibility Segregation) pattern. What is the fundamental idea behind separating commands and queries?",
    "answer": "CQRS is an architectural pattern that separates the responsibility of handling commands (operations that change the state of the system) from the responsibility of handling queries (operations that retrieve information from the system). The fundamental idea is that read and write operations often have different performance and scalability requirements, and separating them allows for independent optimization of each side."
  },
  {
    "type": "comparative",
    "level": "advanced",
    "topic": "CQRS (Command Query Responsibility Segregation)",
    "question": "What are the key benefits and potential drawbacks of adopting the CQRS pattern in a system?",
    "answer": "Benefits include: 1. Independent scaling of read and write workloads. 2. Optimized data models for reads and writes. 3. Improved security by isolating write operations. 4. Better alignment with domain-driven design principles. Drawbacks can include: 1. Increased complexity due to having separate models. 2. Eventual consistency challenges between the read and write sides. 3. A steeper learning curve for the development team."
  },
  {
    "type": "scenario",
    "level": "advanced",
    "topic": "CQRS (Command Query Responsibility Segregation)",
    "question": "In a CQRS architecture, how would you typically handle data synchronization between the command (write) side and the query (read) side? Discuss different approaches and their trade-offs.",
    "answer": "Common approaches include: 1. Event Sourcing: The write side persists changes as a sequence of events, which are then consumed by the read side to update its data stores. This offers an audit log and temporal queries but introduces complexity. 2. Materialized Views: The read side maintains denormalized data stores optimized for queries, updated asynchronously based on events or direct database replication from the write side. This can lead to eventual consistency."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "CQRS (Command Query Responsibility Segregation)",
    "question": "Explain the relationship between CQRS and Event Sourcing. Is Event Sourcing a mandatory part of a CQRS implementation? Why or why not?",
    "answer": "Event Sourcing is a common companion pattern to CQRS because it naturally fits the concept of recording state changes as commands are processed. However, it's not strictly mandatory. You can implement CQRS with a traditional state-based persistence model on the write side, but Event Sourcing often provides significant benefits in terms of auditability, temporal queries, and simplifying the read model updates."
  },
  {
    "type": "scenario",
    "level": "advanced",
    "topic": "CQRS (Command Query Responsibility Segregation)",
    "question": "Consider an e-commerce application where a customer places an order. Describe how this process might be handled using a CQRS architecture, highlighting the command and query flows.",
    "answer": "A `PlaceOrderCommand` would be sent to the write side, handled by a command handler that validates the order, updates the domain model, and potentially publishes domain events (e.g., `OrderPlacedEvent`). The query side would have read models optimized for displaying order details, order history, etc., which would be updated asynchronously based on the events or changes on the write side. Queries for order status or details would then be served from these optimized read models."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "CQRS (Command Query Responsibility Segregation)",
    "question": "What are some of the challenges associated with eventual consistency in a CQRS system, and how can you mitigate these challenges to provide a better user experience?",
    "answer": "Challenges include users not seeing their changes immediately reflected in the read side, which can lead to confusion. Mitigation strategies include: 1. Using techniques like 'read-your-writes' where, after a write operation, the system temporarily reads from the write model or a local cache. 2. Providing clear visual feedback to the user about the status of their operations. 3. Employing mechanisms for faster synchronization between the read and write sides where critical."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Saga Pattern",
    "question": "Explain the Saga pattern. What problem does it solve in the context of distributed systems?",
    "answer": "The Saga pattern is a way to manage a sequence of local transactions across multiple services in a distributed system to achieve an overall business transaction. It solves the problem of maintaining data consistency across services without using distributed transactions (which can be complex and problematic in microservices architectures)."
  },
  {
    "type": "comparative",
    "level": "advanced",
    "topic": "Saga Pattern",
    "question": "Describe the two main types of Saga implementation: Choreography and Orchestration. What are the advantages and disadvantages of each approach?",
    "answer": "1. Choreography: Each service involved in the Saga publishes events when its local transaction completes, and other services subscribe to these events and react accordingly. Advantages: Loose coupling between services. Disadvantages: Harder to track the overall process, potential for cyclic dependencies. 2. Orchestration: A central orchestrator service manages the flow of the Saga, telling each service when to perform its local transaction. Advantages: Easier to track and manage the process flow. Disadvantages: Orchestrator service can become a single point of failure."
  },
  {
    "type": "scenario",
    "level": "advanced",
    "topic": "Saga Pattern",
    "question": "In a Saga pattern, how do you handle failures in one of the local transactions? Explain the concept of 'compensating transactions'.",
    "answer": "When a local transaction in a Saga fails, you need to execute a compensating transaction in each of the services that have already completed their part of the Saga to undo the changes they made. A compensating transaction is a transaction that reverses the effects of the preceding transaction. For example, if a payment service successfully charged a customer but the subsequent order processing fails, a compensating transaction would be to refund the payment."
  },
  {
    "type": "descriptive",
    "level": "advanced",
    "topic": "Saga Pattern",
    "question": "What are some of the challenges and complexities involved in implementing and managing Sagas in a distributed system?",
    "answer": "Challenges include: 1. Designing and implementing compensating transactions, which can be complex. 2. Handling eventual consistency and potential data inconsistencies. 3. Managing the state of the Saga, especially in choreography-based implementations. 4. Dealing with retries and idempotency of messages and transactions. 5. Testing and debugging Sagas can be more difficult than with traditional transactions."
  },
  {
    "type": "scenario",
    "level": "advanced",
    "topic": "Saga Pattern",
    "question": "Consider a scenario where a user is booking a trip involving flights, hotels, and car rentals. How could you use the Saga pattern to manage this booking process across different microservices responsible for each of these reservations?",
    "answer": "You could use either choreography or orchestration. With choreography, the 'Trip Booking Service' might initiate the process by creating a pending trip. It then publishes an event that triggers the 'Flight Booking Service' to book a flight. Upon success, the 'Flight Booking Service' publishes an event that triggers the 'Hotel Booking Service', and so on. If any service fails, it would publish a compensating event that other services would listen to and execute their compensating transactions (e.g., canceling the flight booking if the hotel booking fails). With orchestration, a central 'Trip Booking Orchestrator' service would coordinate the calls to the individual services, telling each one to perform its operation and handling failures by invoking compensating transactions on the services that have already succeeded."
  }
]